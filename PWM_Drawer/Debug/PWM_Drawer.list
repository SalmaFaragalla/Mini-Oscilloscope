
PWM_Drawer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000239c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f0  080024f0  000207f8  2**0
                  CONTENTS
  4 .ARM          00000000  080024f0  080024f0  000207f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f0  080024f0  000207f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f0  080024f0  000124f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007f8  20000000  080024f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  200007f8  08002cf0  000207f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  08002cf0  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001b2c  00000000  00000000  00020821  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000733  00000000  00000000  0002234d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000258  00000000  00000000  00022a80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001f0  00000000  00000000  00022cd8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000010fa  00000000  00000000  00022ec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000ddb  00000000  00000000  00023fc2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004890  00000000  00000000  00024d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0002962d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a78  00000000  00000000  000296a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200007f8 	.word	0x200007f8
 800014c:	00000000 	.word	0x00000000
 8000150:	080024b4 	.word	0x080024b4

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200007fc 	.word	0x200007fc
 800016c:	080024b4 	.word	0x080024b4

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_frsub>:
 80009ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__addsf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_fsub>:
 80009b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b8 <__addsf3>:
 80009b8:	0042      	lsls	r2, r0, #1
 80009ba:	bf1f      	itttt	ne
 80009bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c0:	ea92 0f03 	teqne	r2, r3
 80009c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009cc:	d06a      	beq.n	8000aa4 <__addsf3+0xec>
 80009ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d6:	bfc1      	itttt	gt
 80009d8:	18d2      	addgt	r2, r2, r3
 80009da:	4041      	eorgt	r1, r0
 80009dc:	4048      	eorgt	r0, r1
 80009de:	4041      	eorgt	r1, r0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	bf88      	it	hi
 80009e8:	4770      	bxhi	lr
 80009ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4249      	negne	r1, r1
 8000a0a:	ea92 0f03 	teq	r2, r3
 8000a0e:	d03f      	beq.n	8000a90 <__addsf3+0xd8>
 8000a10:	f1a2 0201 	sub.w	r2, r2, #1
 8000a14:	fa41 fc03 	asr.w	ip, r1, r3
 8000a18:	eb10 000c 	adds.w	r0, r0, ip
 8000a1c:	f1c3 0320 	rsb	r3, r3, #32
 8000a20:	fa01 f103 	lsl.w	r1, r1, r3
 8000a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__addsf3+0x78>
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a34:	d313      	bcc.n	8000a5e <__addsf3+0xa6>
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d306      	bcc.n	8000a4a <__addsf3+0x92>
 8000a3c:	0840      	lsrs	r0, r0, #1
 8000a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a42:	f102 0201 	add.w	r2, r2, #1
 8000a46:	2afe      	cmp	r2, #254	; 0xfe
 8000a48:	d251      	bcs.n	8000aee <__addsf3+0x136>
 8000a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a52:	bf08      	it	eq
 8000a54:	f020 0001 	biceq.w	r0, r0, #1
 8000a58:	ea40 0003 	orr.w	r0, r0, r3
 8000a5c:	4770      	bx	lr
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	eb40 0000 	adc.w	r0, r0, r0
 8000a64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	d1ed      	bne.n	8000a4a <__addsf3+0x92>
 8000a6e:	fab0 fc80 	clz	ip, r0
 8000a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a76:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7e:	bfaa      	itet	ge
 8000a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a84:	4252      	neglt	r2, r2
 8000a86:	4318      	orrge	r0, r3
 8000a88:	bfbc      	itt	lt
 8000a8a:	40d0      	lsrlt	r0, r2
 8000a8c:	4318      	orrlt	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	f092 0f00 	teq	r2, #0
 8000a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a98:	bf06      	itte	eq
 8000a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9e:	3201      	addeq	r2, #1
 8000aa0:	3b01      	subne	r3, #1
 8000aa2:	e7b5      	b.n	8000a10 <__addsf3+0x58>
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d021      	beq.n	8000af8 <__addsf3+0x140>
 8000ab4:	ea92 0f03 	teq	r2, r3
 8000ab8:	d004      	beq.n	8000ac4 <__addsf3+0x10c>
 8000aba:	f092 0f00 	teq	r2, #0
 8000abe:	bf08      	it	eq
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea90 0f01 	teq	r0, r1
 8000ac8:	bf1c      	itt	ne
 8000aca:	2000      	movne	r0, #0
 8000acc:	4770      	bxne	lr
 8000ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad2:	d104      	bne.n	8000ade <__addsf3+0x126>
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae2:	bf3c      	itt	cc
 8000ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bxcc	lr
 8000aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	4770      	bx	lr
 8000af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000afc:	bf16      	itet	ne
 8000afe:	4608      	movne	r0, r1
 8000b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b04:	4601      	movne	r1, r0
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	bf06      	itte	eq
 8000b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0e:	ea90 0f01 	teqeq	r0, r1
 8000b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_ui2f>:
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e004      	b.n	8000b28 <__aeabi_i2f+0x8>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_i2f>:
 8000b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	bf48      	it	mi
 8000b26:	4240      	negmi	r0, r0
 8000b28:	ea5f 0c00 	movs.w	ip, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b34:	4601      	mov	r1, r0
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	e01c      	b.n	8000b76 <__aeabi_l2f+0x2a>

08000b3c <__aeabi_ul2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e00a      	b.n	8000b60 <__aeabi_l2f+0x14>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_l2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__aeabi_l2f+0x14>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	ea5f 0c01 	movs.w	ip, r1
 8000b64:	bf02      	ittt	eq
 8000b66:	4684      	moveq	ip, r0
 8000b68:	4601      	moveq	r1, r0
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b70:	bf08      	it	eq
 8000b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7a:	fabc f28c 	clz	r2, ip
 8000b7e:	3a08      	subs	r2, #8
 8000b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b84:	db10      	blt.n	8000ba8 <__aeabi_l2f+0x5c>
 8000b86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f102 0220 	add.w	r2, r2, #32
 8000bac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_fmul>:
 8000bc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd0:	bf1e      	ittt	ne
 8000bd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bd6:	ea92 0f0c 	teqne	r2, ip
 8000bda:	ea93 0f0c 	teqne	r3, ip
 8000bde:	d06f      	beq.n	8000cc0 <__aeabi_fmul+0xf8>
 8000be0:	441a      	add	r2, r3
 8000be2:	ea80 0c01 	eor.w	ip, r0, r1
 8000be6:	0240      	lsls	r0, r0, #9
 8000be8:	bf18      	it	ne
 8000bea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bee:	d01e      	beq.n	8000c2e <__aeabi_fmul+0x66>
 8000bf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000c00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c08:	bf3e      	ittt	cc
 8000c0a:	0049      	lslcc	r1, r1, #1
 8000c0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c10:	005b      	lslcc	r3, r3, #1
 8000c12:	ea40 0001 	orr.w	r0, r0, r1
 8000c16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c1a:	2afd      	cmp	r2, #253	; 0xfd
 8000c1c:	d81d      	bhi.n	8000c5a <__aeabi_fmul+0x92>
 8000c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c26:	bf08      	it	eq
 8000c28:	f020 0001 	biceq.w	r0, r0, #1
 8000c2c:	4770      	bx	lr
 8000c2e:	f090 0f00 	teq	r0, #0
 8000c32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c36:	bf08      	it	eq
 8000c38:	0249      	lsleq	r1, r1, #9
 8000c3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c42:	3a7f      	subs	r2, #127	; 0x7f
 8000c44:	bfc2      	ittt	gt
 8000c46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c4e:	4770      	bxgt	lr
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	dc5d      	bgt.n	8000d18 <__aeabi_fmul+0x150>
 8000c5c:	f112 0f19 	cmn.w	r2, #25
 8000c60:	bfdc      	itt	le
 8000c62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c66:	4770      	bxle	lr
 8000c68:	f1c2 0200 	rsb	r2, r2, #0
 8000c6c:	0041      	lsls	r1, r0, #1
 8000c6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c72:	f1c2 0220 	rsb	r2, r2, #32
 8000c76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c7e:	f140 0000 	adc.w	r0, r0, #0
 8000c82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c86:	bf08      	it	eq
 8000c88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8c:	4770      	bx	lr
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c96:	bf02      	ittt	eq
 8000c98:	0040      	lsleq	r0, r0, #1
 8000c9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c9e:	3a01      	subeq	r2, #1
 8000ca0:	d0f9      	beq.n	8000c96 <__aeabi_fmul+0xce>
 8000ca2:	ea40 000c 	orr.w	r0, r0, ip
 8000ca6:	f093 0f00 	teq	r3, #0
 8000caa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cae:	bf02      	ittt	eq
 8000cb0:	0049      	lsleq	r1, r1, #1
 8000cb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cb6:	3b01      	subeq	r3, #1
 8000cb8:	d0f9      	beq.n	8000cae <__aeabi_fmul+0xe6>
 8000cba:	ea41 010c 	orr.w	r1, r1, ip
 8000cbe:	e78f      	b.n	8000be0 <__aeabi_fmul+0x18>
 8000cc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc4:	ea92 0f0c 	teq	r2, ip
 8000cc8:	bf18      	it	ne
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d00a      	beq.n	8000ce6 <__aeabi_fmul+0x11e>
 8000cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd4:	bf18      	it	ne
 8000cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	d1d8      	bne.n	8000c8e <__aeabi_fmul+0xc6>
 8000cdc:	ea80 0001 	eor.w	r0, r0, r1
 8000ce0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	bf17      	itett	ne
 8000cec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf0:	4608      	moveq	r0, r1
 8000cf2:	f091 0f00 	teqne	r1, #0
 8000cf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cfa:	d014      	beq.n	8000d26 <__aeabi_fmul+0x15e>
 8000cfc:	ea92 0f0c 	teq	r2, ip
 8000d00:	d101      	bne.n	8000d06 <__aeabi_fmul+0x13e>
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	d10f      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d06:	ea93 0f0c 	teq	r3, ip
 8000d0a:	d103      	bne.n	8000d14 <__aeabi_fmul+0x14c>
 8000d0c:	024b      	lsls	r3, r1, #9
 8000d0e:	bf18      	it	ne
 8000d10:	4608      	movne	r0, r1
 8000d12:	d108      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d14:	ea80 0001 	eor.w	r0, r0, r1
 8000d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fdiv>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d069      	beq.n	8000e1c <__aeabi_fdiv+0xec>
 8000d48:	eba2 0203 	sub.w	r2, r2, r3
 8000d4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d50:	0249      	lsls	r1, r1, #9
 8000d52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d56:	d037      	beq.n	8000dc8 <__aeabi_fdiv+0x98>
 8000d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	bf38      	it	cc
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d76:	428b      	cmp	r3, r1
 8000d78:	bf24      	itt	cs
 8000d7a:	1a5b      	subcs	r3, r3, r1
 8000d7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d84:	bf24      	itt	cs
 8000d86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d92:	bf24      	itt	cs
 8000d94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da0:	bf24      	itt	cs
 8000da2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000da6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	bf18      	it	ne
 8000dae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000db2:	d1e0      	bne.n	8000d76 <__aeabi_fdiv+0x46>
 8000db4:	2afd      	cmp	r2, #253	; 0xfd
 8000db6:	f63f af50 	bhi.w	8000c5a <__aeabi_fmul+0x92>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd0:	327f      	adds	r2, #127	; 0x7f
 8000dd2:	bfc2      	ittt	gt
 8000dd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ddc:	4770      	bxgt	lr
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	3a01      	subs	r2, #1
 8000de8:	e737      	b.n	8000c5a <__aeabi_fmul+0x92>
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fdiv+0xc2>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fdiv+0xda>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e795      	b.n	8000d48 <__aeabi_fdiv+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	d108      	bne.n	8000e38 <__aeabi_fdiv+0x108>
 8000e26:	0242      	lsls	r2, r0, #9
 8000e28:	f47f af7d 	bne.w	8000d26 <__aeabi_fmul+0x15e>
 8000e2c:	ea93 0f0c 	teq	r3, ip
 8000e30:	f47f af70 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e776      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e38:	ea93 0f0c 	teq	r3, ip
 8000e3c:	d104      	bne.n	8000e48 <__aeabi_fdiv+0x118>
 8000e3e:	024b      	lsls	r3, r1, #9
 8000e40:	f43f af4c 	beq.w	8000cdc <__aeabi_fmul+0x114>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e76e      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1ca      	bne.n	8000dea <__aeabi_fdiv+0xba>
 8000e54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e58:	f47f af5c 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e60:	f47f af3c 	bne.w	8000cdc <__aeabi_fmul+0x114>
 8000e64:	e75f      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e66:	bf00      	nop

08000e68 <__gesf2>:
 8000e68:	f04f 3cff 	mov.w	ip, #4294967295
 8000e6c:	e006      	b.n	8000e7c <__cmpsf2+0x4>
 8000e6e:	bf00      	nop

08000e70 <__lesf2>:
 8000e70:	f04f 0c01 	mov.w	ip, #1
 8000e74:	e002      	b.n	8000e7c <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__cmpsf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e8c:	bf18      	it	ne
 8000e8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e92:	d011      	beq.n	8000eb8 <__cmpsf2+0x40>
 8000e94:	b001      	add	sp, #4
 8000e96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e9a:	bf18      	it	ne
 8000e9c:	ea90 0f01 	teqne	r0, r1
 8000ea0:	bf58      	it	pl
 8000ea2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ea6:	bf88      	it	hi
 8000ea8:	17c8      	asrhi	r0, r1, #31
 8000eaa:	bf38      	it	cc
 8000eac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb0:	bf18      	it	ne
 8000eb2:	f040 0001 	orrne.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	d102      	bne.n	8000ec4 <__cmpsf2+0x4c>
 8000ebe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ec2:	d105      	bne.n	8000ed0 <__cmpsf2+0x58>
 8000ec4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ec8:	d1e4      	bne.n	8000e94 <__cmpsf2+0x1c>
 8000eca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ece:	d0e1      	beq.n	8000e94 <__cmpsf2+0x1c>
 8000ed0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_cfrcmple>:
 8000ed8:	4684      	mov	ip, r0
 8000eda:	4608      	mov	r0, r1
 8000edc:	4661      	mov	r1, ip
 8000ede:	e7ff      	b.n	8000ee0 <__aeabi_cfcmpeq>

08000ee0 <__aeabi_cfcmpeq>:
 8000ee0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ee2:	f7ff ffc9 	bl	8000e78 <__cmpsf2>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	bf48      	it	mi
 8000eea:	f110 0f00 	cmnmi.w	r0, #0
 8000eee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef0 <__aeabi_fcmpeq>:
 8000ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef4:	f7ff fff4 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000ef8:	bf0c      	ite	eq
 8000efa:	2001      	moveq	r0, #1
 8000efc:	2000      	movne	r0, #0
 8000efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f02:	bf00      	nop

08000f04 <__aeabi_fcmplt>:
 8000f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f08:	f7ff ffea 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000f0c:	bf34      	ite	cc
 8000f0e:	2001      	movcc	r0, #1
 8000f10:	2000      	movcs	r0, #0
 8000f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f16:	bf00      	nop

08000f18 <__aeabi_fcmple>:
 8000f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f1c:	f7ff ffe0 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000f20:	bf94      	ite	ls
 8000f22:	2001      	movls	r0, #1
 8000f24:	2000      	movhi	r0, #0
 8000f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2a:	bf00      	nop

08000f2c <__aeabi_fcmpge>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff ffd2 	bl	8000ed8 <__aeabi_cfrcmple>
 8000f34:	bf94      	ite	ls
 8000f36:	2001      	movls	r0, #1
 8000f38:	2000      	movhi	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_fcmpgt>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff ffc8 	bl	8000ed8 <__aeabi_cfrcmple>
 8000f48:	bf34      	ite	cc
 8000f4a:	2001      	movcc	r0, #1
 8000f4c:	2000      	movcs	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_f2iz>:
 8000f54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f5c:	d30f      	bcc.n	8000f7e <__aeabi_f2iz+0x2a>
 8000f5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f66:	d90d      	bls.n	8000f84 <__aeabi_f2iz+0x30>
 8000f68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f74:	fa23 f002 	lsr.w	r0, r3, r2
 8000f78:	bf18      	it	ne
 8000f7a:	4240      	negne	r0, r0
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr
 8000f84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f88:	d101      	bne.n	8000f8e <__aeabi_f2iz+0x3a>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	d105      	bne.n	8000f9a <__aeabi_f2iz+0x46>
 8000f8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f92:	bf08      	it	eq
 8000f94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0000 	mov.w	r0, #0
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_f2uiz>:
 8000fa0:	0042      	lsls	r2, r0, #1
 8000fa2:	d20e      	bcs.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa8:	d30b      	bcc.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000faa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d409      	bmi.n	8000fc8 <__aeabi_f2uiz+0x28>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2uiz+0x32>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d102      	bne.n	8000fd8 <__aeabi_f2uiz+0x38>
 8000fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd6:	4770      	bx	lr
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <APP_IC_Calculate_Freq_Duty>:
 * @brief  Calculates frequency and duty cycle based on captured timer values.
 * @param  None
 * @retval None
 */
static void APP_IC_Calculate_Freq_Duty(void)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
	// Variables to calculate differences between time stamps
	static u32 risingFallingEdgeDifference = 0;
	static u32 risingEdgeDifference = 0;

	// Variables to hold captured CCR register values for frequency and duty cycle calculation
	u32 TIMx_Freq_CCRx = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
	u32 TIMx_Duty_CCRx = 0;
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]

	// Determine the capture channel for frequency measurement
	switch ( APP_TIM_IC_CH1)
	{
	case TIM_CH1:
		TIMx_Freq_CCRx =  APP_TIM_IC_TIMx->CCR1;
 8000fee:	4b3e      	ldr	r3, [pc, #248]	; (80010e8 <APP_IC_Calculate_Freq_Duty+0x108>)
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	607b      	str	r3, [r7, #4]
		break;
 8000ff4:	bf00      	nop
	case TIM_CH1:
		TIMx_Duty_CCRx =  APP_TIM_IC_TIMx->CCR1;
		break;

	case TIM_CH2:
		TIMx_Duty_CCRx =  APP_TIM_IC_TIMx->CCR2;
 8000ff6:	4b3c      	ldr	r3, [pc, #240]	; (80010e8 <APP_IC_Calculate_Freq_Duty+0x108>)
 8000ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ffa:	603b      	str	r3, [r7, #0]
		break;
 8000ffc:	bf00      	nop
		TIMx_Duty_CCRx =  APP_TIM_IC_TIMx->CCR4;
		break;
	}

	// Check if it's the first capture
	if (IsFirstCapture == 0)
 8000ffe:	4b3b      	ldr	r3, [pc, #236]	; (80010ec <APP_IC_Calculate_Freq_Duty+0x10c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d106      	bne.n	8001014 <APP_IC_Calculate_Freq_Duty+0x34>
	{
		firstRisingEdgeCount = TIMx_Freq_CCRx;
 8001006:	4a3a      	ldr	r2, [pc, #232]	; (80010f0 <APP_IC_Calculate_Freq_Duty+0x110>)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6013      	str	r3, [r2, #0]
		IsFirstCapture = 1;
 800100c:	4b37      	ldr	r3, [pc, #220]	; (80010ec <APP_IC_Calculate_Freq_Duty+0x10c>)
 800100e:	2201      	movs	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
			frequency = (float)TIM_CLK / (float)risingEdgeDifference;
			duty = (risingFallingEdgeDifference * 100 ) / (float)risingEdgeDifference;
			IsFirstCapture = 0;
		}
	}
}
 8001012:	e064      	b.n	80010de <APP_IC_Calculate_Freq_Duty+0xfe>
		secondRisingEdgeCount = TIMx_Freq_CCRx;
 8001014:	4a37      	ldr	r2, [pc, #220]	; (80010f4 <APP_IC_Calculate_Freq_Duty+0x114>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
		fallingEdgeCount = TIMx_Duty_CCRx;
 800101a:	4a37      	ldr	r2, [pc, #220]	; (80010f8 <APP_IC_Calculate_Freq_Duty+0x118>)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	6013      	str	r3, [r2, #0]
		if (secondRisingEdgeCount > firstRisingEdgeCount)
 8001020:	4b34      	ldr	r3, [pc, #208]	; (80010f4 <APP_IC_Calculate_Freq_Duty+0x114>)
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	4b32      	ldr	r3, [pc, #200]	; (80010f0 <APP_IC_Calculate_Freq_Duty+0x110>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	429a      	cmp	r2, r3
 800102a:	d907      	bls.n	800103c <APP_IC_Calculate_Freq_Duty+0x5c>
			risingEdgeDifference = secondRisingEdgeCount - firstRisingEdgeCount;
 800102c:	4b31      	ldr	r3, [pc, #196]	; (80010f4 <APP_IC_Calculate_Freq_Duty+0x114>)
 800102e:	681a      	ldr	r2, [r3, #0]
 8001030:	4b2f      	ldr	r3, [pc, #188]	; (80010f0 <APP_IC_Calculate_Freq_Duty+0x110>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	1ad3      	subs	r3, r2, r3
 8001036:	4a31      	ldr	r2, [pc, #196]	; (80010fc <APP_IC_Calculate_Freq_Duty+0x11c>)
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e009      	b.n	8001050 <APP_IC_Calculate_Freq_Duty+0x70>
			risingEdgeDifference = (TIM_MAX_PERIOD - firstRisingEdgeCount) + secondRisingEdgeCount;
 800103c:	4b2d      	ldr	r3, [pc, #180]	; (80010f4 <APP_IC_Calculate_Freq_Duty+0x114>)
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4b2b      	ldr	r3, [pc, #172]	; (80010f0 <APP_IC_Calculate_Freq_Duty+0x110>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800104a:	33ff      	adds	r3, #255	; 0xff
 800104c:	4a2b      	ldr	r2, [pc, #172]	; (80010fc <APP_IC_Calculate_Freq_Duty+0x11c>)
 800104e:	6013      	str	r3, [r2, #0]
		if (fallingEdgeCount > firstRisingEdgeCount)
 8001050:	4b29      	ldr	r3, [pc, #164]	; (80010f8 <APP_IC_Calculate_Freq_Duty+0x118>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <APP_IC_Calculate_Freq_Duty+0x110>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	429a      	cmp	r2, r3
 800105a:	d907      	bls.n	800106c <APP_IC_Calculate_Freq_Duty+0x8c>
			risingFallingEdgeDifference = fallingEdgeCount - firstRisingEdgeCount;
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <APP_IC_Calculate_Freq_Duty+0x118>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <APP_IC_Calculate_Freq_Duty+0x110>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	1ad3      	subs	r3, r2, r3
 8001066:	4a26      	ldr	r2, [pc, #152]	; (8001100 <APP_IC_Calculate_Freq_Duty+0x120>)
 8001068:	6013      	str	r3, [r2, #0]
 800106a:	e009      	b.n	8001080 <APP_IC_Calculate_Freq_Duty+0xa0>
			risingFallingEdgeDifference = (TIM_MAX_PERIOD - firstRisingEdgeCount) + fallingEdgeCount;
 800106c:	4b22      	ldr	r3, [pc, #136]	; (80010f8 <APP_IC_Calculate_Freq_Duty+0x118>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <APP_IC_Calculate_Freq_Duty+0x110>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	1ad3      	subs	r3, r2, r3
 8001076:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800107a:	33ff      	adds	r3, #255	; 0xff
 800107c:	4a20      	ldr	r2, [pc, #128]	; (8001100 <APP_IC_Calculate_Freq_Duty+0x120>)
 800107e:	6013      	str	r3, [r2, #0]
		if (risingEdgeDifference > 1)
 8001080:	4b1e      	ldr	r3, [pc, #120]	; (80010fc <APP_IC_Calculate_Freq_Duty+0x11c>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d92a      	bls.n	80010de <APP_IC_Calculate_Freq_Duty+0xfe>
			frequency = (float)TIM_CLK / (float)risingEdgeDifference;
 8001088:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <APP_IC_Calculate_Freq_Duty+0x11c>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4618      	mov	r0, r3
 800108e:	f7ff fd43 	bl	8000b18 <__aeabi_ui2f>
 8001092:	4603      	mov	r3, r0
 8001094:	4619      	mov	r1, r3
 8001096:	481b      	ldr	r0, [pc, #108]	; (8001104 <APP_IC_Calculate_Freq_Duty+0x124>)
 8001098:	f7ff fe4a 	bl	8000d30 <__aeabi_fdiv>
 800109c:	4603      	mov	r3, r0
 800109e:	461a      	mov	r2, r3
 80010a0:	4b19      	ldr	r3, [pc, #100]	; (8001108 <APP_IC_Calculate_Freq_Duty+0x128>)
 80010a2:	601a      	str	r2, [r3, #0]
			duty = (risingFallingEdgeDifference * 100 ) / (float)risingEdgeDifference;
 80010a4:	4b16      	ldr	r3, [pc, #88]	; (8001100 <APP_IC_Calculate_Freq_Duty+0x120>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2264      	movs	r2, #100	; 0x64
 80010aa:	fb02 f303 	mul.w	r3, r2, r3
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fd32 	bl	8000b18 <__aeabi_ui2f>
 80010b4:	4604      	mov	r4, r0
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <APP_IC_Calculate_Freq_Duty+0x11c>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fd2c 	bl	8000b18 <__aeabi_ui2f>
 80010c0:	4603      	mov	r3, r0
 80010c2:	4619      	mov	r1, r3
 80010c4:	4620      	mov	r0, r4
 80010c6:	f7ff fe33 	bl	8000d30 <__aeabi_fdiv>
 80010ca:	4603      	mov	r3, r0
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff67 	bl	8000fa0 <__aeabi_f2uiz>
 80010d2:	4602      	mov	r2, r0
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <APP_IC_Calculate_Freq_Duty+0x12c>)
 80010d6:	601a      	str	r2, [r3, #0]
			IsFirstCapture = 0;
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <APP_IC_Calculate_Freq_Duty+0x10c>)
 80010da:	2200      	movs	r2, #0
 80010dc:	701a      	strb	r2, [r3, #0]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd90      	pop	{r4, r7, pc}
 80010e6:	bf00      	nop
 80010e8:	40000400 	.word	0x40000400
 80010ec:	20000824 	.word	0x20000824
 80010f0:	20000828 	.word	0x20000828
 80010f4:	2000082c 	.word	0x2000082c
 80010f8:	20000830 	.word	0x20000830
 80010fc:	20000834 	.word	0x20000834
 8001100:	20000838 	.word	0x20000838
 8001104:	4af42400 	.word	0x4af42400
 8001108:	20000814 	.word	0x20000814
 800110c:	20000818 	.word	0x20000818

08001110 <APP_GLCD_DrawPWM>:
 * @brief  Draws a PWM signal on the GLCD.
 * @param  duty: Duty cycle value (0-100)
 * @retval None
 */
static void APP_GLCD_DrawPWM(u32 duty)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
	// Validate the duty cycle parameter
	if (duty < 0 || duty > 100)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2b64      	cmp	r3, #100	; 0x64
 800111c:	d85e      	bhi.n	80011dc <APP_GLCD_DrawPWM+0xcc>
		// Duty cycle out of range, do not proceed with drawing
	    return;
	}

	//Clear the lines where the PWM will be drawn
	for (int i=APP_GLCD_HIGH_LINE ; i<=APP_GLCD_LOW_LINE ; ++i)
 800111e:	2305      	movs	r3, #5
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	e007      	b.n	8001134 <APP_GLCD_DrawPWM+0x24>
	{
		GLCD_ClearLine(i);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	b2db      	uxtb	r3, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fd4f 	bl	8001bcc <GLCD_ClearLine>
	for (int i=APP_GLCD_HIGH_LINE ; i<=APP_GLCD_LOW_LINE ; ++i)
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	3301      	adds	r3, #1
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b07      	cmp	r3, #7
 8001138:	ddf4      	ble.n	8001124 <APP_GLCD_DrawPWM+0x14>
	}

	// Calculate the pixel range of the duty cycle
	int dutyXrange = (duty * 60) / 100;
 800113a:	687a      	ldr	r2, [r7, #4]
 800113c:	4613      	mov	r3, r2
 800113e:	011b      	lsls	r3, r3, #4
 8001140:	1a9b      	subs	r3, r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	461a      	mov	r2, r3
 8001146:	4b27      	ldr	r3, [pc, #156]	; (80011e4 <APP_GLCD_DrawPWM+0xd4>)
 8001148:	fba3 2302 	umull	r2, r3, r3, r2
 800114c:	095b      	lsrs	r3, r3, #5
 800114e:	60bb      	str	r3, [r7, #8]


	// Draw the baseline for the entire graph
	GLCD_DrawHLine(0, APP_GLCD_CYCLE_1_START_X, APP_GLCD_LOW_LINE);
 8001150:	2207      	movs	r2, #7
 8001152:	2107      	movs	r1, #7
 8001154:	2000      	movs	r0, #0
 8001156:	f000 fd71 	bl	8001c3c <GLCD_DrawHLine>

	// Drawing the first cycle
	// Vertical line representing rising edge
	GLCD_DrawVLine(APP_GLCD_HIGH_LINE, APP_GLCD_LOW_LINE, APP_GLCD_CYCLE_1_START_X);
 800115a:	2207      	movs	r2, #7
 800115c:	2107      	movs	r1, #7
 800115e:	2005      	movs	r0, #5
 8001160:	f000 fd8e 	bl	8001c80 <GLCD_DrawVLine>
	// Top horizontal line representing duty cycle (on)
	GLCD_DrawHLine(APP_GLCD_CYCLE_1_START_X + 1, (APP_GLCD_CYCLE_1_START_X + dutyXrange), APP_GLCD_HIGH_LINE);
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	3307      	adds	r3, #7
 800116a:	b2db      	uxtb	r3, r3
 800116c:	2205      	movs	r2, #5
 800116e:	4619      	mov	r1, r3
 8001170:	2008      	movs	r0, #8
 8001172:	f000 fd63 	bl	8001c3c <GLCD_DrawHLine>
	// Vertical line representing falling edge
	GLCD_DrawVLine(APP_GLCD_HIGH_LINE, APP_GLCD_LOW_LINE, APP_GLCD_CYCLE_1_START_X + dutyXrange);
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	b2db      	uxtb	r3, r3
 800117a:	3307      	adds	r3, #7
 800117c:	b2db      	uxtb	r3, r3
 800117e:	461a      	mov	r2, r3
 8001180:	2107      	movs	r1, #7
 8001182:	2005      	movs	r0, #5
 8001184:	f000 fd7c 	bl	8001c80 <GLCD_DrawVLine>
	// Lower horizontal line representing duty cycle (off)
	GLCD_DrawHLine(APP_GLCD_CYCLE_1_START_X + dutyXrange, APP_GLCD_CYCLE_2_START_X, APP_GLCD_LOW_LINE);
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	b2db      	uxtb	r3, r3
 800118c:	3307      	adds	r3, #7
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2207      	movs	r2, #7
 8001192:	2143      	movs	r1, #67	; 0x43
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fd51 	bl	8001c3c <GLCD_DrawHLine>

	// Drawing the second cycle
	// Vertical line representing rising edge
	GLCD_DrawVLine(APP_GLCD_HIGH_LINE, APP_GLCD_LOW_LINE, APP_GLCD_CYCLE_2_START_X);
 800119a:	2243      	movs	r2, #67	; 0x43
 800119c:	2107      	movs	r1, #7
 800119e:	2005      	movs	r0, #5
 80011a0:	f000 fd6e 	bl	8001c80 <GLCD_DrawVLine>
	// Top horizontal line representing duty cycle (on)
	GLCD_DrawHLine(APP_GLCD_CYCLE_2_START_X + 1, (APP_GLCD_CYCLE_2_START_X + dutyXrange), APP_GLCD_HIGH_LINE);
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	3343      	adds	r3, #67	; 0x43
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	2205      	movs	r2, #5
 80011ae:	4619      	mov	r1, r3
 80011b0:	2044      	movs	r0, #68	; 0x44
 80011b2:	f000 fd43 	bl	8001c3c <GLCD_DrawHLine>
	// Vertical line representing falling edge
	GLCD_DrawVLine(APP_GLCD_HIGH_LINE, APP_GLCD_LOW_LINE, APP_GLCD_CYCLE_2_START_X + dutyXrange);
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	3343      	adds	r3, #67	; 0x43
 80011bc:	b2db      	uxtb	r3, r3
 80011be:	461a      	mov	r2, r3
 80011c0:	2107      	movs	r1, #7
 80011c2:	2005      	movs	r0, #5
 80011c4:	f000 fd5c 	bl	8001c80 <GLCD_DrawVLine>
	// Lower horizontal line representing duty cycle (off)
	GLCD_DrawHLine(APP_GLCD_CYCLE_2_START_X + dutyXrange, APP_GLCD_CYCLE_2_END_X, APP_GLCD_LOW_LINE);
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	3343      	adds	r3, #67	; 0x43
 80011ce:	b2db      	uxtb	r3, r3
 80011d0:	2207      	movs	r2, #7
 80011d2:	217f      	movs	r1, #127	; 0x7f
 80011d4:	4618      	mov	r0, r3
 80011d6:	f000 fd31 	bl	8001c3c <GLCD_DrawHLine>
 80011da:	e000      	b.n	80011de <APP_GLCD_DrawPWM+0xce>
	    return;
 80011dc:	bf00      	nop
}
 80011de:	3710      	adds	r7, #16
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	51eb851f 	.word	0x51eb851f

080011e8 <APP_GLCD_PrintFreq>:
 * @brief  Prints the current frequency value on the GLCD.
 * @param  None
 * @retval None
 */
static void APP_GLCD_PrintFreq()
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b082      	sub	sp, #8
 80011ec:	af00      	add	r7, sp, #0
	GLCD_ClearLine(APP_GLCD_FREQ_LINE);
 80011ee:	2000      	movs	r0, #0
 80011f0:	f000 fcec 	bl	8001bcc <GLCD_ClearLine>
	f32 glcdFreq = APP_IC_GetFreq_KHZ();
 80011f4:	f000 f858 	bl	80012a8 <APP_IC_GetFreq_KHZ>
 80011f8:	6078      	str	r0, [r7, #4]
	GLCD_PrintString("FREQ:", 0, APP_GLCD_FREQ_LINE);
 80011fa:	2200      	movs	r2, #0
 80011fc:	2100      	movs	r1, #0
 80011fe:	4808      	ldr	r0, [pc, #32]	; (8001220 <APP_GLCD_PrintFreq+0x38>)
 8001200:	f000 fbb8 	bl	8001974 <GLCD_PrintString>
	GLCD_PrintFloat(glcdFreq, 35, APP_GLCD_FREQ_LINE);
 8001204:	2200      	movs	r2, #0
 8001206:	2123      	movs	r1, #35	; 0x23
 8001208:	6878      	ldr	r0, [r7, #4]
 800120a:	f000 fc43 	bl	8001a94 <GLCD_PrintFloat>
	GLCD_PrintString("KHZ", 90, APP_GLCD_FREQ_LINE);
 800120e:	2200      	movs	r2, #0
 8001210:	215a      	movs	r1, #90	; 0x5a
 8001212:	4804      	ldr	r0, [pc, #16]	; (8001224 <APP_GLCD_PrintFreq+0x3c>)
 8001214:	f000 fbae 	bl	8001974 <GLCD_PrintString>
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	080024cc 	.word	0x080024cc
 8001224:	080024d4 	.word	0x080024d4

08001228 <APP_GLCD_PrintDuty>:
 * @brief  Prints the current duty cycle value on the GLCD.
 * @param  None
 * @retval None
 */
static void APP_GLCD_PrintDuty()
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
	GLCD_ClearLine(APP_GLCD_DUTY_LINE);
 800122e:	2001      	movs	r0, #1
 8001230:	f000 fccc 	bl	8001bcc <GLCD_ClearLine>
	u32 glcdDuty = APP_IC_GetDuty();
 8001234:	f000 f884 	bl	8001340 <APP_IC_GetDuty>
 8001238:	6078      	str	r0, [r7, #4]
	GLCD_PrintString("DUTY:", 0, APP_GLCD_DUTY_LINE);
 800123a:	2201      	movs	r2, #1
 800123c:	2100      	movs	r1, #0
 800123e:	4808      	ldr	r0, [pc, #32]	; (8001260 <APP_GLCD_PrintDuty+0x38>)
 8001240:	f000 fb98 	bl	8001974 <GLCD_PrintString>
	GLCD_PrintNum(glcdDuty, 35, APP_GLCD_DUTY_LINE);
 8001244:	2201      	movs	r2, #1
 8001246:	2123      	movs	r1, #35	; 0x23
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fbbb 	bl	80019c4 <GLCD_PrintNum>
	GLCD_PrintString("%", 55, APP_GLCD_DUTY_LINE);
 800124e:	2201      	movs	r2, #1
 8001250:	2137      	movs	r1, #55	; 0x37
 8001252:	4804      	ldr	r0, [pc, #16]	; (8001264 <APP_GLCD_PrintDuty+0x3c>)
 8001254:	f000 fb8e 	bl	8001974 <GLCD_PrintString>
}
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	080024d8 	.word	0x080024d8
 8001264:	080024e0 	.word	0x080024e0

08001268 <APP_GLCD_PrintPeriod>:
 * @brief  Prints the current period value on the GLCD.
 * @param  None
 * @retval None
 */
static void APP_GLCD_PrintPeriod()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
	GLCD_ClearLine(APP_GLCD_PERIOD_LINE);
 800126e:	2002      	movs	r0, #2
 8001270:	f000 fcac 	bl	8001bcc <GLCD_ClearLine>
	f32 glcdPeriod = APP_IC_GetPeriod_ms();
 8001274:	f000 f828 	bl	80012c8 <APP_IC_GetPeriod_ms>
 8001278:	6078      	str	r0, [r7, #4]
	GLCD_PrintString("PERIOD:", 0, APP_GLCD_PERIOD_LINE);
 800127a:	2202      	movs	r2, #2
 800127c:	2100      	movs	r1, #0
 800127e:	4808      	ldr	r0, [pc, #32]	; (80012a0 <APP_GLCD_PrintPeriod+0x38>)
 8001280:	f000 fb78 	bl	8001974 <GLCD_PrintString>
	GLCD_PrintFloat(glcdPeriod, 50, APP_GLCD_PERIOD_LINE);
 8001284:	2202      	movs	r2, #2
 8001286:	2132      	movs	r1, #50	; 0x32
 8001288:	6878      	ldr	r0, [r7, #4]
 800128a:	f000 fc03 	bl	8001a94 <GLCD_PrintFloat>
	GLCD_PrintString("ms", 100, APP_GLCD_PERIOD_LINE);
 800128e:	2202      	movs	r2, #2
 8001290:	2164      	movs	r1, #100	; 0x64
 8001292:	4804      	ldr	r0, [pc, #16]	; (80012a4 <APP_GLCD_PrintPeriod+0x3c>)
 8001294:	f000 fb6e 	bl	8001974 <GLCD_PrintString>
}
 8001298:	bf00      	nop
 800129a:	3708      	adds	r7, #8
 800129c:	46bd      	mov	sp, r7
 800129e:	bd80      	pop	{r7, pc}
 80012a0:	080024e4 	.word	0x080024e4
 80012a4:	080024ec 	.word	0x080024ec

080012a8 <APP_IC_GetFreq_KHZ>:
 * @brief  Returns the current frequency value in KHZ.
 * @param  None
 * @retval Frequency in KHZ
 */
static f32 APP_IC_GetFreq_KHZ()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
	return frequency / 1000;
 80012ac:	4b04      	ldr	r3, [pc, #16]	; (80012c0 <APP_IC_GetFreq_KHZ+0x18>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4904      	ldr	r1, [pc, #16]	; (80012c4 <APP_IC_GetFreq_KHZ+0x1c>)
 80012b2:	4618      	mov	r0, r3
 80012b4:	f7ff fd3c 	bl	8000d30 <__aeabi_fdiv>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000814 	.word	0x20000814
 80012c4:	447a0000 	.word	0x447a0000

080012c8 <APP_IC_GetPeriod_ms>:
 * @brief  Returns the current period value in ms.
 * @param  None
 * @retval period in ms
 */
static f32 APP_IC_GetPeriod_ms()
{
 80012c8:	b590      	push	{r4, r7, lr}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
	int currFreq = frequency;
 80012ce:	4b19      	ldr	r3, [pc, #100]	; (8001334 <APP_IC_GetPeriod_ms+0x6c>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fe3e 	bl	8000f54 <__aeabi_f2iz>
 80012d8:	4603      	mov	r3, r0
 80012da:	607b      	str	r3, [r7, #4]

	// Ensure non-zero frequency to avoid division by zero
	if (frequency == 0)
 80012dc:	4b15      	ldr	r3, [pc, #84]	; (8001334 <APP_IC_GetPeriod_ms+0x6c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f04f 0100 	mov.w	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fe03 	bl	8000ef0 <__aeabi_fcmpeq>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <APP_IC_GetPeriod_ms+0x2c>
		currFreq = 1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	607b      	str	r3, [r7, #4]

	return ((1.0 / (currFreq)) * 1000);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f7ff f88d 	bl	8000414 <__aeabi_i2d>
 80012fa:	4603      	mov	r3, r0
 80012fc:	460c      	mov	r4, r1
 80012fe:	461a      	mov	r2, r3
 8001300:	4623      	mov	r3, r4
 8001302:	f04f 0000 	mov.w	r0, #0
 8001306:	490c      	ldr	r1, [pc, #48]	; (8001338 <APP_IC_GetPeriod_ms+0x70>)
 8001308:	f7ff fa18 	bl	800073c <__aeabi_ddiv>
 800130c:	4603      	mov	r3, r0
 800130e:	460c      	mov	r4, r1
 8001310:	4618      	mov	r0, r3
 8001312:	4621      	mov	r1, r4
 8001314:	f04f 0200 	mov.w	r2, #0
 8001318:	4b08      	ldr	r3, [pc, #32]	; (800133c <APP_IC_GetPeriod_ms+0x74>)
 800131a:	f7ff f8e5 	bl	80004e8 <__aeabi_dmul>
 800131e:	4603      	mov	r3, r0
 8001320:	460c      	mov	r4, r1
 8001322:	4618      	mov	r0, r3
 8001324:	4621      	mov	r1, r4
 8001326:	f7ff faf1 	bl	800090c <__aeabi_d2f>
 800132a:	4603      	mov	r3, r0
}
 800132c:	4618      	mov	r0, r3
 800132e:	370c      	adds	r7, #12
 8001330:	46bd      	mov	sp, r7
 8001332:	bd90      	pop	{r4, r7, pc}
 8001334:	20000814 	.word	0x20000814
 8001338:	3ff00000 	.word	0x3ff00000
 800133c:	408f4000 	.word	0x408f4000

08001340 <APP_IC_GetDuty>:
 * @brief  Returns the current duty value .
 * @param  None
 * @retval Duty (0-100)
 */
static u32 APP_IC_GetDuty()
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
	return duty;
 8001344:	4b02      	ldr	r3, [pc, #8]	; (8001350 <APP_IC_GetDuty+0x10>)
 8001346:	681b      	ldr	r3, [r3, #0]
}
 8001348:	4618      	mov	r0, r3
 800134a:	46bd      	mov	sp, r7
 800134c:	bc80      	pop	{r7}
 800134e:	4770      	bx	lr
 8001350:	20000818 	.word	0x20000818

08001354 <APP_Init>:
 * @brief  Initializes the GLCD and timers used for PWM and input capture.
 * @param  None
 * @retval None
 */
void APP_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	af00      	add	r7, sp, #0
	GLCD_Init();
 8001358:	f000 fa66 	bl	8001828 <GLCD_Init>
	TIM_Init(APP_TIM_PWM_TIMx);
 800135c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001360:	f000 fdde 	bl	8001f20 <TIM_Init>
	TIM_Init( APP_TIM_IC_TIMx);
 8001364:	4802      	ldr	r0, [pc, #8]	; (8001370 <APP_Init+0x1c>)
 8001366:	f000 fddb 	bl	8001f20 <TIM_Init>
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40000400 	.word	0x40000400

08001374 <APP_IC_Start>:
 * @brief Starts the input capture timer for frequency and duty cycle calculations.
 * @param  None
 * @retval None
 */
void APP_IC_Start()
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b082      	sub	sp, #8
 8001378:	af02      	add	r7, sp, #8
	TIM_IC_Start( APP_TIM_IC_TIMx,  APP_TIM_IC_CH1, CCS_IP_DIRECT, TIM_IC_RISING_EDGE , TIM_INT_ENABLE);
 800137a:	2301      	movs	r3, #1
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2300      	movs	r3, #0
 8001380:	2201      	movs	r2, #1
 8001382:	2100      	movs	r1, #0
 8001384:	4809      	ldr	r0, [pc, #36]	; (80013ac <APP_IC_Start+0x38>)
 8001386:	f000 febf 	bl	8002108 <TIM_IC_Start>

	TIM_IC_INT_Enable( APP_TIM_IC_TIMx);
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <APP_IC_Start+0x38>)
 800138c:	f000 ffba 	bl	8002304 <TIM_IC_INT_Enable>
	{
		TIM2_SetCallback(APP_IC_Calculate_Freq_Duty);
	}
	else if ( APP_TIM_IC_TIMx == TIM3)
	{
		TIM3_SetCallback(APP_IC_Calculate_Freq_Duty);
 8001390:	4807      	ldr	r0, [pc, #28]	; (80013b0 <APP_IC_Start+0x3c>)
 8001392:	f000 ffdb 	bl	800234c <TIM3_SetCallback>
	}

	TIM_IC_Start(APP_TIM_IC_TIMx,  APP_TIM_IC_CH2, CCS_IP_DIRECT, TIM_IC_FALLING_EDGE ,  TIM_INT_DISABLE);
 8001396:	2300      	movs	r3, #0
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2301      	movs	r3, #1
 800139c:	2201      	movs	r2, #1
 800139e:	2101      	movs	r1, #1
 80013a0:	4802      	ldr	r0, [pc, #8]	; (80013ac <APP_IC_Start+0x38>)
 80013a2:	f000 feb1 	bl	8002108 <TIM_IC_Start>

}
 80013a6:	bf00      	nop
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40000400 	.word	0x40000400
 80013b0:	08000fe1 	.word	0x08000fe1

080013b4 <APP_PWM_Start>:
 * @brief Starts the timer in PWM output mode.
 * @param  None
 * @retval None
 */
void APP_PWM_Start(u32 dutyCycle, u32 frequency)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
 80013bc:	6039      	str	r1, [r7, #0]

	TIM_PWM_Start(APP_TIM_PWM_TIMx, APP_TIM_PWM_CHx, dutyCycle, frequency);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	687a      	ldr	r2, [r7, #4]
 80013c2:	2102      	movs	r1, #2
 80013c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80013c8:	f000 fdf8 	bl	8001fbc <TIM_PWM_Start>
}
 80013cc:	bf00      	nop
 80013ce:	3708      	adds	r7, #8
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <APP_GLCD_Print_Init>:
 * @brief  Prints on GLCD the initial frequency, duty, period, and draws initial PWM signal
 * @param  None
 * @retval None
 */
void APP_GLCD_Print_Init()
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
	 // Retrieve initial frequency, duty cycle, and period values
	oldFreq = APP_IC_GetFreq_KHZ();
 80013d8:	f7ff ff66 	bl	80012a8 <APP_IC_GetFreq_KHZ>
 80013dc:	4602      	mov	r2, r0
 80013de:	4b0c      	ldr	r3, [pc, #48]	; (8001410 <APP_GLCD_Print_Init+0x3c>)
 80013e0:	601a      	str	r2, [r3, #0]
	oldDuty = APP_IC_GetDuty();
 80013e2:	f7ff ffad 	bl	8001340 <APP_IC_GetDuty>
 80013e6:	4603      	mov	r3, r0
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff fb95 	bl	8000b18 <__aeabi_ui2f>
 80013ee:	4602      	mov	r2, r0
 80013f0:	4b08      	ldr	r3, [pc, #32]	; (8001414 <APP_GLCD_Print_Init+0x40>)
 80013f2:	601a      	str	r2, [r3, #0]

	// Print initial frequency, duty cycle, and period values on the GLCD
	APP_GLCD_PrintFreq();
 80013f4:	f7ff fef8 	bl	80011e8 <APP_GLCD_PrintFreq>
	APP_GLCD_PrintDuty();
 80013f8:	f7ff ff16 	bl	8001228 <APP_GLCD_PrintDuty>
	APP_GLCD_PrintPeriod();
 80013fc:	f7ff ff34 	bl	8001268 <APP_GLCD_PrintPeriod>

	// Draw initial PWM signal on the GLCD
	APP_GLCD_DrawPWM(duty);
 8001400:	4b05      	ldr	r3, [pc, #20]	; (8001418 <APP_GLCD_Print_Init+0x44>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	4618      	mov	r0, r3
 8001406:	f7ff fe83 	bl	8001110 <APP_GLCD_DrawPWM>

}
 800140a:	bf00      	nop
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000081c 	.word	0x2000081c
 8001414:	20000820 	.word	0x20000820
 8001418:	20000818 	.word	0x20000818

0800141c <APP_GLCD_Update>:
 * @brief  Updates GLCD display with new frequency, duty, period, and PWM signal if they have changed.
 * @param  None
 * @retval None
 */
void APP_GLCD_Update()
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
	// Check for changes in frequency
	if (APP_IC_GetFreq_KHZ() != oldFreq)
 8001420:	f7ff ff42 	bl	80012a8 <APP_IC_GetFreq_KHZ>
 8001424:	4602      	mov	r2, r0
 8001426:	4b1c      	ldr	r3, [pc, #112]	; (8001498 <APP_GLCD_Update+0x7c>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4619      	mov	r1, r3
 800142c:	4610      	mov	r0, r2
 800142e:	f7ff fd5f 	bl	8000ef0 <__aeabi_fcmpeq>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d108      	bne.n	800144a <APP_GLCD_Update+0x2e>
	{
		// Update and print new frequency on the GLCD
		oldFreq = APP_IC_GetFreq_KHZ();
 8001438:	f7ff ff36 	bl	80012a8 <APP_IC_GetFreq_KHZ>
 800143c:	4602      	mov	r2, r0
 800143e:	4b16      	ldr	r3, [pc, #88]	; (8001498 <APP_GLCD_Update+0x7c>)
 8001440:	601a      	str	r2, [r3, #0]
		APP_GLCD_PrintFreq();
 8001442:	f7ff fed1 	bl	80011e8 <APP_GLCD_PrintFreq>

		// Print new period on GLCD
		APP_GLCD_PrintPeriod();
 8001446:	f7ff ff0f 	bl	8001268 <APP_GLCD_PrintPeriod>
	}

	// Check for changes in duty cycle
	if (APP_IC_GetDuty() != oldDuty)
 800144a:	f7ff ff79 	bl	8001340 <APP_IC_GetDuty>
 800144e:	4603      	mov	r3, r0
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fb61 	bl	8000b18 <__aeabi_ui2f>
 8001456:	4602      	mov	r2, r0
 8001458:	4b10      	ldr	r3, [pc, #64]	; (800149c <APP_GLCD_Update+0x80>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4619      	mov	r1, r3
 800145e:	4610      	mov	r0, r2
 8001460:	f7ff fd46 	bl	8000ef0 <__aeabi_fcmpeq>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d000      	beq.n	800146c <APP_GLCD_Update+0x50>
		// Draw new PWM signal on GLCD
		APP_GLCD_DrawPWM(oldDuty);
	}


}
 800146a:	e013      	b.n	8001494 <APP_GLCD_Update+0x78>
		oldDuty = APP_IC_GetDuty();
 800146c:	f7ff ff68 	bl	8001340 <APP_IC_GetDuty>
 8001470:	4603      	mov	r3, r0
 8001472:	4618      	mov	r0, r3
 8001474:	f7ff fb50 	bl	8000b18 <__aeabi_ui2f>
 8001478:	4602      	mov	r2, r0
 800147a:	4b08      	ldr	r3, [pc, #32]	; (800149c <APP_GLCD_Update+0x80>)
 800147c:	601a      	str	r2, [r3, #0]
		APP_GLCD_PrintDuty();
 800147e:	f7ff fed3 	bl	8001228 <APP_GLCD_PrintDuty>
		APP_GLCD_DrawPWM(oldDuty);
 8001482:	4b06      	ldr	r3, [pc, #24]	; (800149c <APP_GLCD_Update+0x80>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fd8a 	bl	8000fa0 <__aeabi_f2uiz>
 800148c:	4603      	mov	r3, r0
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fe3e 	bl	8001110 <APP_GLCD_DrawPWM>
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}
 8001498:	2000081c 	.word	0x2000081c
 800149c:	20000820 	.word	0x20000820

080014a0 <Delay>:
 * @brief Creates a simple delay using a busy-wait loop.
 * @param t : The delay duration in arbitrary units
 * @retval None
 */
static void Delay(u8 t)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	71fb      	strb	r3, [r7, #7]
	t *= 10;
 80014aa:	79fb      	ldrb	r3, [r7, #7]
 80014ac:	461a      	mov	r2, r3
 80014ae:	0092      	lsls	r2, r2, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	71fb      	strb	r3, [r7, #7]
	while (t)
 80014b6:	e002      	b.n	80014be <Delay+0x1e>
	{
		t--;
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	3b01      	subs	r3, #1
 80014bc:	71fb      	strb	r3, [r7, #7]
	while (t)
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f9      	bne.n	80014b8 <Delay+0x18>
	}
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bc80      	pop	{r7}
 80014cc:	4770      	bx	lr
	...

080014d0 <GLCD_Send>:
 * @brief Sends a single byte to the GLCD display
 * @param data : Byte to be sent to the LCD.
 * @retval None
 */
static void GLCD_Send(u8 data)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	4603      	mov	r3, r0
 80014d8:	71fb      	strb	r3, [r7, #7]
	Delay(T);
 80014da:	2001      	movs	r0, #1
 80014dc:	f7ff ffe0 	bl	80014a0 <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_EN_PIN, GPIO_PIN_LOW); // Set Enable pin to low to initiate data transmission
 80014e0:	2200      	movs	r2, #0
 80014e2:	2108      	movs	r1, #8
 80014e4:	483d      	ldr	r0, [pc, #244]	; (80015dc <GLCD_Send+0x10c>)
 80014e6:	f000 fc2a 	bl	8001d3e <GPIO_SetPinValue>
	Delay(T);
 80014ea:	2001      	movs	r0, #1
 80014ec:	f7ff ffd8 	bl	80014a0 <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_RW_PIN, GPIO_PIN_LOW); // Set Read/Write pin to low for write operation
 80014f0:	2200      	movs	r2, #0
 80014f2:	2105      	movs	r1, #5
 80014f4:	4839      	ldr	r0, [pc, #228]	; (80015dc <GLCD_Send+0x10c>)
 80014f6:	f000 fc22 	bl	8001d3e <GPIO_SetPinValue>
	Delay(T);
 80014fa:	2001      	movs	r0, #1
 80014fc:	f7ff ffd0 	bl	80014a0 <Delay>
	GPIO_SetPortValue(GLCD_DATA_PORT, GPIO_PORT_LOW); // Clear the Data port to prepare for new data
 8001500:	2100      	movs	r1, #0
 8001502:	4837      	ldr	r0, [pc, #220]	; (80015e0 <GLCD_Send+0x110>)
 8001504:	f000 fc42 	bl	8001d8c <GPIO_SetPortValue>
	Delay(T);
 8001508:	2001      	movs	r0, #1
 800150a:	f7ff ffc9 	bl	80014a0 <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_EN_PIN, GPIO_PIN_HIGH); // Pulse the Enable pin to send the data
 800150e:	2201      	movs	r2, #1
 8001510:	2108      	movs	r1, #8
 8001512:	4832      	ldr	r0, [pc, #200]	; (80015dc <GLCD_Send+0x10c>)
 8001514:	f000 fc13 	bl	8001d3e <GPIO_SetPinValue>
	Delay(T);
 8001518:	2001      	movs	r0, #1
 800151a:	f7ff ffc1 	bl	80014a0 <Delay>

	// Set individual data bits on the Data port based on the provided data byte
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D0_PIN,GET_BIT(data,0));
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	f003 0301 	and.w	r3, r3, #1
 8001524:	b2db      	uxtb	r3, r3
 8001526:	461a      	mov	r2, r3
 8001528:	2105      	movs	r1, #5
 800152a:	482d      	ldr	r0, [pc, #180]	; (80015e0 <GLCD_Send+0x110>)
 800152c:	f000 fc07 	bl	8001d3e <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D1_PIN,GET_BIT(data,1));
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	b2db      	uxtb	r3, r3
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	b2db      	uxtb	r3, r3
 800153c:	461a      	mov	r2, r3
 800153e:	2104      	movs	r1, #4
 8001540:	4827      	ldr	r0, [pc, #156]	; (80015e0 <GLCD_Send+0x110>)
 8001542:	f000 fbfc 	bl	8001d3e <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D2_PIN,GET_BIT(data,2));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	089b      	lsrs	r3, r3, #2
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	461a      	mov	r2, r3
 8001554:	210a      	movs	r1, #10
 8001556:	4822      	ldr	r0, [pc, #136]	; (80015e0 <GLCD_Send+0x110>)
 8001558:	f000 fbf1 	bl	8001d3e <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D3_PIN,GET_BIT(data,3));
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	08db      	lsrs	r3, r3, #3
 8001560:	b2db      	uxtb	r3, r3
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	b2db      	uxtb	r3, r3
 8001568:	461a      	mov	r2, r3
 800156a:	210b      	movs	r1, #11
 800156c:	481c      	ldr	r0, [pc, #112]	; (80015e0 <GLCD_Send+0x110>)
 800156e:	f000 fbe6 	bl	8001d3e <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D4_PIN,GET_BIT(data,4));
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	091b      	lsrs	r3, r3, #4
 8001576:	b2db      	uxtb	r3, r3
 8001578:	f003 0301 	and.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	461a      	mov	r2, r3
 8001580:	210c      	movs	r1, #12
 8001582:	4817      	ldr	r0, [pc, #92]	; (80015e0 <GLCD_Send+0x110>)
 8001584:	f000 fbdb 	bl	8001d3e <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D5_PIN,GET_BIT(data,5));
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	095b      	lsrs	r3, r3, #5
 800158c:	b2db      	uxtb	r3, r3
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	461a      	mov	r2, r3
 8001596:	210d      	movs	r1, #13
 8001598:	4811      	ldr	r0, [pc, #68]	; (80015e0 <GLCD_Send+0x110>)
 800159a:	f000 fbd0 	bl	8001d3e <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D6_PIN,GET_BIT(data,6));
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	099b      	lsrs	r3, r3, #6
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	f003 0301 	and.w	r3, r3, #1
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	461a      	mov	r2, r3
 80015ac:	210e      	movs	r1, #14
 80015ae:	480c      	ldr	r0, [pc, #48]	; (80015e0 <GLCD_Send+0x110>)
 80015b0:	f000 fbc5 	bl	8001d3e <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D7_PIN,GET_BIT(data,7));
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	09db      	lsrs	r3, r3, #7
 80015b8:	b2db      	uxtb	r3, r3
 80015ba:	461a      	mov	r2, r3
 80015bc:	210f      	movs	r1, #15
 80015be:	4808      	ldr	r0, [pc, #32]	; (80015e0 <GLCD_Send+0x110>)
 80015c0:	f000 fbbd 	bl	8001d3e <GPIO_SetPinValue>

	Delay(T);
 80015c4:	2001      	movs	r0, #1
 80015c6:	f7ff ff6b 	bl	80014a0 <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_EN_PIN, GPIO_PIN_LOW); // Clear the Enable pin
 80015ca:	2200      	movs	r2, #0
 80015cc:	2108      	movs	r1, #8
 80015ce:	4803      	ldr	r0, [pc, #12]	; (80015dc <GLCD_Send+0x10c>)
 80015d0:	f000 fbb5 	bl	8001d3e <GPIO_SetPinValue>
}
 80015d4:	bf00      	nop
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40010c00 	.word	0x40010c00
 80015e0:	40010800 	.word	0x40010800

080015e4 <GLCD_SendCommand>:
 * @brief Sends a command byte to the GLCD display
 * @param data : Command byte to be sent to the LCD.
 * @retval None
 */
static void GLCD_SendCommand(u8 command)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b082      	sub	sp, #8
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
	// Set Data/Instruction  pin to low for command mode
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_PIN_LOW);
 80015ee:	2200      	movs	r2, #0
 80015f0:	2109      	movs	r1, #9
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <GLCD_SendCommand+0x4c>)
 80015f4:	f000 fba3 	bl	8001d3e <GPIO_SetPinValue>
	Delay(T);
 80015f8:	2001      	movs	r0, #1
 80015fa:	f7ff ff51 	bl	80014a0 <Delay>

	// Select both LCD controller chips (CS1 and CS2)
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_HIGH);
 80015fe:	2201      	movs	r2, #1
 8001600:	2107      	movs	r1, #7
 8001602:	480b      	ldr	r0, [pc, #44]	; (8001630 <GLCD_SendCommand+0x4c>)
 8001604:	f000 fb9b 	bl	8001d3e <GPIO_SetPinValue>
	Delay(T);
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff ff49 	bl	80014a0 <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_HIGH);
 800160e:	2201      	movs	r2, #1
 8001610:	2106      	movs	r1, #6
 8001612:	4807      	ldr	r0, [pc, #28]	; (8001630 <GLCD_SendCommand+0x4c>)
 8001614:	f000 fb93 	bl	8001d3e <GPIO_SetPinValue>
	Delay(T);
 8001618:	2001      	movs	r0, #1
 800161a:	f7ff ff41 	bl	80014a0 <Delay>

	// Send command to GLCD
	GLCD_Send(command);
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff55 	bl	80014d0 <GLCD_Send>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	40010c00 	.word	0x40010c00

08001634 <GLCD_SendData>:
 * @param data : Data byte to be sent to the LCD.
 * @param x : X coordinate 0-127)
 * @retval None
 */
void GLCD_SendData(u8 data, u8 x)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	460a      	mov	r2, r1
 800163e:	71fb      	strb	r3, [r7, #7]
 8001640:	4613      	mov	r3, r2
 8001642:	71bb      	strb	r3, [r7, #6]
	// Set Data/Instruction  pin to high for data mode
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_PIN_HIGH);
 8001644:	2201      	movs	r2, #1
 8001646:	2109      	movs	r1, #9
 8001648:	481a      	ldr	r0, [pc, #104]	; (80016b4 <GLCD_SendData+0x80>)
 800164a:	f000 fb78 	bl	8001d3e <GPIO_SetPinValue>
	Delay(T);
 800164e:	2001      	movs	r0, #1
 8001650:	f7ff ff26 	bl	80014a0 <Delay>

	// Check if the X coordinate is within the left half of the screen
	if (x < GLCD_SCREEN_HALF_WIDTH)
 8001654:	79bb      	ldrb	r3, [r7, #6]
 8001656:	2b3f      	cmp	r3, #63	; 0x3f
 8001658:	d814      	bhi.n	8001684 <GLCD_SendData+0x50>
	{
		// Select left section controller chip (CS1) and deselect right section (CS2)
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_HIGH);
 800165a:	2201      	movs	r2, #1
 800165c:	2107      	movs	r1, #7
 800165e:	4815      	ldr	r0, [pc, #84]	; (80016b4 <GLCD_SendData+0x80>)
 8001660:	f000 fb6d 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 8001664:	2001      	movs	r0, #1
 8001666:	f7ff ff1b 	bl	80014a0 <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_LOW);
 800166a:	2200      	movs	r2, #0
 800166c:	2106      	movs	r1, #6
 800166e:	4811      	ldr	r0, [pc, #68]	; (80016b4 <GLCD_SendData+0x80>)
 8001670:	f000 fb65 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 8001674:	2001      	movs	r0, #1
 8001676:	f7ff ff13 	bl	80014a0 <Delay>
		// Send data to GLCD
		GLCD_Send(data);
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4618      	mov	r0, r3
 800167e:	f7ff ff27 	bl	80014d0 <GLCD_Send>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_HIGH);
		Delay(T);
		// Send data to GLCD
		GLCD_Send(data);
	}
}
 8001682:	e013      	b.n	80016ac <GLCD_SendData+0x78>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_LOW);
 8001684:	2200      	movs	r2, #0
 8001686:	2107      	movs	r1, #7
 8001688:	480a      	ldr	r0, [pc, #40]	; (80016b4 <GLCD_SendData+0x80>)
 800168a:	f000 fb58 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 800168e:	2001      	movs	r0, #1
 8001690:	f7ff ff06 	bl	80014a0 <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_HIGH);
 8001694:	2201      	movs	r2, #1
 8001696:	2106      	movs	r1, #6
 8001698:	4806      	ldr	r0, [pc, #24]	; (80016b4 <GLCD_SendData+0x80>)
 800169a:	f000 fb50 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 800169e:	2001      	movs	r0, #1
 80016a0:	f7ff fefe 	bl	80014a0 <Delay>
		GLCD_Send(data);
 80016a4:	79fb      	ldrb	r3, [r7, #7]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff ff12 	bl	80014d0 <GLCD_Send>
}
 80016ac:	bf00      	nop
 80016ae:	3708      	adds	r7, #8
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	40010c00 	.word	0x40010c00

080016b8 <GLCD_GoToLine>:
 * @brief Sets the cursor position to a specific line
 * @param  y : line number on GLCD (GLCD_LINE_0 to GLCD_LINE_7)
 * @retval None
 */
static void GLCD_GoToLine(GLCD_LineNum_t y)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b082      	sub	sp, #8
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4603      	mov	r3, r0
 80016c0:	71fb      	strb	r3, [r7, #7]
	Delay(T);
 80016c2:	2001      	movs	r0, #1
 80016c4:	f7ff feec 	bl	80014a0 <Delay>
	y = (y | 0xB8) & 0xBF; // Command from data sheet
 80016c8:	79fb      	ldrb	r3, [r7, #7]
 80016ca:	f063 0347 	orn	r3, r3, #71	; 0x47
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016d4:	71fb      	strb	r3, [r7, #7]
	GLCD_SendCommand(y);
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	4618      	mov	r0, r3
 80016da:	f7ff ff83 	bl	80015e4 <GLCD_SendCommand>
}
 80016de:	bf00      	nop
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
	...

080016e8 <GLCD_GoToColumn>:
 * @brief  Sets the cursor position to a specific column / X coordinate
 * @param  x : x coordinate (0-127)
 * @retval None
 */
static void GLCD_GoToColumn(u8 x)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	4603      	mov	r3, r0
 80016f0:	71fb      	strb	r3, [r7, #7]
	Delay(T);
 80016f2:	2001      	movs	r0, #1
 80016f4:	f7ff fed4 	bl	80014a0 <Delay>
	// Check if the X coordinate is within the left half of the screen
	if (x < GLCD_SCREEN_HALF_WIDTH)
 80016f8:	79fb      	ldrb	r3, [r7, #7]
 80016fa:	2b3f      	cmp	r3, #63	; 0x3f
 80016fc:	d823      	bhi.n	8001746 <GLCD_GoToColumn+0x5e>
	{
		x = (x | 0x40) & 0x7F; // Command from data sheet
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800170a:	71fb      	strb	r3, [r7, #7]

		//Set Data/Instruction  pin to low for command mode
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_PIN_LOW);
 800170c:	2200      	movs	r2, #0
 800170e:	2109      	movs	r1, #9
 8001710:	4822      	ldr	r0, [pc, #136]	; (800179c <GLCD_GoToColumn+0xb4>)
 8001712:	f000 fb14 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 8001716:	2001      	movs	r0, #1
 8001718:	f7ff fec2 	bl	80014a0 <Delay>

		// Select left section controller chip (CS1) and deselect right section (CS2)
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_HIGH);
 800171c:	2201      	movs	r2, #1
 800171e:	2107      	movs	r1, #7
 8001720:	481e      	ldr	r0, [pc, #120]	; (800179c <GLCD_GoToColumn+0xb4>)
 8001722:	f000 fb0c 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff feba 	bl	80014a0 <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_LOW);
 800172c:	2200      	movs	r2, #0
 800172e:	2106      	movs	r1, #6
 8001730:	481a      	ldr	r0, [pc, #104]	; (800179c <GLCD_GoToColumn+0xb4>)
 8001732:	f000 fb04 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 8001736:	2001      	movs	r0, #1
 8001738:	f7ff feb2 	bl	80014a0 <Delay>

		// Send command to GLCD
		GLCD_Send(x);
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff fec6 	bl	80014d0 <GLCD_Send>
		Delay(T);

		// Send command to GLCD
		GLCD_Send(x);
	}
}
 8001744:	e025      	b.n	8001792 <GLCD_GoToColumn+0xaa>
		x -= GLCD_SCREEN_HALF_WIDTH; // Adjust x for right section
 8001746:	79fb      	ldrb	r3, [r7, #7]
 8001748:	3b40      	subs	r3, #64	; 0x40
 800174a:	71fb      	strb	r3, [r7, #7]
		x = (x | 0x40) & 0x7F;  // command from data sheet
 800174c:	79fb      	ldrb	r3, [r7, #7]
 800174e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001758:	71fb      	strb	r3, [r7, #7]
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_PIN_LOW);
 800175a:	2200      	movs	r2, #0
 800175c:	2109      	movs	r1, #9
 800175e:	480f      	ldr	r0, [pc, #60]	; (800179c <GLCD_GoToColumn+0xb4>)
 8001760:	f000 faed 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 8001764:	2001      	movs	r0, #1
 8001766:	f7ff fe9b 	bl	80014a0 <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_LOW);
 800176a:	2200      	movs	r2, #0
 800176c:	2107      	movs	r1, #7
 800176e:	480b      	ldr	r0, [pc, #44]	; (800179c <GLCD_GoToColumn+0xb4>)
 8001770:	f000 fae5 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 8001774:	2001      	movs	r0, #1
 8001776:	f7ff fe93 	bl	80014a0 <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_HIGH);
 800177a:	2201      	movs	r2, #1
 800177c:	2106      	movs	r1, #6
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <GLCD_GoToColumn+0xb4>)
 8001780:	f000 fadd 	bl	8001d3e <GPIO_SetPinValue>
		Delay(T);
 8001784:	2001      	movs	r0, #1
 8001786:	f7ff fe8b 	bl	80014a0 <Delay>
		GLCD_Send(x);
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff fe9f 	bl	80014d0 <GLCD_Send>
}
 8001792:	bf00      	nop
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	40010c00 	.word	0x40010c00

080017a0 <GLCD_GoTo_Col_Line>:
 * @param  x : x coordinate (0-127)
 * @param  y : line number on GLCD (GLCD_LINE_0 to GLCD_LINE_7)
 * @retval None
 */
static void GLCD_GoTo_Col_Line(u8 x, GLCD_LineNum_t line)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	460a      	mov	r2, r1
 80017aa:	71fb      	strb	r3, [r7, #7]
 80017ac:	4613      	mov	r3, r2
 80017ae:	71bb      	strb	r3, [r7, #6]
	Delay(T);
 80017b0:	2001      	movs	r0, #1
 80017b2:	f7ff fe75 	bl	80014a0 <Delay>
	GLCD_GoToLine(line);
 80017b6:	79bb      	ldrb	r3, [r7, #6]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff7d 	bl	80016b8 <GLCD_GoToLine>
	GLCD_GoToColumn(x);
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff ff91 	bl	80016e8 <GLCD_GoToColumn>
}
 80017c6:	bf00      	nop
 80017c8:	3708      	adds	r7, #8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <GLCD_reverseString>:
 * @param  Pointer to string
 * @param  length : length of the string
 * @retval None
 */
static void GLCD_reverseString(char* str, int length)
{
 80017ce:	b480      	push	{r7}
 80017d0:	b087      	sub	sp, #28
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
 80017d6:	6039      	str	r1, [r7, #0]
	 // Initialize start and end indices for swapping characters
	    int start = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	617b      	str	r3, [r7, #20]
	    int end = length - 1;
 80017dc:	683b      	ldr	r3, [r7, #0]
 80017de:	3b01      	subs	r3, #1
 80017e0:	613b      	str	r3, [r7, #16]

	    // Iterate while the start index is less than the end index
	    while (start < end)
 80017e2:	e017      	b.n	8001814 <GLCD_reverseString+0x46>
	    {
	    	// Swap the characters at start and end indices
	        char temp = str[start];
 80017e4:	697b      	ldr	r3, [r7, #20]
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	73fb      	strb	r3, [r7, #15]
	        str[start] = str[end];
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	441a      	add	r2, r3
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	440b      	add	r3, r1
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	701a      	strb	r2, [r3, #0]
	        str[end] = temp;
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	4413      	add	r3, r2
 8001804:	7bfa      	ldrb	r2, [r7, #15]
 8001806:	701a      	strb	r2, [r3, #0]

	        // Move start and end indices towards the middle for the next iteration
	        start++;
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	3301      	adds	r3, #1
 800180c:	617b      	str	r3, [r7, #20]
	        end--;
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	3b01      	subs	r3, #1
 8001812:	613b      	str	r3, [r7, #16]
	    while (start < end)
 8001814:	697a      	ldr	r2, [r7, #20]
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	429a      	cmp	r2, r3
 800181a:	dbe3      	blt.n	80017e4 <GLCD_reverseString+0x16>
	    }
}
 800181c:	bf00      	nop
 800181e:	371c      	adds	r7, #28
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr
	...

08001828 <GLCD_Init>:
 * @brief  Initializes GLCD display
 * @param  None
 * @retval None
 */
void GLCD_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
	/* Enable GPIO Clock*/
	RCC_GPIOA_CLK_EN();
 800182c:	4b30      	ldr	r3, [pc, #192]	; (80018f0 <GLCD_Init+0xc8>)
 800182e:	699b      	ldr	r3, [r3, #24]
 8001830:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <GLCD_Init+0xc8>)
 8001832:	f043 0304 	orr.w	r3, r3, #4
 8001836:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8001838:	4b2d      	ldr	r3, [pc, #180]	; (80018f0 <GLCD_Init+0xc8>)
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	4a2c      	ldr	r2, [pc, #176]	; (80018f0 <GLCD_Init+0xc8>)
 800183e:	f043 0308 	orr.w	r3, r3, #8
 8001842:	6193      	str	r3, [r2, #24]

	/* Set GLCD ports direction and speed */
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001844:	2202      	movs	r2, #2
 8001846:	2107      	movs	r1, #7
 8001848:	482a      	ldr	r0, [pc, #168]	; (80018f4 <GLCD_Init+0xcc>)
 800184a:	f000 fa3b 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_OUTPUT_PP_2MHZ);
 800184e:	2202      	movs	r2, #2
 8001850:	2106      	movs	r1, #6
 8001852:	4828      	ldr	r0, [pc, #160]	; (80018f4 <GLCD_Init+0xcc>)
 8001854:	f000 fa36 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_EN_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001858:	2202      	movs	r2, #2
 800185a:	2108      	movs	r1, #8
 800185c:	4825      	ldr	r0, [pc, #148]	; (80018f4 <GLCD_Init+0xcc>)
 800185e:	f000 fa31 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001862:	2202      	movs	r2, #2
 8001864:	2109      	movs	r1, #9
 8001866:	4823      	ldr	r0, [pc, #140]	; (80018f4 <GLCD_Init+0xcc>)
 8001868:	f000 fa2c 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_RW_PIN, GPIO_OUTPUT_PP_2MHZ);
 800186c:	2202      	movs	r2, #2
 800186e:	2105      	movs	r1, #5
 8001870:	4820      	ldr	r0, [pc, #128]	; (80018f4 <GLCD_Init+0xcc>)
 8001872:	f000 fa27 	bl	8001cc4 <GPIO_SetPinDirSpeed>

	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D0_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001876:	2202      	movs	r2, #2
 8001878:	2105      	movs	r1, #5
 800187a:	481f      	ldr	r0, [pc, #124]	; (80018f8 <GLCD_Init+0xd0>)
 800187c:	f000 fa22 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D1_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001880:	2202      	movs	r2, #2
 8001882:	2104      	movs	r1, #4
 8001884:	481c      	ldr	r0, [pc, #112]	; (80018f8 <GLCD_Init+0xd0>)
 8001886:	f000 fa1d 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D2_PIN, GPIO_OUTPUT_PP_2MHZ);
 800188a:	2202      	movs	r2, #2
 800188c:	210a      	movs	r1, #10
 800188e:	481a      	ldr	r0, [pc, #104]	; (80018f8 <GLCD_Init+0xd0>)
 8001890:	f000 fa18 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D3_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001894:	2202      	movs	r2, #2
 8001896:	210b      	movs	r1, #11
 8001898:	4817      	ldr	r0, [pc, #92]	; (80018f8 <GLCD_Init+0xd0>)
 800189a:	f000 fa13 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D4_PIN, GPIO_OUTPUT_PP_2MHZ);
 800189e:	2202      	movs	r2, #2
 80018a0:	210c      	movs	r1, #12
 80018a2:	4815      	ldr	r0, [pc, #84]	; (80018f8 <GLCD_Init+0xd0>)
 80018a4:	f000 fa0e 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D5_PIN, GPIO_OUTPUT_PP_2MHZ);
 80018a8:	2202      	movs	r2, #2
 80018aa:	210d      	movs	r1, #13
 80018ac:	4812      	ldr	r0, [pc, #72]	; (80018f8 <GLCD_Init+0xd0>)
 80018ae:	f000 fa09 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D6_PIN, GPIO_OUTPUT_PP_2MHZ);
 80018b2:	2202      	movs	r2, #2
 80018b4:	210e      	movs	r1, #14
 80018b6:	4810      	ldr	r0, [pc, #64]	; (80018f8 <GLCD_Init+0xd0>)
 80018b8:	f000 fa04 	bl	8001cc4 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D7_PIN, GPIO_OUTPUT_PP_2MHZ);
 80018bc:	2202      	movs	r2, #2
 80018be:	210f      	movs	r1, #15
 80018c0:	480d      	ldr	r0, [pc, #52]	; (80018f8 <GLCD_Init+0xd0>)
 80018c2:	f000 f9ff 	bl	8001cc4 <GPIO_SetPinDirSpeed>

	/* Send commands to initialize GLCD */
	Delay(T);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f7ff fdea 	bl	80014a0 <Delay>
		GLCD_SendCommand(GLCD_CMD_OFF);
 80018cc:	203e      	movs	r0, #62	; 0x3e
 80018ce:	f7ff fe89 	bl	80015e4 <GLCD_SendCommand>
		GLCD_SendCommand(GLCD_CMD_RESET_Y);
 80018d2:	2040      	movs	r0, #64	; 0x40
 80018d4:	f7ff fe86 	bl	80015e4 <GLCD_SendCommand>
		GLCD_SendCommand(GLCD_CMD_RESET_X);
 80018d8:	20b8      	movs	r0, #184	; 0xb8
 80018da:	f7ff fe83 	bl	80015e4 <GLCD_SendCommand>
		GLCD_SendCommand(GLCD_CMD_RESET_LINES);
 80018de:	20c0      	movs	r0, #192	; 0xc0
 80018e0:	f7ff fe80 	bl	80015e4 <GLCD_SendCommand>
		GLCD_SendCommand(GLCD_CMD_ON);
 80018e4:	203f      	movs	r0, #63	; 0x3f
 80018e6:	f7ff fe7d 	bl	80015e4 <GLCD_SendCommand>

}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40010c00 	.word	0x40010c00
 80018f8:	40010800 	.word	0x40010800

080018fc <GLCD_PrintChar>:
 * @param  y : line number on GLCD (GLCD_LINE_0 to GLCD_LINE_7)
 * @retval None
 */

void GLCD_PrintChar(u8 data, u8 x, GLCD_LineNum_t y)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	4603      	mov	r3, r0
 8001904:	71fb      	strb	r3, [r7, #7]
 8001906:	460b      	mov	r3, r1
 8001908:	71bb      	strb	r3, [r7, #6]
 800190a:	4613      	mov	r3, r2
 800190c:	717b      	strb	r3, [r7, #5]
	int i,j;
	i=0;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
	// Calculate the end column index for the character (considering its width)
	j = i + GLCD_FONT_CHAR_WIDTH;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	3307      	adds	r3, #7
 8001916:	60bb      	str	r3, [r7, #8]
	// Check if the X coordinate would exceed the screen width after printing the character
	if (x >= (GLCD_SCREEN_WIDTH - GLCD_FONT_CHAR_WIDTH))
 8001918:	79bb      	ldrb	r3, [r7, #6]
 800191a:	2b78      	cmp	r3, #120	; 0x78
 800191c:	d904      	bls.n	8001928 <GLCD_PrintChar+0x2c>
	{
		++y; // Move to the next line
 800191e:	797b      	ldrb	r3, [r7, #5]
 8001920:	3301      	adds	r3, #1
 8001922:	717b      	strb	r3, [r7, #5]
		x=0; // Start printing at the beginning of the next line
 8001924:	2300      	movs	r3, #0
 8001926:	71bb      	strb	r3, [r7, #6]
	}
	// Loop through each pixel column (width) of the character
	for (i=0; i <= j; i++)
 8001928:	2300      	movs	r3, #0
 800192a:	60fb      	str	r3, [r7, #12]
 800192c:	e017      	b.n	800195e <GLCD_PrintChar+0x62>
	{
		GLCD_GoTo_Col_Line(x, y); // Set the cursor
 800192e:	797a      	ldrb	r2, [r7, #5]
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	4611      	mov	r1, r2
 8001934:	4618      	mov	r0, r3
 8001936:	f7ff ff33 	bl	80017a0 <GLCD_GoTo_Col_Line>
		GLCD_SendData(Font[data][i], x); // Get the pixel data for the current column from the font array based on the character and column index
 800193a:	79fb      	ldrb	r3, [r7, #7]
 800193c:	4a0c      	ldr	r2, [pc, #48]	; (8001970 <GLCD_PrintChar+0x74>)
 800193e:	00db      	lsls	r3, r3, #3
 8001940:	441a      	add	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4413      	add	r3, r2
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	79ba      	ldrb	r2, [r7, #6]
 800194a:	4611      	mov	r1, r2
 800194c:	4618      	mov	r0, r3
 800194e:	f7ff fe71 	bl	8001634 <GLCD_SendData>
		++x;					  // Move to the next pixel column for the next iteration
 8001952:	79bb      	ldrb	r3, [r7, #6]
 8001954:	3301      	adds	r3, #1
 8001956:	71bb      	strb	r3, [r7, #6]
	for (i=0; i <= j; i++)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	3301      	adds	r3, #1
 800195c:	60fb      	str	r3, [r7, #12]
 800195e:	68fa      	ldr	r2, [r7, #12]
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	429a      	cmp	r2, r3
 8001964:	dde3      	ble.n	800192e <GLCD_PrintChar+0x32>
	}

}
 8001966:	bf00      	nop
 8001968:	3710      	adds	r7, #16
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	20000000 	.word	0x20000000

08001974 <GLCD_PrintString>:
 * @param  x : X coordinate
 * @param  y : line number on GLCD (GLCD_LINE_0 to GLCD_LINE_7)
 * @retval None
 */
void GLCD_PrintString(string str, u8 x, GLCD_LineNum_t y)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
 800197c:	460b      	mov	r3, r1
 800197e:	70fb      	strb	r3, [r7, #3]
 8001980:	4613      	mov	r3, r2
 8001982:	70bb      	strb	r3, [r7, #2]
	while (*str != 0)
 8001984:	e015      	b.n	80019b2 <GLCD_PrintString+0x3e>
	{
		// Check if the X coordinate would exceed the screen width after printing the character
		if (x + GLCD_FONT_CHAR_WIDTH >=GLCD_SCREEN_WIDTH)
 8001986:	78fb      	ldrb	r3, [r7, #3]
 8001988:	3307      	adds	r3, #7
 800198a:	2b7f      	cmp	r3, #127	; 0x7f
 800198c:	d904      	bls.n	8001998 <GLCD_PrintString+0x24>
		{
			++y; // Move to the next line
 800198e:	78bb      	ldrb	r3, [r7, #2]
 8001990:	3301      	adds	r3, #1
 8001992:	70bb      	strb	r3, [r7, #2]
			x=0; // Start printing at the beginning of the next line
 8001994:	2300      	movs	r3, #0
 8001996:	70fb      	strb	r3, [r7, #3]
		}

		// Print the current character at the current position
		GLCD_PrintChar(*str, x, y);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	78ba      	ldrb	r2, [r7, #2]
 800199e:	78f9      	ldrb	r1, [r7, #3]
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ffab 	bl	80018fc <GLCD_PrintChar>

		// Move to the next character in the string and the next column for printing
		x+=GLCD_FONT_CHAR_WIDTH;
 80019a6:	78fb      	ldrb	r3, [r7, #3]
 80019a8:	3307      	adds	r3, #7
 80019aa:	70fb      	strb	r3, [r7, #3]
		str++;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	3301      	adds	r3, #1
 80019b0:	607b      	str	r3, [r7, #4]
	while (*str != 0)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1e5      	bne.n	8001986 <GLCD_PrintString+0x12>
	}
}
 80019ba:	bf00      	nop
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}
	...

080019c4 <GLCD_PrintNum>:
 * @param  x : X coordinate
 * @param  y : line number on GLCD (GLCD_LINE_0 to GLCD_LINE_7)
 * @retval None
 */
void GLCD_PrintNum(u32 num , u8 x , u8 y)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	70fb      	strb	r3, [r7, #3]
 80019d0:	4613      	mov	r3, r2
 80019d2:	70bb      	strb	r3, [r7, #2]
		// Temporary array to store the converted string (maximum 10 digits)
		u8 str [10];

		//Handle special case: zero
		if (num == 0)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d10b      	bne.n	80019f2 <GLCD_PrintNum+0x2e>
		{
			str[0]= '0';
 80019da:	2330      	movs	r3, #48	; 0x30
 80019dc:	733b      	strb	r3, [r7, #12]
			str[1]= '\0';
 80019de:	2300      	movs	r3, #0
 80019e0:	737b      	strb	r3, [r7, #13]
			GLCD_PrintString(str, x, y);
 80019e2:	78ba      	ldrb	r2, [r7, #2]
 80019e4:	78f9      	ldrb	r1, [r7, #3]
 80019e6:	f107 030c 	add.w	r3, r7, #12
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff ffc2 	bl	8001974 <GLCD_PrintString>
			return;
 80019f0:	e048      	b.n	8001a84 <GLCD_PrintNum+0xc0>
		}

	    int i, rem, len, n;
	    n = num;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	61fb      	str	r3, [r7, #28]
	    len=0;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]

	    // Calculate the number of digits
	    while (n != 0)
 80019fa:	e00a      	b.n	8001a12 <GLCD_PrintNum+0x4e>
	    {
	        len++;
 80019fc:	6a3b      	ldr	r3, [r7, #32]
 80019fe:	3301      	adds	r3, #1
 8001a00:	623b      	str	r3, [r7, #32]
	        n /= 10;
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	4a21      	ldr	r2, [pc, #132]	; (8001a8c <GLCD_PrintNum+0xc8>)
 8001a06:	fb82 1203 	smull	r1, r2, r2, r3
 8001a0a:	1092      	asrs	r2, r2, #2
 8001a0c:	17db      	asrs	r3, r3, #31
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	61fb      	str	r3, [r7, #28]
	    while (n != 0)
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d1f1      	bne.n	80019fc <GLCD_PrintNum+0x38>
	    }

	    // Convert digits from least significant to most significant (reverse order)
	    for (i = 0; i < len; i++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a1c:	e020      	b.n	8001a60 <GLCD_PrintNum+0x9c>
	    {
	        rem = num % 10;
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <GLCD_PrintNum+0xcc>)
 8001a22:	fba3 2301 	umull	r2, r3, r3, r1
 8001a26:	08da      	lsrs	r2, r3, #3
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	1aca      	subs	r2, r1, r3
 8001a32:	61ba      	str	r2, [r7, #24]
	        num /= 10;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <GLCD_PrintNum+0xcc>)
 8001a38:	fba2 2303 	umull	r2, r3, r2, r3
 8001a3c:	08db      	lsrs	r3, r3, #3
 8001a3e:	607b      	str	r3, [r7, #4]
	        str[len - (i + 1)] = rem + '0'; // // Convert digit to ASCII character
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	b2da      	uxtb	r2, r3
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	3301      	adds	r3, #1
 8001a48:	6a39      	ldr	r1, [r7, #32]
 8001a4a:	1acb      	subs	r3, r1, r3
 8001a4c:	3230      	adds	r2, #48	; 0x30
 8001a4e:	b2d2      	uxtb	r2, r2
 8001a50:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a54:	440b      	add	r3, r1
 8001a56:	f803 2c1c 	strb.w	r2, [r3, #-28]
	    for (i = 0; i < len; i++)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
 8001a60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a62:	6a3b      	ldr	r3, [r7, #32]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	dbda      	blt.n	8001a1e <GLCD_PrintNum+0x5a>
	    }

	    // Terminate the string
	    str[len] = '\0';
 8001a68:	f107 020c 	add.w	r2, r7, #12
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	4413      	add	r3, r2
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

	    // Print converted string to GLCD
	    GLCD_PrintString(str, x, y);
 8001a74:	78ba      	ldrb	r2, [r7, #2]
 8001a76:	78f9      	ldrb	r1, [r7, #3]
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff79 	bl	8001974 <GLCD_PrintString>
	    return;
 8001a82:	bf00      	nop

}
 8001a84:	3728      	adds	r7, #40	; 0x28
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	66666667 	.word	0x66666667
 8001a90:	cccccccd 	.word	0xcccccccd

08001a94 <GLCD_PrintFloat>:
 * @param  x : X coordinate
 * @param  y : line number on GLCD (GLCD_LINE_0 to GLCD_LINE_7)
 * @retval None
 */
void GLCD_PrintFloat(f32 num , u8 x , u8 y)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b094      	sub	sp, #80	; 0x50
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	70fb      	strb	r3, [r7, #3]
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	70bb      	strb	r3, [r7, #2]
	  // Temporary array to store the converted string
		char str[50];

	    int integerPart = (int)num;
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f7ff fa55 	bl	8000f54 <__aeabi_f2iz>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	64fb      	str	r3, [r7, #76]	; 0x4c
	    float fractionalPart = num - integerPart;
 8001aae:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001ab0:	f7ff f836 	bl	8000b20 <__aeabi_i2f>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f7fe ff7b 	bl	80009b4 <__aeabi_fsub>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	64bb      	str	r3, [r7, #72]	; 0x48

	    int i = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	647b      	str	r3, [r7, #68]	; 0x44

	    // Handle negative numbers
	    if (integerPart < 0) {
 8001ac6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	da0f      	bge.n	8001aec <GLCD_PrintFloat+0x58>
	        str[i++] = '-';
 8001acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ace:	1c5a      	adds	r2, r3, #1
 8001ad0:	647a      	str	r2, [r7, #68]	; 0x44
 8001ad2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001ad6:	4413      	add	r3, r2
 8001ad8:	222d      	movs	r2, #45	; 0x2d
 8001ada:	f803 2c48 	strb.w	r2, [r3, #-72]
	        integerPart = -integerPart;
 8001ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae0:	425b      	negs	r3, r3
 8001ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
	        fractionalPart = -fractionalPart;
 8001ae4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ae6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
	    }

	    // Convert integer part to string
	    do {
	        str[i++] = '0' + integerPart % 10;
 8001aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aee:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <GLCD_PrintFloat+0x130>)
 8001af0:	fb83 1302 	smull	r1, r3, r3, r2
 8001af4:	1099      	asrs	r1, r3, #2
 8001af6:	17d3      	asrs	r3, r2, #31
 8001af8:	1ac9      	subs	r1, r1, r3
 8001afa:	460b      	mov	r3, r1
 8001afc:	009b      	lsls	r3, r3, #2
 8001afe:	440b      	add	r3, r1
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	1ad1      	subs	r1, r2, r3
 8001b04:	b2ca      	uxtb	r2, r1
 8001b06:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b08:	1c59      	adds	r1, r3, #1
 8001b0a:	6479      	str	r1, [r7, #68]	; 0x44
 8001b0c:	3230      	adds	r2, #48	; 0x30
 8001b0e:	b2d2      	uxtb	r2, r2
 8001b10:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b14:	440b      	add	r3, r1
 8001b16:	f803 2c48 	strb.w	r2, [r3, #-72]
	        integerPart /= 10;
 8001b1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b1c:	4a29      	ldr	r2, [pc, #164]	; (8001bc4 <GLCD_PrintFloat+0x130>)
 8001b1e:	fb82 1203 	smull	r1, r2, r2, r3
 8001b22:	1092      	asrs	r2, r2, #2
 8001b24:	17db      	asrs	r3, r3, #31
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	64fb      	str	r3, [r7, #76]	; 0x4c
	    } while (integerPart);
 8001b2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d1dd      	bne.n	8001aec <GLCD_PrintFloat+0x58>

	    GLCD_reverseString(str, i);
 8001b30:	f107 0308 	add.w	r3, r7, #8
 8001b34:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7ff fe49 	bl	80017ce <GLCD_reverseString>

	    // Add decimal point
	    str[i++] = '.';
 8001b3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	647a      	str	r2, [r7, #68]	; 0x44
 8001b42:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001b46:	4413      	add	r3, r2
 8001b48:	222e      	movs	r2, #46	; 0x2e
 8001b4a:	f803 2c48 	strb.w	r2, [r3, #-72]

	    // Convert fractional part to string
	    for (int j = 0; j < 4; j++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	643b      	str	r3, [r7, #64]	; 0x40
 8001b52:	e023      	b.n	8001b9c <GLCD_PrintFloat+0x108>
	        fractionalPart *= 10;
 8001b54:	491c      	ldr	r1, [pc, #112]	; (8001bc8 <GLCD_PrintFloat+0x134>)
 8001b56:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b58:	f7ff f836 	bl	8000bc8 <__aeabi_fmul>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	64bb      	str	r3, [r7, #72]	; 0x48
	        int digit = (int)fractionalPart;
 8001b60:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b62:	f7ff f9f7 	bl	8000f54 <__aeabi_f2iz>
 8001b66:	4603      	mov	r3, r0
 8001b68:	63fb      	str	r3, [r7, #60]	; 0x3c
	        str[i++] = '0' + digit;
 8001b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b70:	1c59      	adds	r1, r3, #1
 8001b72:	6479      	str	r1, [r7, #68]	; 0x44
 8001b74:	3230      	adds	r2, #48	; 0x30
 8001b76:	b2d2      	uxtb	r2, r2
 8001b78:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b7c:	440b      	add	r3, r1
 8001b7e:	f803 2c48 	strb.w	r2, [r3, #-72]
	        fractionalPart -= digit;
 8001b82:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b84:	f7fe ffcc 	bl	8000b20 <__aeabi_i2f>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b8e:	f7fe ff11 	bl	80009b4 <__aeabi_fsub>
 8001b92:	4603      	mov	r3, r0
 8001b94:	64bb      	str	r3, [r7, #72]	; 0x48
	    for (int j = 0; j < 4; j++) {
 8001b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b98:	3301      	adds	r3, #1
 8001b9a:	643b      	str	r3, [r7, #64]	; 0x40
 8001b9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	ddd8      	ble.n	8001b54 <GLCD_PrintFloat+0xc0>
	    }

	    // Null-terminate the string
	    str[i] = '\0';
 8001ba2:	f107 0208 	add.w	r2, r7, #8
 8001ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ba8:	4413      	add	r3, r2
 8001baa:	2200      	movs	r2, #0
 8001bac:	701a      	strb	r2, [r3, #0]

	    GLCD_PrintString(str, x, y);
 8001bae:	78ba      	ldrb	r2, [r7, #2]
 8001bb0:	78f9      	ldrb	r1, [r7, #3]
 8001bb2:	f107 0308 	add.w	r3, r7, #8
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f7ff fedc 	bl	8001974 <GLCD_PrintString>
}
 8001bbc:	bf00      	nop
 8001bbe:	3750      	adds	r7, #80	; 0x50
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	66666667 	.word	0x66666667
 8001bc8:	41200000 	.word	0x41200000

08001bcc <GLCD_ClearLine>:
 * @param  y : line number on GLCD (GLCD_LINE_0 to GLCD_LINE_7)
 * @retval None
 */

void GLCD_ClearLine(GLCD_LineNum_t line)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	71fb      	strb	r3, [r7, #7]
	Delay(T);
 8001bd6:	2001      	movs	r0, #1
 8001bd8:	f7ff fc62 	bl	80014a0 <Delay>
	int i;
	// Loop through all pixels on the line, sending data byte 0 for clearing
	// Left half of the line
	GLCD_GoTo_Col_Line(0, line);
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	4619      	mov	r1, r3
 8001be0:	2000      	movs	r0, #0
 8001be2:	f7ff fddd 	bl	80017a0 <GLCD_GoTo_Col_Line>
	for (i = 0; i < 64; i++)
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
 8001bea:	e00a      	b.n	8001c02 <GLCD_ClearLine+0x36>
	{
		GLCD_SendData(0, 0);	 // Print 0 for Delete Left section
 8001bec:	2100      	movs	r1, #0
 8001bee:	2000      	movs	r0, #0
 8001bf0:	f7ff fd20 	bl	8001634 <GLCD_SendData>
		GLCD_SendData(0, 64); // Print 0 for Delete Right section
 8001bf4:	2140      	movs	r1, #64	; 0x40
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff fd1c 	bl	8001634 <GLCD_SendData>
	for (i = 0; i < 64; i++)
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	60fb      	str	r3, [r7, #12]
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b3f      	cmp	r3, #63	; 0x3f
 8001c06:	ddf1      	ble.n	8001bec <GLCD_ClearLine+0x20>
	}

	// Right half of the line
	GLCD_GoTo_Col_Line(64, line); // At start of line of right side
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	2040      	movs	r0, #64	; 0x40
 8001c0e:	f7ff fdc7 	bl	80017a0 <GLCD_GoTo_Col_Line>
	for (i = 0; i < 64; i++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	e00a      	b.n	8001c2e <GLCD_ClearLine+0x62>
	{
		GLCD_SendData(0, 0);	 // Print 0 for Delete Left section
 8001c18:	2100      	movs	r1, #0
 8001c1a:	2000      	movs	r0, #0
 8001c1c:	f7ff fd0a 	bl	8001634 <GLCD_SendData>
		GLCD_SendData(0, 64); // Print 0 for Delete Right section
 8001c20:	2140      	movs	r1, #64	; 0x40
 8001c22:	2000      	movs	r0, #0
 8001c24:	f7ff fd06 	bl	8001634 <GLCD_SendData>
	for (i = 0; i < 64; i++)
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3301      	adds	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b3f      	cmp	r3, #63	; 0x3f
 8001c32:	ddf1      	ble.n	8001c18 <GLCD_ClearLine+0x4c>
	}

}
 8001c34:	bf00      	nop
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <GLCD_DrawHLine>:
 * @param  x2 : The ending X coordinate (column) of the line.
 * @retval None
 */

void GLCD_DrawHLine(u8 x1, u8 x2, GLCD_LineNum_t y)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b084      	sub	sp, #16
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	71fb      	strb	r3, [r7, #7]
 8001c46:	460b      	mov	r3, r1
 8001c48:	71bb      	strb	r3, [r7, #6]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	717b      	strb	r3, [r7, #5]
	for (char x=x1;x<=x2;x++)
 8001c4e:	79fb      	ldrb	r3, [r7, #7]
 8001c50:	73fb      	strb	r3, [r7, #15]
 8001c52:	e00d      	b.n	8001c70 <GLCD_DrawHLine+0x34>
	{
		GLCD_GoTo_Col_Line (x,y);
 8001c54:	797a      	ldrb	r2, [r7, #5]
 8001c56:	7bfb      	ldrb	r3, [r7, #15]
 8001c58:	4611      	mov	r1, r2
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff fda0 	bl	80017a0 <GLCD_GoTo_Col_Line>
		GLCD_SendData(0x01, x);
 8001c60:	7bfb      	ldrb	r3, [r7, #15]
 8001c62:	4619      	mov	r1, r3
 8001c64:	2001      	movs	r0, #1
 8001c66:	f7ff fce5 	bl	8001634 <GLCD_SendData>
	for (char x=x1;x<=x2;x++)
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	73fb      	strb	r3, [r7, #15]
 8001c70:	7bfa      	ldrb	r2, [r7, #15]
 8001c72:	79bb      	ldrb	r3, [r7, #6]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d9ed      	bls.n	8001c54 <GLCD_DrawHLine+0x18>
	}

}
 8001c78:	bf00      	nop
 8001c7a:	3710      	adds	r7, #16
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <GLCD_DrawVLine>:
 * @param  y2 : The ending line number of the line.
 * @param  x : x coordinate
 * @retval None
 */
void GLCD_DrawVLine(GLCD_LineNum_t y1, GLCD_LineNum_t y2, u8 x)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	717b      	strb	r3, [r7, #5]
	for (char y=y1;y<y2;y++)
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	73fb      	strb	r3, [r7, #15]
 8001c96:	e00d      	b.n	8001cb4 <GLCD_DrawVLine+0x34>
	{
		GLCD_GoTo_Col_Line (x,y);
 8001c98:	7bfa      	ldrb	r2, [r7, #15]
 8001c9a:	797b      	ldrb	r3, [r7, #5]
 8001c9c:	4611      	mov	r1, r2
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	f7ff fd7e 	bl	80017a0 <GLCD_GoTo_Col_Line>
		GLCD_SendData(0xFF, x);
 8001ca4:	797b      	ldrb	r3, [r7, #5]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	20ff      	movs	r0, #255	; 0xff
 8001caa:	f7ff fcc3 	bl	8001634 <GLCD_SendData>
	for (char y=y1;y<y2;y++)
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	73fb      	strb	r3, [r7, #15]
 8001cb4:	7bfa      	ldrb	r2, [r7, #15]
 8001cb6:	79bb      	ldrb	r3, [r7, #6]
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d3ed      	bcc.n	8001c98 <GLCD_DrawVLine+0x18>
	}
}
 8001cbc:	bf00      	nop
 8001cbe:	3710      	adds	r7, #16
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}

08001cc4 <GPIO_SetPinDirSpeed>:
 * @param GPIO_PINx : Pin number within the port (e.g., GPIO_PIN0, GPIO_PIN1, etc.).
 * @param GPIO_Mode : Mode for the pin (direction and speed).
 * @retval None
 */
void GPIO_SetPinDirSpeed(volatile GPIO_TypeDef *GPIOx, GPIO_PinNum_t GPIO_PINx, GPIO_Mode_t GPIO_Mode)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	70fb      	strb	r3, [r7, #3]
 8001cd0:	4613      	mov	r3, r2
 8001cd2:	70bb      	strb	r3, [r7, #2]
	/* Check if the current bit belongs to first half or last half of the pin count number
	   in order to address CRH or CRL register*/
	if ((GPIO_PINx < GPIO_PIN8))
 8001cd4:	78fb      	ldrb	r3, [r7, #3]
 8001cd6:	2b07      	cmp	r3, #7
 8001cd8:	d815      	bhi.n	8001d06 <GPIO_SetPinDirSpeed+0x42>
	{
		GPIOx->CRL &= ~((0b1111) << (GPIO_PINx * GPIO_PIN_MODE_OFFSET)); // Clear mode bits
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	78fa      	ldrb	r2, [r7, #3]
 8001ce0:	0092      	lsls	r2, r2, #2
 8001ce2:	210f      	movs	r1, #15
 8001ce4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce8:	43d2      	mvns	r2, r2
 8001cea:	401a      	ands	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |= (GPIO_Mode << (GPIO_PINx * GPIO_PIN_MODE_OFFSET)); // Set mode bits
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	78b9      	ldrb	r1, [r7, #2]
 8001cf6:	78fa      	ldrb	r2, [r7, #3]
 8001cf8:	0092      	lsls	r2, r2, #2
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	431a      	orrs	r2, r3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	601a      	str	r2, [r3, #0]
	{
		GPIOx->CRH &= ~((0b1111) << ((GPIO_PINx - 8) * GPIO_PIN_MODE_OFFSET)); // Clear mode bits
		GPIOx->CRH |= (GPIO_Mode << ((GPIO_PINx - 8) * GPIO_PIN_MODE_OFFSET)); // Set mode bits
	}

}
 8001d04:	e016      	b.n	8001d34 <GPIO_SetPinDirSpeed+0x70>
		GPIOx->CRH &= ~((0b1111) << ((GPIO_PINx - 8) * GPIO_PIN_MODE_OFFSET)); // Clear mode bits
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	78fa      	ldrb	r2, [r7, #3]
 8001d0c:	3a08      	subs	r2, #8
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	210f      	movs	r1, #15
 8001d12:	fa01 f202 	lsl.w	r2, r1, r2
 8001d16:	43d2      	mvns	r2, r2
 8001d18:	401a      	ands	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= (GPIO_Mode << ((GPIO_PINx - 8) * GPIO_PIN_MODE_OFFSET)); // Set mode bits
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	78b9      	ldrb	r1, [r7, #2]
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	3a08      	subs	r2, #8
 8001d28:	0092      	lsls	r2, r2, #2
 8001d2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d2e:	431a      	orrs	r2, r3
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	605a      	str	r2, [r3, #4]
}
 8001d34:	bf00      	nop
 8001d36:	370c      	adds	r7, #12
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr

08001d3e <GPIO_SetPinValue>:
 * @param GPIO_PINx : Pin number within the port (e.g., GPIO_PIN0, GPIO_PIN1, etc.).
 * @param GPIO_PIN_Val : Value to set on the pin (GPIO_PIN_HIGH or GPIO_PIN_LOW).
 * @retval None
 */
void GPIO_SetPinValue(volatile  GPIO_TypeDef *GPIOx, GPIO_PinNum_t GPIO_PINx, GPIO_PinVal_t GPIO_PIN_Val)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	460b      	mov	r3, r1
 8001d48:	70fb      	strb	r3, [r7, #3]
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	70bb      	strb	r3, [r7, #2]
	if (GPIO_PIN_Val == GPIO_PIN_HIGH)
 8001d4e:	78bb      	ldrb	r3, [r7, #2]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d109      	bne.n	8001d68 <GPIO_SetPinValue+0x2a>
	{
		SET_BIT(GPIOx->ODR, GPIO_PINx);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	68da      	ldr	r2, [r3, #12]
 8001d58:	78fb      	ldrb	r3, [r7, #3]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d60:	431a      	orrs	r2, r3
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	60da      	str	r2, [r3, #12]
	else if (GPIO_PIN_Val == GPIO_PIN_LOW)
	{
		CLR_BIT(GPIOx->ODR, GPIO_PINx);
	}

}
 8001d66:	e00c      	b.n	8001d82 <GPIO_SetPinValue+0x44>
	else if (GPIO_PIN_Val == GPIO_PIN_LOW)
 8001d68:	78bb      	ldrb	r3, [r7, #2]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d109      	bne.n	8001d82 <GPIO_SetPinValue+0x44>
		CLR_BIT(GPIOx->ODR, GPIO_PINx);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	68da      	ldr	r2, [r3, #12]
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	2101      	movs	r1, #1
 8001d76:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7a:	43db      	mvns	r3, r3
 8001d7c:	401a      	ands	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	60da      	str	r2, [r3, #12]
}
 8001d82:	bf00      	nop
 8001d84:	370c      	adds	r7, #12
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bc80      	pop	{r7}
 8001d8a:	4770      	bx	lr

08001d8c <GPIO_SetPortValue>:
 * @param  GPIOx : Pointer to the GPIO port (GPIOA, GPIOB, GPIOC ).
 * @param  val : Value to set on the GPIO port.
 * @retval None
 */
void GPIO_SetPortValue( volatile  GPIO_TypeDef *GPIOx , u32 val)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
 8001d94:	6039      	str	r1, [r7, #0]
	GPIOx->ODR = (u32)val;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	683a      	ldr	r2, [r7, #0]
 8001d9a:	60da      	str	r2, [r3, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	370c      	adds	r7, #12
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bc80      	pop	{r7}
 8001da4:	4770      	bx	lr
	...

08001da8 <NVIC_EnableIRQ>:
 * @brief Enables the specified interrupt in the Nested Vectored Interrupt Controller.
 * @param IRQn : Interrupt number to be enabled.
 * @retval None
 */
void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((u32)(IRQn) >= 0)
  {
    NVIC->ISER[(((u32)IRQn) >> 5UL)] = (u32)(1UL << (((u32)IRQn) & 0x1FUL));
 8001db2:	79fb      	ldrb	r3, [r7, #7]
 8001db4:	f003 021f 	and.w	r2, r3, #31
 8001db8:	4906      	ldr	r1, [pc, #24]	; (8001dd4 <NVIC_EnableIRQ+0x2c>)
 8001dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dbe:	095b      	lsrs	r3, r3, #5
 8001dc0:	2001      	movs	r0, #1
 8001dc2:	fa00 f202 	lsl.w	r2, r0, r2
 8001dc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	e000e100 	.word	0xe000e100

08001dd8 <TIM_Pin_Init>:
 * @param  TIM_CHx : Timer channel (TIM_CH1, TIM_CH2, TIM_CH3, or TIM_CH4).
 * @param  GPIO_Mode : Mode to configure the GPIO pins
 * @retval None
 */
static void TIM_Pin_Init(volatile TIM_TypeDef *TIMx, TIM_CH_t TIM_CHx,GPIO_Mode_t GPIO_Mode)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b082      	sub	sp, #8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	460b      	mov	r3, r1
 8001de2:	70fb      	strb	r3, [r7, #3]
 8001de4:	4613      	mov	r3, r2
 8001de6:	70bb      	strb	r3, [r7, #2]
	if (TIMx == TIM1)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a49      	ldr	r2, [pc, #292]	; (8001f10 <TIM_Pin_Init+0x138>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d12c      	bne.n	8001e4a <TIM_Pin_Init+0x72>
	{
		switch(TIM_CHx)
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	2b03      	cmp	r3, #3
 8001df4:	f200 8088 	bhi.w	8001f08 <TIM_Pin_Init+0x130>
 8001df8:	a201      	add	r2, pc, #4	; (adr r2, 8001e00 <TIM_Pin_Init+0x28>)
 8001dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfe:	bf00      	nop
 8001e00:	08001e11 	.word	0x08001e11
 8001e04:	08001e1f 	.word	0x08001e1f
 8001e08:	08001e2d 	.word	0x08001e2d
 8001e0c:	08001e3b 	.word	0x08001e3b
		{
		case TIM_CH1:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN8, GPIO_Mode);
 8001e10:	78bb      	ldrb	r3, [r7, #2]
 8001e12:	461a      	mov	r2, r3
 8001e14:	2108      	movs	r1, #8
 8001e16:	483f      	ldr	r0, [pc, #252]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001e18:	f7ff ff54 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001e1c:	e074      	b.n	8001f08 <TIM_Pin_Init+0x130>
		case TIM_CH2:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN9, GPIO_Mode);
 8001e1e:	78bb      	ldrb	r3, [r7, #2]
 8001e20:	461a      	mov	r2, r3
 8001e22:	2109      	movs	r1, #9
 8001e24:	483b      	ldr	r0, [pc, #236]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001e26:	f7ff ff4d 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001e2a:	e06d      	b.n	8001f08 <TIM_Pin_Init+0x130>
		case TIM_CH3:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN10, GPIO_Mode);
 8001e2c:	78bb      	ldrb	r3, [r7, #2]
 8001e2e:	461a      	mov	r2, r3
 8001e30:	210a      	movs	r1, #10
 8001e32:	4838      	ldr	r0, [pc, #224]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001e34:	f7ff ff46 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001e38:	e066      	b.n	8001f08 <TIM_Pin_Init+0x130>
		case TIM_CH4:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN11, GPIO_Mode);
 8001e3a:	78bb      	ldrb	r3, [r7, #2]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	210b      	movs	r1, #11
 8001e40:	4834      	ldr	r0, [pc, #208]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001e42:	f7ff ff3f 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001e46:	bf00      	nop
 8001e48:	e05e      	b.n	8001f08 <TIM_Pin_Init+0x130>
		}
	}
	else if (TIMx == TIM2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d12b      	bne.n	8001eaa <TIM_Pin_Init+0xd2>
	{
		switch(TIM_CHx)
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	2b03      	cmp	r3, #3
 8001e56:	d857      	bhi.n	8001f08 <TIM_Pin_Init+0x130>
 8001e58:	a201      	add	r2, pc, #4	; (adr r2, 8001e60 <TIM_Pin_Init+0x88>)
 8001e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e5e:	bf00      	nop
 8001e60:	08001e71 	.word	0x08001e71
 8001e64:	08001e7f 	.word	0x08001e7f
 8001e68:	08001e8d 	.word	0x08001e8d
 8001e6c:	08001e9b 	.word	0x08001e9b
		{
		case TIM_CH1:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN0, GPIO_Mode);
 8001e70:	78bb      	ldrb	r3, [r7, #2]
 8001e72:	461a      	mov	r2, r3
 8001e74:	2100      	movs	r1, #0
 8001e76:	4827      	ldr	r0, [pc, #156]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001e78:	f7ff ff24 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001e7c:	e044      	b.n	8001f08 <TIM_Pin_Init+0x130>
		case TIM_CH2:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN1, GPIO_Mode);
 8001e7e:	78bb      	ldrb	r3, [r7, #2]
 8001e80:	461a      	mov	r2, r3
 8001e82:	2101      	movs	r1, #1
 8001e84:	4823      	ldr	r0, [pc, #140]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001e86:	f7ff ff1d 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001e8a:	e03d      	b.n	8001f08 <TIM_Pin_Init+0x130>
		case TIM_CH3:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN2, GPIO_Mode);
 8001e8c:	78bb      	ldrb	r3, [r7, #2]
 8001e8e:	461a      	mov	r2, r3
 8001e90:	2102      	movs	r1, #2
 8001e92:	4820      	ldr	r0, [pc, #128]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001e94:	f7ff ff16 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001e98:	e036      	b.n	8001f08 <TIM_Pin_Init+0x130>
		case TIM_CH4:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN3, GPIO_Mode);
 8001e9a:	78bb      	ldrb	r3, [r7, #2]
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	2103      	movs	r1, #3
 8001ea0:	481c      	ldr	r0, [pc, #112]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001ea2:	f7ff ff0f 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001ea6:	bf00      	nop
 8001ea8:	e02e      	b.n	8001f08 <TIM_Pin_Init+0x130>
		}
	}
	else if (TIMx == TIM3)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a1a      	ldr	r2, [pc, #104]	; (8001f18 <TIM_Pin_Init+0x140>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d12a      	bne.n	8001f08 <TIM_Pin_Init+0x130>
	{
		switch(TIM_CHx)
 8001eb2:	78fb      	ldrb	r3, [r7, #3]
 8001eb4:	2b03      	cmp	r3, #3
 8001eb6:	d827      	bhi.n	8001f08 <TIM_Pin_Init+0x130>
 8001eb8:	a201      	add	r2, pc, #4	; (adr r2, 8001ec0 <TIM_Pin_Init+0xe8>)
 8001eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ebe:	bf00      	nop
 8001ec0:	08001ed1 	.word	0x08001ed1
 8001ec4:	08001edf 	.word	0x08001edf
 8001ec8:	08001eed 	.word	0x08001eed
 8001ecc:	08001efb 	.word	0x08001efb
		{
		case TIM_CH1:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN6, GPIO_Mode);
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	2106      	movs	r1, #6
 8001ed6:	480f      	ldr	r0, [pc, #60]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001ed8:	f7ff fef4 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001edc:	e014      	b.n	8001f08 <TIM_Pin_Init+0x130>
		case TIM_CH2:
			GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN7, GPIO_Mode);
 8001ede:	78bb      	ldrb	r3, [r7, #2]
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2107      	movs	r1, #7
 8001ee4:	480b      	ldr	r0, [pc, #44]	; (8001f14 <TIM_Pin_Init+0x13c>)
 8001ee6:	f7ff feed 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001eea:	e00d      	b.n	8001f08 <TIM_Pin_Init+0x130>
		case TIM_CH3:
			GPIO_SetPinDirSpeed(GPIOB, GPIO_PIN0, GPIO_Mode);
 8001eec:	78bb      	ldrb	r3, [r7, #2]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	2100      	movs	r1, #0
 8001ef2:	480a      	ldr	r0, [pc, #40]	; (8001f1c <TIM_Pin_Init+0x144>)
 8001ef4:	f7ff fee6 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001ef8:	e006      	b.n	8001f08 <TIM_Pin_Init+0x130>
		case TIM_CH4:
			GPIO_SetPinDirSpeed(GPIOB, GPIO_PIN1, GPIO_Mode);
 8001efa:	78bb      	ldrb	r3, [r7, #2]
 8001efc:	461a      	mov	r2, r3
 8001efe:	2101      	movs	r1, #1
 8001f00:	4806      	ldr	r0, [pc, #24]	; (8001f1c <TIM_Pin_Init+0x144>)
 8001f02:	f7ff fedf 	bl	8001cc4 <GPIO_SetPinDirSpeed>
			break;
 8001f06:	bf00      	nop
		}
	}

}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	40012c00 	.word	0x40012c00
 8001f14:	40010800 	.word	0x40010800
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40010c00 	.word	0x40010c00

08001f20 <TIM_Init>:
 * @brief  Initializes the clock for the specified timer peripheral.
 * @param  TIMx : Pointer to the timer peripheral (TIM1, TIM2, or TIM3).
 * @retval None
 */
void TIM_Init(volatile TIM_TypeDef *TIMx)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	RCC_AFIO_CLK_EN();
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <TIM_Init+0x90>)
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	4a20      	ldr	r2, [pc, #128]	; (8001fb0 <TIM_Init+0x90>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	6193      	str	r3, [r2, #24]
	if (TIMx == TIM1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	4a1f      	ldr	r2, [pc, #124]	; (8001fb4 <TIM_Init+0x94>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d10c      	bne.n	8001f56 <TIM_Init+0x36>
	{
		RCC_TIM1_CLK_EN();
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	; (8001fb0 <TIM_Init+0x90>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a1b      	ldr	r2, [pc, #108]	; (8001fb0 <TIM_Init+0x90>)
 8001f42:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f46:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8001f48:	4b19      	ldr	r3, [pc, #100]	; (8001fb0 <TIM_Init+0x90>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	4a18      	ldr	r2, [pc, #96]	; (8001fb0 <TIM_Init+0x90>)
 8001f4e:	f043 0304 	orr.w	r3, r3, #4
 8001f52:	6193      	str	r3, [r2, #24]
	{
		RCC_TIM3_CLK_EN();
		RCC_GPIOA_CLK_EN();
		RCC_GPIOB_CLK_EN();
	}
}
 8001f54:	e026      	b.n	8001fa4 <TIM_Init+0x84>
	else if (TIMx == TIM2)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f5c:	d10c      	bne.n	8001f78 <TIM_Init+0x58>
		RCC_TIM2_CLK_EN();
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <TIM_Init+0x90>)
 8001f60:	69db      	ldr	r3, [r3, #28]
 8001f62:	4a13      	ldr	r2, [pc, #76]	; (8001fb0 <TIM_Init+0x90>)
 8001f64:	f043 0301 	orr.w	r3, r3, #1
 8001f68:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <TIM_Init+0x90>)
 8001f6c:	699b      	ldr	r3, [r3, #24]
 8001f6e:	4a10      	ldr	r2, [pc, #64]	; (8001fb0 <TIM_Init+0x90>)
 8001f70:	f043 0304 	orr.w	r3, r3, #4
 8001f74:	6193      	str	r3, [r2, #24]
}
 8001f76:	e015      	b.n	8001fa4 <TIM_Init+0x84>
	else if (TIMx == TIM3)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	4a0f      	ldr	r2, [pc, #60]	; (8001fb8 <TIM_Init+0x98>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d111      	bne.n	8001fa4 <TIM_Init+0x84>
		RCC_TIM3_CLK_EN();
 8001f80:	4b0b      	ldr	r3, [pc, #44]	; (8001fb0 <TIM_Init+0x90>)
 8001f82:	69db      	ldr	r3, [r3, #28]
 8001f84:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <TIM_Init+0x90>)
 8001f86:	f043 0302 	orr.w	r3, r3, #2
 8001f8a:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001f8c:	4b08      	ldr	r3, [pc, #32]	; (8001fb0 <TIM_Init+0x90>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <TIM_Init+0x90>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <TIM_Init+0x90>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <TIM_Init+0x90>)
 8001f9e:	f043 0308 	orr.w	r3, r3, #8
 8001fa2:	6193      	str	r3, [r2, #24]
}
 8001fa4:	bf00      	nop
 8001fa6:	370c      	adds	r7, #12
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bc80      	pop	{r7}
 8001fac:	4770      	bx	lr
 8001fae:	bf00      	nop
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	40012c00 	.word	0x40012c00
 8001fb8:	40000400 	.word	0x40000400

08001fbc <TIM_PWM_Start>:
 * @param  dutyCycle :  Desired dutly cycle (0-100)
 * @param  frequency : Desired frequency of the PWM signal in Hz (123 Hz - 80000 Hz)
 * @retval None
 */
void TIM_PWM_Start(volatile TIM_TypeDef *TIMx, TIM_CH_t TIM_CHx, u32 dutyCycle, u32 frequency)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607a      	str	r2, [r7, #4]
 8001fc6:	603b      	str	r3, [r7, #0]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	72fb      	strb	r3, [r7, #11]
	/* Pin initialization for timer channel */
	TIM_Pin_Init(TIMx, TIM_CHx, GPIO_OUTPUT_AF_PP_2MHZ);
 8001fcc:	7afb      	ldrb	r3, [r7, #11]
 8001fce:	220a      	movs	r2, #10
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7ff ff00 	bl	8001dd8 <TIM_Pin_Init>

	/* Individual channel initialization*/
	switch (TIM_CHx)
 8001fd8:	7afb      	ldrb	r3, [r7, #11]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d862      	bhi.n	80020a4 <TIM_PWM_Start+0xe8>
 8001fde:	a201      	add	r2, pc, #4	; (adr r2, 8001fe4 <TIM_PWM_Start+0x28>)
 8001fe0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe4:	08001ff5 	.word	0x08001ff5
 8001fe8:	08002021 	.word	0x08002021
 8001fec:	0800204d 	.word	0x0800204d
 8001ff0:	08002079 	.word	0x08002079
	{
	case TIM_CH1:
		TIMx->CCR1 = dutyCycle;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	635a      	str	r2, [r3, #52]	; 0x34
		TIMx->CCMR1 |= OCM_PWM2 << CCMR1_OC1M; // Select PWM Mode
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	699b      	ldr	r3, [r3, #24]
 8001ffe:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx->CCMR1, CCMR1_OC1PE);	   // Enable the corresponding preload register
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	f043 0208 	orr.w	r2, r3, #8
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx->CCER, CCER_CC1E);        // Enable capture/compare channel
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6a1b      	ldr	r3, [r3, #32]
 8002016:	f043 0201 	orr.w	r2, r3, #1
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	621a      	str	r2, [r3, #32]
		break;
 800201e:	e041      	b.n	80020a4 <TIM_PWM_Start+0xe8>

	case TIM_CH2:
		TIMx->CCR2 = dutyCycle;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	639a      	str	r2, [r3, #56]	; 0x38
		TIMx->CCMR1 |= OCM_PWM2 << CCMR1_OC2M; // Select PWM Mode
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	699b      	ldr	r3, [r3, #24]
 800202a:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx->CCMR1, CCMR1_OC2PE);	   // Enable the corresponding preload register
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx->CCER, CCER_CC2E);		   // Enable capture/compare channel
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f043 0210 	orr.w	r2, r3, #16
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	621a      	str	r2, [r3, #32]
		break;
 800204a:	e02b      	b.n	80020a4 <TIM_PWM_Start+0xe8>

	case TIM_CH3:
		TIMx->CCR3 = dutyCycle;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	63da      	str	r2, [r3, #60]	; 0x3c
		TIMx->CCMR2 |= OCM_PWM2 << CCMR2_OC3M; // Select PWM Mode
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx->CCMR2, CCMR2_OC3PE);	   // Enable the corresponding preload register
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	f043 0208 	orr.w	r2, r3, #8
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx->CCER, CCER_CC3E);        // Enable capture from the counter into the capture register
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	621a      	str	r2, [r3, #32]
		break;
 8002076:	e015      	b.n	80020a4 <TIM_PWM_Start+0xe8>

	case TIM_CH4:
		TIMx->CCR4 = dutyCycle;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	687a      	ldr	r2, [r7, #4]
 800207c:	641a      	str	r2, [r3, #64]	; 0x40
		TIMx->CCMR2 |= OCM_PWM2 << CCMR2_OC4M; // Select PWM Mode
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	69db      	ldr	r3, [r3, #28]
 8002082:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx->CCMR2, CCMR2_OC4PE);	   // Enable the corresponding preload register
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx->CCER, CCER_CC4E);        // Enable capture/compare channel
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a1b      	ldr	r3, [r3, #32]
 800209a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	621a      	str	r2, [r3, #32]
		break;
 80020a2:	bf00      	nop
	}

	/* Common initialization for all timer channels */
	TIMx->ARR = 100UL;  // Set ARR to 100 to allow direct mapping of the duty cycle value to the range of 0 to 100
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	2264      	movs	r2, #100	; 0x64
 80020a8:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->PSC = (TIM_CLK / (TIMx->ARR * frequency)) - 1;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	fb02 f303 	mul.w	r3, r2, r3
 80020b4:	4a12      	ldr	r2, [pc, #72]	; (8002100 <TIM_PWM_Start+0x144>)
 80020b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ba:	1e5a      	subs	r2, r3, #1
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	629a      	str	r2, [r3, #40]	; 0x28

	if (TIMx == TIM1)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	4a10      	ldr	r2, [pc, #64]	; (8002104 <TIM_PWM_Start+0x148>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	d105      	bne.n	80020d4 <TIM_PWM_Start+0x118>
	{
		SET_BIT(TIMx->BDTR, BDTR_MOE); //  Main output enable for TIM1 only
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020cc:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	645a      	str	r2, [r3, #68]	; 0x44
	}

	SET_BIT(TIMx->EGR, EGR_UG);   // Generate an update event
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	695b      	ldr	r3, [r3, #20]
 80020d8:	f043 0201 	orr.w	r2, r3, #1
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	615a      	str	r2, [r3, #20]
	SET_BIT(TIMx->CR1, CR1_ARPE); //  Enable the auto-reload preload register
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	601a      	str	r2, [r3, #0]
	SET_BIT(TIMx->CR1, CR1_CEN);  // Enable the Timer/Counter
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f043 0201 	orr.w	r2, r3, #1
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	601a      	str	r2, [r3, #0]
}
 80020f8:	bf00      	nop
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	007a1200 	.word	0x007a1200
 8002104:	40012c00 	.word	0x40012c00

08002108 <TIM_IC_Start>:
 * @param  TIM_IC_Edge : Selection of edge for capture (TIM_IC_RISING_EDGE or TIM_IC_FALLING_EDGE)
 * @param  TIM_INT_Status: Enable/disable timer capture interrupt (TIM_INT_ENABLE or TIM_INT_DISABLE).
 * @retval None
 */
void TIM_IC_Start(volatile TIM_TypeDef *TIMx, TIM_CH_t TIM_CHx, u8 CCS_Direction, TIM_IC_Edge_t TIM_IC_Edge , TIM_INT_Status_t TIM_INT_Status)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	70fb      	strb	r3, [r7, #3]
 800211a:	460b      	mov	r3, r1
 800211c:	70bb      	strb	r3, [r7, #2]
 800211e:	4613      	mov	r3, r2
 8002120:	707b      	strb	r3, [r7, #1]
	/* Pin initialization for timer channel */
	TIM_Pin_Init(TIMx, TIM_CHx, GPIO_INPUT_FLOATING);
 8002122:	78fb      	ldrb	r3, [r7, #3]
 8002124:	2204      	movs	r2, #4
 8002126:	4619      	mov	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff fe55 	bl	8001dd8 <TIM_Pin_Init>

	/* Individual channel initialization*/
	switch (TIM_CHx)
 800212e:	78fb      	ldrb	r3, [r7, #3]
 8002130:	2b03      	cmp	r3, #3
 8002132:	f200 80d9 	bhi.w	80022e8 <TIM_IC_Start+0x1e0>
 8002136:	a201      	add	r2, pc, #4	; (adr r2, 800213c <TIM_IC_Start+0x34>)
 8002138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800213c:	0800214d 	.word	0x0800214d
 8002140:	080021b3 	.word	0x080021b3
 8002144:	0800221b 	.word	0x0800221b
 8002148:	08002281 	.word	0x08002281
	{
	case TIM_CH1:
		TIMx->CCMR1 |= (CCS_Direction << CCMR1_CC1S); // Select the active input
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	699a      	ldr	r2, [r3, #24]
 8002150:	78bb      	ldrb	r3, [r7, #2]
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]

		// Select the active polarity
		if (TIM_IC_Edge == TIM_IC_RISING_EDGE)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d106      	bne.n	800216c <TIM_IC_Start+0x64>
		{
			CLR_BIT(TIMx->CCER, CCER_CC1P);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a1b      	ldr	r3, [r3, #32]
 8002162:	f023 0202 	bic.w	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	621a      	str	r2, [r3, #32]
 800216a:	e008      	b.n	800217e <TIM_IC_Start+0x76>
		}
		else if (TIM_IC_Edge == TIM_IC_FALLING_EDGE)
 800216c:	787b      	ldrb	r3, [r7, #1]
 800216e:	2b01      	cmp	r3, #1
 8002170:	d105      	bne.n	800217e <TIM_IC_Start+0x76>
		{
			SET_BIT(TIMx->CCER, CCER_CC1P);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a1b      	ldr	r3, [r3, #32]
 8002176:	f043 0202 	orr.w	r2, r3, #2
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	621a      	str	r2, [r3, #32]
		}

		// Enable or disable Interrupt
		if (TIM_INT_Status == TIM_INT_ENABLE)
 800217e:	7c3b      	ldrb	r3, [r7, #16]
 8002180:	2b01      	cmp	r3, #1
 8002182:	d106      	bne.n	8002192 <TIM_IC_Start+0x8a>
		{
			SET_BIT(TIMx->DIER, DIER_CC1IE);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f043 0202 	orr.w	r2, r3, #2
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	60da      	str	r2, [r3, #12]
 8002190:	e008      	b.n	80021a4 <TIM_IC_Start+0x9c>
		}
		else if (TIM_INT_Status == TIM_INT_DISABLE)
 8002192:	7c3b      	ldrb	r3, [r7, #16]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d105      	bne.n	80021a4 <TIM_IC_Start+0x9c>
		{
			CLR_BIT(TIMx->DIER, DIER_CC1IE);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	f023 0202 	bic.w	r2, r3, #2
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	60da      	str	r2, [r3, #12]
		}
		SET_BIT(TIMx->CCER, CCER_CC1E);  // Enable capture/compare channel
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6a1b      	ldr	r3, [r3, #32]
 80021a8:	f043 0201 	orr.w	r2, r3, #1
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	621a      	str	r2, [r3, #32]
		break;
 80021b0:	e09a      	b.n	80022e8 <TIM_IC_Start+0x1e0>

	case TIM_CH2:
		TIMx->CCMR1 |= (CCS_Direction << CCMR1_CC2S); // Select the active input
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	699b      	ldr	r3, [r3, #24]
 80021b6:	78ba      	ldrb	r2, [r7, #2]
 80021b8:	0212      	lsls	r2, r2, #8
 80021ba:	431a      	orrs	r2, r3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	619a      	str	r2, [r3, #24]

		// Select the active polarity
		if (TIM_IC_Edge == TIM_IC_RISING_EDGE)
 80021c0:	787b      	ldrb	r3, [r7, #1]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d106      	bne.n	80021d4 <TIM_IC_Start+0xcc>
		{
			CLR_BIT(TIMx->CCER, CCER_CC2P);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6a1b      	ldr	r3, [r3, #32]
 80021ca:	f023 0220 	bic.w	r2, r3, #32
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	621a      	str	r2, [r3, #32]
 80021d2:	e008      	b.n	80021e6 <TIM_IC_Start+0xde>
		}
		else if (TIM_IC_Edge == TIM_IC_FALLING_EDGE)
 80021d4:	787b      	ldrb	r3, [r7, #1]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <TIM_IC_Start+0xde>
		{
			SET_BIT(TIMx->CCER, CCER_CC2P);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	f043 0220 	orr.w	r2, r3, #32
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	621a      	str	r2, [r3, #32]
		}

		// Enable or disable Interrupt
		if (TIM_INT_Status == TIM_INT_ENABLE)
 80021e6:	7c3b      	ldrb	r3, [r7, #16]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d106      	bne.n	80021fa <TIM_IC_Start+0xf2>
		{
			SET_BIT(TIMx->DIER, DIER_CC2IE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	f043 0204 	orr.w	r2, r3, #4
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	60da      	str	r2, [r3, #12]
 80021f8:	e008      	b.n	800220c <TIM_IC_Start+0x104>
		}
		else if (TIM_INT_Status == TIM_INT_DISABLE)
 80021fa:	7c3b      	ldrb	r3, [r7, #16]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d105      	bne.n	800220c <TIM_IC_Start+0x104>
		{
			CLR_BIT(TIMx->DIER, DIER_CC2IE);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	f023 0204 	bic.w	r2, r3, #4
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	60da      	str	r2, [r3, #12]
		}

		SET_BIT(TIMx->CCER, CCER_CC2E);  // Enable capture/compare channel
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a1b      	ldr	r3, [r3, #32]
 8002210:	f043 0210 	orr.w	r2, r3, #16
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	621a      	str	r2, [r3, #32]
		break;
 8002218:	e066      	b.n	80022e8 <TIM_IC_Start+0x1e0>

	case TIM_CH3:
		TIMx->CCMR2 |= CCS_Direction << CCMR2_CC3S; // Select the active input
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	78bb      	ldrb	r3, [r7, #2]
 8002220:	431a      	orrs	r2, r3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	61da      	str	r2, [r3, #28]

		// Select the active polarity
		if (TIM_IC_Edge == TIM_IC_RISING_EDGE)
 8002226:	787b      	ldrb	r3, [r7, #1]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d106      	bne.n	800223a <TIM_IC_Start+0x132>
		{
			CLR_BIT(TIMx->CCER, CCER_CC3P);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6a1b      	ldr	r3, [r3, #32]
 8002230:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	621a      	str	r2, [r3, #32]
 8002238:	e008      	b.n	800224c <TIM_IC_Start+0x144>
		}
		else if (TIM_IC_Edge == TIM_IC_FALLING_EDGE)
 800223a:	787b      	ldrb	r3, [r7, #1]
 800223c:	2b01      	cmp	r3, #1
 800223e:	d105      	bne.n	800224c <TIM_IC_Start+0x144>
		{
			SET_BIT(TIMx->CCER, CCER_CC3P);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a1b      	ldr	r3, [r3, #32]
 8002244:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	621a      	str	r2, [r3, #32]
		}

		// Enable or disable Interrupt
		if (TIM_INT_Status == TIM_INT_ENABLE)
 800224c:	7c3b      	ldrb	r3, [r7, #16]
 800224e:	2b01      	cmp	r3, #1
 8002250:	d106      	bne.n	8002260 <TIM_IC_Start+0x158>
		{
			SET_BIT(TIMx->DIER, DIER_CC3IE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	f043 0208 	orr.w	r2, r3, #8
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	60da      	str	r2, [r3, #12]
 800225e:	e008      	b.n	8002272 <TIM_IC_Start+0x16a>
		}
		else if (TIM_INT_Status == TIM_INT_DISABLE)
 8002260:	7c3b      	ldrb	r3, [r7, #16]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d105      	bne.n	8002272 <TIM_IC_Start+0x16a>
		{
			CLR_BIT(TIMx->DIER, DIER_CC3IE);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68db      	ldr	r3, [r3, #12]
 800226a:	f023 0208 	bic.w	r2, r3, #8
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	60da      	str	r2, [r3, #12]
		}

		SET_BIT(TIMx->CCER, CCER_CC3E);  // Enable capture/compare channel
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a1b      	ldr	r3, [r3, #32]
 8002276:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	621a      	str	r2, [r3, #32]
		break;
 800227e:	e033      	b.n	80022e8 <TIM_IC_Start+0x1e0>

	case TIM_CH4:
		TIMx->CCMR2 |= CCS_Direction << CCMR2_CC4S; // Select the active input
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	69db      	ldr	r3, [r3, #28]
 8002284:	78ba      	ldrb	r2, [r7, #2]
 8002286:	0212      	lsls	r2, r2, #8
 8002288:	431a      	orrs	r2, r3
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	61da      	str	r2, [r3, #28]

		// Select the active polarity
		if (TIM_IC_Edge == TIM_IC_RISING_EDGE)
 800228e:	787b      	ldrb	r3, [r7, #1]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d106      	bne.n	80022a2 <TIM_IC_Start+0x19a>
		{
			CLR_BIT(TIMx->CCER, CCER_CC4P);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	621a      	str	r2, [r3, #32]
 80022a0:	e008      	b.n	80022b4 <TIM_IC_Start+0x1ac>
		}
		else if (TIM_IC_Edge == TIM_IC_FALLING_EDGE)
 80022a2:	787b      	ldrb	r3, [r7, #1]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <TIM_IC_Start+0x1ac>
		{
			SET_BIT(TIMx->CCER, CCER_CC4P);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	621a      	str	r2, [r3, #32]
		}

		// Enable or disable Interrupt
		if (TIM_INT_Status == TIM_INT_ENABLE)
 80022b4:	7c3b      	ldrb	r3, [r7, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d106      	bne.n	80022c8 <TIM_IC_Start+0x1c0>
		{
			SET_BIT(TIMx->DIER, DIER_CC1IE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	68db      	ldr	r3, [r3, #12]
 80022be:	f043 0202 	orr.w	r2, r3, #2
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	e008      	b.n	80022da <TIM_IC_Start+0x1d2>
		}
		else if (TIM_INT_Status == TIM_INT_DISABLE)
 80022c8:	7c3b      	ldrb	r3, [r7, #16]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d105      	bne.n	80022da <TIM_IC_Start+0x1d2>
		{
			CLR_BIT(TIMx->DIER, DIER_CC1IE);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	68db      	ldr	r3, [r3, #12]
 80022d2:	f023 0202 	bic.w	r2, r3, #2
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	60da      	str	r2, [r3, #12]
		}

		SET_BIT(TIMx->CCER, CCER_CC4E);  // Enable capture/compare channel
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	621a      	str	r2, [r3, #32]
		break;
 80022e6:	bf00      	nop
	}
	TIMx->ARR = TIM_MAX_PERIOD;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ee:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIMx->CR1, CR1_CEN); // Enable timer/counter
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f043 0201 	orr.w	r2, r3, #1
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	601a      	str	r2, [r3, #0]
}
 80022fc:	bf00      	nop
 80022fe:	3708      	adds	r7, #8
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <TIM_IC_INT_Enable>:
 * @brief  Enables the interrupt for the specified timer's capture/compare events.
 * @param  TIMx : Pointer to the timer peripheral (TIM1, TIM2, or TIM3).
 * @retval None
 */
void TIM_IC_INT_Enable(volatile TIM_TypeDef *TIMx)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b082      	sub	sp, #8
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
	if (TIMx == TIM1)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <TIM_IC_INT_Enable+0x40>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d103      	bne.n	800231c <TIM_IC_INT_Enable+0x18>
	{
		NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002314:	201b      	movs	r0, #27
 8002316:	f7ff fd47 	bl	8001da8 <NVIC_EnableIRQ>
	}
	else if (TIMx == TIM3)
	{
		NVIC_EnableIRQ(TIM3_IRQn);
	}
}
 800231a:	e00e      	b.n	800233a <TIM_IC_INT_Enable+0x36>
	else if (TIMx == TIM2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002322:	d103      	bne.n	800232c <TIM_IC_INT_Enable+0x28>
		NVIC_EnableIRQ(TIM2_IRQn);
 8002324:	201c      	movs	r0, #28
 8002326:	f7ff fd3f 	bl	8001da8 <NVIC_EnableIRQ>
}
 800232a:	e006      	b.n	800233a <TIM_IC_INT_Enable+0x36>
	else if (TIMx == TIM3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	4a06      	ldr	r2, [pc, #24]	; (8002348 <TIM_IC_INT_Enable+0x44>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d102      	bne.n	800233a <TIM_IC_INT_Enable+0x36>
		NVIC_EnableIRQ(TIM3_IRQn);
 8002334:	201d      	movs	r0, #29
 8002336:	f7ff fd37 	bl	8001da8 <NVIC_EnableIRQ>
}
 800233a:	bf00      	nop
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40012c00 	.word	0x40012c00
 8002348:	40000400 	.word	0x40000400

0800234c <TIM3_SetCallback>:
 * @brief  Sets the callback function for the TIM3 interrupt.
 * @param  functionPtr :  Pointer to the callback function.
 * @retval None
 */
void TIM3_SetCallback(void (*functionPtr)(void))
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	TIM3_Callback_Ptr = functionPtr;
 8002354:	4a03      	ldr	r2, [pc, #12]	; (8002364 <TIM3_SetCallback+0x18>)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6013      	str	r3, [r2, #0]
}
 800235a:	bf00      	nop
 800235c:	370c      	adds	r7, #12
 800235e:	46bd      	mov	sp, r7
 8002360:	bc80      	pop	{r7}
 8002362:	4770      	bx	lr
 8002364:	2000084c 	.word	0x2000084c

08002368 <TIM1_UP_IRQHandler>:
 * @brief  TIM1 update event interrupt handler.
 * @param  None
 * @retval None
 */
void TIM1_UP_IRQHandler(void)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	af00      	add	r7, sp, #0
	if (TIM1_UP_Callback_Ptr != 0)
 800236c:	4b04      	ldr	r3, [pc, #16]	; (8002380 <TIM1_UP_IRQHandler+0x18>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <TIM1_UP_IRQHandler+0x12>
	{
		TIM1_UP_Callback_Ptr();
 8002374:	4b02      	ldr	r3, [pc, #8]	; (8002380 <TIM1_UP_IRQHandler+0x18>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4798      	blx	r3
	}
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	2000083c 	.word	0x2000083c

08002384 <TIM1_TRG_COM_IRQHandler>:
 * @brief  TIM1 trigger and communication interrupt handler.
 * @param  None
 * @retval None
 */
void TIM1_TRG_COM_IRQHandler(void)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	af00      	add	r7, sp, #0
	if (TIM1_TRG_COM_Callback_Ptr != 0)
 8002388:	4b04      	ldr	r3, [pc, #16]	; (800239c <TIM1_TRG_COM_IRQHandler+0x18>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	2b00      	cmp	r3, #0
 800238e:	d002      	beq.n	8002396 <TIM1_TRG_COM_IRQHandler+0x12>
	{
		TIM1_TRG_COM_Callback_Ptr();
 8002390:	4b02      	ldr	r3, [pc, #8]	; (800239c <TIM1_TRG_COM_IRQHandler+0x18>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4798      	blx	r3
	}
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000840 	.word	0x20000840

080023a0 <TIM1_CC_IRQHandler>:
 * @brief  TIM1 capture/compare interrupt handler.
 * @param  None
 * @retval None
 */
void TIM1_CC_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
	if (TIM1_CC_Callback_Ptr != 0)
 80023a4:	4b04      	ldr	r3, [pc, #16]	; (80023b8 <TIM1_CC_IRQHandler+0x18>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d002      	beq.n	80023b2 <TIM1_CC_IRQHandler+0x12>
	{
		TIM1_CC_Callback_Ptr();
 80023ac:	4b02      	ldr	r3, [pc, #8]	; (80023b8 <TIM1_CC_IRQHandler+0x18>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4798      	blx	r3
	}
}
 80023b2:	bf00      	nop
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	20000844 	.word	0x20000844

080023bc <TIM2_IRQHandler>:
 * @brief  TIM2 interrupt handler.
 * @param  None
 * @retval None
 */
void TIM2_IRQHandler(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
	if (TIM3_Callback_Ptr != 0)
 80023c0:	4b04      	ldr	r3, [pc, #16]	; (80023d4 <TIM2_IRQHandler+0x18>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d002      	beq.n	80023ce <TIM2_IRQHandler+0x12>
	{
		TIM2_Callback_Ptr();
 80023c8:	4b03      	ldr	r3, [pc, #12]	; (80023d8 <TIM2_IRQHandler+0x1c>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4798      	blx	r3
	}
}
 80023ce:	bf00      	nop
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	2000084c 	.word	0x2000084c
 80023d8:	20000848 	.word	0x20000848

080023dc <TIM3_IRQHandler>:
 * @brief  TIM3 interrupt handler.
 * @param  None
 * @retval None
 */
void TIM3_IRQHandler(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0

	if (TIM3_Callback_Ptr != 0)
 80023e0:	4b04      	ldr	r3, [pc, #16]	; (80023f4 <TIM3_IRQHandler+0x18>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d002      	beq.n	80023ee <TIM3_IRQHandler+0x12>
	{
		TIM3_Callback_Ptr();
 80023e8:	4b02      	ldr	r3, [pc, #8]	; (80023f4 <TIM3_IRQHandler+0x18>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4798      	blx	r3
	}

}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000084c 	.word	0x2000084c

080023f8 <main>:
 */

#include "../APP/APP_interface.h"

int main()
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
	APP_Init();
 80023fc:	f7fe ffaa 	bl	8001354 <APP_Init>
	APP_IC_Start();
 8002400:	f7fe ffb8 	bl	8001374 <APP_IC_Start>
	APP_PWM_Start(79, 600);
 8002404:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002408:	204f      	movs	r0, #79	; 0x4f
 800240a:	f7fe ffd3 	bl	80013b4 <APP_PWM_Start>
	APP_GLCD_Print_Init();
 800240e:	f7fe ffe1 	bl	80013d4 <APP_GLCD_Print_Init>

	while (1)
	{
		APP_GLCD_Update();
 8002412:	f7ff f803 	bl	800141c <APP_GLCD_Update>
 8002416:	e7fc      	b.n	8002412 <main+0x1a>

08002418 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002418:	480d      	ldr	r0, [pc, #52]	; (8002450 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800241a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800241c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002420:	480c      	ldr	r0, [pc, #48]	; (8002454 <LoopForever+0x6>)
  ldr r1, =_edata
 8002422:	490d      	ldr	r1, [pc, #52]	; (8002458 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002424:	4a0d      	ldr	r2, [pc, #52]	; (800245c <LoopForever+0xe>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0a      	ldr	r2, [pc, #40]	; (8002460 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002438:	4c0a      	ldr	r4, [pc, #40]	; (8002464 <LoopForever+0x16>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8002446:	f000 f811 	bl	800246c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800244a:	f7ff ffd5 	bl	80023f8 <main>

0800244e <LoopForever>:

LoopForever:
    b LoopForever
 800244e:	e7fe      	b.n	800244e <LoopForever>
  ldr   r0, =_estack
 8002450:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8002454:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002458:	200007f8 	.word	0x200007f8
  ldr r2, =_sidata
 800245c:	080024f8 	.word	0x080024f8
  ldr r2, =_sbss
 8002460:	200007f8 	.word	0x200007f8
  ldr r4, =_ebss
 8002464:	20000850 	.word	0x20000850

08002468 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002468:	e7fe      	b.n	8002468 <ADC1_2_IRQHandler>
	...

0800246c <__libc_init_array>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	2500      	movs	r5, #0
 8002470:	4e0c      	ldr	r6, [pc, #48]	; (80024a4 <__libc_init_array+0x38>)
 8002472:	4c0d      	ldr	r4, [pc, #52]	; (80024a8 <__libc_init_array+0x3c>)
 8002474:	1ba4      	subs	r4, r4, r6
 8002476:	10a4      	asrs	r4, r4, #2
 8002478:	42a5      	cmp	r5, r4
 800247a:	d109      	bne.n	8002490 <__libc_init_array+0x24>
 800247c:	f000 f81a 	bl	80024b4 <_init>
 8002480:	2500      	movs	r5, #0
 8002482:	4e0a      	ldr	r6, [pc, #40]	; (80024ac <__libc_init_array+0x40>)
 8002484:	4c0a      	ldr	r4, [pc, #40]	; (80024b0 <__libc_init_array+0x44>)
 8002486:	1ba4      	subs	r4, r4, r6
 8002488:	10a4      	asrs	r4, r4, #2
 800248a:	42a5      	cmp	r5, r4
 800248c:	d105      	bne.n	800249a <__libc_init_array+0x2e>
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002494:	4798      	blx	r3
 8002496:	3501      	adds	r5, #1
 8002498:	e7ee      	b.n	8002478 <__libc_init_array+0xc>
 800249a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800249e:	4798      	blx	r3
 80024a0:	3501      	adds	r5, #1
 80024a2:	e7f2      	b.n	800248a <__libc_init_array+0x1e>
 80024a4:	080024f0 	.word	0x080024f0
 80024a8:	080024f0 	.word	0x080024f0
 80024ac:	080024f0 	.word	0x080024f0
 80024b0:	080024f4 	.word	0x080024f4

080024b4 <_init>:
 80024b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024b6:	bf00      	nop
 80024b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ba:	bc08      	pop	{r3}
 80024bc:	469e      	mov	lr, r3
 80024be:	4770      	bx	lr

080024c0 <_fini>:
 80024c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c2:	bf00      	nop
 80024c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024c6:	bc08      	pop	{r3}
 80024c8:	469e      	mov	lr, r3
 80024ca:	4770      	bx	lr
