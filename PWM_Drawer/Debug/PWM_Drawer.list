
PWM_Drawer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000220c  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800233c  0800233c  0001233c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002360  08002360  000207f8  2**0
                  CONTENTS
  4 .ARM          00000000  08002360  08002360  000207f8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002360  08002360  000207f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002360  08002360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002364  08002364  00012364  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000007f8  20000000  08002368  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000058  200007f8  08002b60  000207f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000850  08002b60  00020850  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000207f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001a50  00000000  00000000  00020821  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000006f6  00000000  00000000  00022271  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000250  00000000  00000000  00022968  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000001e8  00000000  00000000  00022bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000010e7  00000000  00000000  00022da0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000cd4  00000000  00000000  00023e87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004828  00000000  00000000  00024b5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00029383  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a54  00000000  00000000  00029400  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	200007f8 	.word	0x200007f8
 800014c:	00000000 	.word	0x00000000
 8000150:	08002324 	.word	0x08002324

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	200007fc 	.word	0x200007fc
 800016c:	08002324 	.word	0x08002324

08000170 <__aeabi_drsub>:
 8000170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000174:	e002      	b.n	800017c <__adddf3>
 8000176:	bf00      	nop

08000178 <__aeabi_dsub>:
 8000178:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800017c <__adddf3>:
 800017c:	b530      	push	{r4, r5, lr}
 800017e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000182:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000186:	ea94 0f05 	teq	r4, r5
 800018a:	bf08      	it	eq
 800018c:	ea90 0f02 	teqeq	r0, r2
 8000190:	bf1f      	itttt	ne
 8000192:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000196:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800019e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a2:	f000 80e2 	beq.w	800036a <__adddf3+0x1ee>
 80001a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ae:	bfb8      	it	lt
 80001b0:	426d      	neglt	r5, r5
 80001b2:	dd0c      	ble.n	80001ce <__adddf3+0x52>
 80001b4:	442c      	add	r4, r5
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	ea82 0000 	eor.w	r0, r2, r0
 80001c2:	ea83 0101 	eor.w	r1, r3, r1
 80001c6:	ea80 0202 	eor.w	r2, r0, r2
 80001ca:	ea81 0303 	eor.w	r3, r1, r3
 80001ce:	2d36      	cmp	r5, #54	; 0x36
 80001d0:	bf88      	it	hi
 80001d2:	bd30      	pophi	{r4, r5, pc}
 80001d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e4:	d002      	beq.n	80001ec <__adddf3+0x70>
 80001e6:	4240      	negs	r0, r0
 80001e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001f8:	d002      	beq.n	8000200 <__adddf3+0x84>
 80001fa:	4252      	negs	r2, r2
 80001fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000200:	ea94 0f05 	teq	r4, r5
 8000204:	f000 80a7 	beq.w	8000356 <__adddf3+0x1da>
 8000208:	f1a4 0401 	sub.w	r4, r4, #1
 800020c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000210:	db0d      	blt.n	800022e <__adddf3+0xb2>
 8000212:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000216:	fa22 f205 	lsr.w	r2, r2, r5
 800021a:	1880      	adds	r0, r0, r2
 800021c:	f141 0100 	adc.w	r1, r1, #0
 8000220:	fa03 f20e 	lsl.w	r2, r3, lr
 8000224:	1880      	adds	r0, r0, r2
 8000226:	fa43 f305 	asr.w	r3, r3, r5
 800022a:	4159      	adcs	r1, r3
 800022c:	e00e      	b.n	800024c <__adddf3+0xd0>
 800022e:	f1a5 0520 	sub.w	r5, r5, #32
 8000232:	f10e 0e20 	add.w	lr, lr, #32
 8000236:	2a01      	cmp	r2, #1
 8000238:	fa03 fc0e 	lsl.w	ip, r3, lr
 800023c:	bf28      	it	cs
 800023e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	18c0      	adds	r0, r0, r3
 8000248:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800024c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000250:	d507      	bpl.n	8000262 <__adddf3+0xe6>
 8000252:	f04f 0e00 	mov.w	lr, #0
 8000256:	f1dc 0c00 	rsbs	ip, ip, #0
 800025a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800025e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000262:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000266:	d31b      	bcc.n	80002a0 <__adddf3+0x124>
 8000268:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800026c:	d30c      	bcc.n	8000288 <__adddf3+0x10c>
 800026e:	0849      	lsrs	r1, r1, #1
 8000270:	ea5f 0030 	movs.w	r0, r0, rrx
 8000274:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000278:	f104 0401 	add.w	r4, r4, #1
 800027c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000280:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000284:	f080 809a 	bcs.w	80003bc <__adddf3+0x240>
 8000288:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800028c:	bf08      	it	eq
 800028e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000292:	f150 0000 	adcs.w	r0, r0, #0
 8000296:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029a:	ea41 0105 	orr.w	r1, r1, r5
 800029e:	bd30      	pop	{r4, r5, pc}
 80002a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a4:	4140      	adcs	r0, r0
 80002a6:	eb41 0101 	adc.w	r1, r1, r1
 80002aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80002ae:	f1a4 0401 	sub.w	r4, r4, #1
 80002b2:	d1e9      	bne.n	8000288 <__adddf3+0x10c>
 80002b4:	f091 0f00 	teq	r1, #0
 80002b8:	bf04      	itt	eq
 80002ba:	4601      	moveq	r1, r0
 80002bc:	2000      	moveq	r0, #0
 80002be:	fab1 f381 	clz	r3, r1
 80002c2:	bf08      	it	eq
 80002c4:	3320      	addeq	r3, #32
 80002c6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ca:	f1b3 0220 	subs.w	r2, r3, #32
 80002ce:	da0c      	bge.n	80002ea <__adddf3+0x16e>
 80002d0:	320c      	adds	r2, #12
 80002d2:	dd08      	ble.n	80002e6 <__adddf3+0x16a>
 80002d4:	f102 0c14 	add.w	ip, r2, #20
 80002d8:	f1c2 020c 	rsb	r2, r2, #12
 80002dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e0:	fa21 f102 	lsr.w	r1, r1, r2
 80002e4:	e00c      	b.n	8000300 <__adddf3+0x184>
 80002e6:	f102 0214 	add.w	r2, r2, #20
 80002ea:	bfd8      	it	le
 80002ec:	f1c2 0c20 	rsble	ip, r2, #32
 80002f0:	fa01 f102 	lsl.w	r1, r1, r2
 80002f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002f8:	bfdc      	itt	le
 80002fa:	ea41 010c 	orrle.w	r1, r1, ip
 80002fe:	4090      	lslle	r0, r2
 8000300:	1ae4      	subs	r4, r4, r3
 8000302:	bfa2      	ittt	ge
 8000304:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000308:	4329      	orrge	r1, r5
 800030a:	bd30      	popge	{r4, r5, pc}
 800030c:	ea6f 0404 	mvn.w	r4, r4
 8000310:	3c1f      	subs	r4, #31
 8000312:	da1c      	bge.n	800034e <__adddf3+0x1d2>
 8000314:	340c      	adds	r4, #12
 8000316:	dc0e      	bgt.n	8000336 <__adddf3+0x1ba>
 8000318:	f104 0414 	add.w	r4, r4, #20
 800031c:	f1c4 0220 	rsb	r2, r4, #32
 8000320:	fa20 f004 	lsr.w	r0, r0, r4
 8000324:	fa01 f302 	lsl.w	r3, r1, r2
 8000328:	ea40 0003 	orr.w	r0, r0, r3
 800032c:	fa21 f304 	lsr.w	r3, r1, r4
 8000330:	ea45 0103 	orr.w	r1, r5, r3
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f1c4 040c 	rsb	r4, r4, #12
 800033a:	f1c4 0220 	rsb	r2, r4, #32
 800033e:	fa20 f002 	lsr.w	r0, r0, r2
 8000342:	fa01 f304 	lsl.w	r3, r1, r4
 8000346:	ea40 0003 	orr.w	r0, r0, r3
 800034a:	4629      	mov	r1, r5
 800034c:	bd30      	pop	{r4, r5, pc}
 800034e:	fa21 f004 	lsr.w	r0, r1, r4
 8000352:	4629      	mov	r1, r5
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f094 0f00 	teq	r4, #0
 800035a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800035e:	bf06      	itte	eq
 8000360:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000364:	3401      	addeq	r4, #1
 8000366:	3d01      	subne	r5, #1
 8000368:	e74e      	b.n	8000208 <__adddf3+0x8c>
 800036a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800036e:	bf18      	it	ne
 8000370:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000374:	d029      	beq.n	80003ca <__adddf3+0x24e>
 8000376:	ea94 0f05 	teq	r4, r5
 800037a:	bf08      	it	eq
 800037c:	ea90 0f02 	teqeq	r0, r2
 8000380:	d005      	beq.n	800038e <__adddf3+0x212>
 8000382:	ea54 0c00 	orrs.w	ip, r4, r0
 8000386:	bf04      	itt	eq
 8000388:	4619      	moveq	r1, r3
 800038a:	4610      	moveq	r0, r2
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	ea91 0f03 	teq	r1, r3
 8000392:	bf1e      	ittt	ne
 8000394:	2100      	movne	r1, #0
 8000396:	2000      	movne	r0, #0
 8000398:	bd30      	popne	{r4, r5, pc}
 800039a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800039e:	d105      	bne.n	80003ac <__adddf3+0x230>
 80003a0:	0040      	lsls	r0, r0, #1
 80003a2:	4149      	adcs	r1, r1
 80003a4:	bf28      	it	cs
 80003a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003aa:	bd30      	pop	{r4, r5, pc}
 80003ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003b0:	bf3c      	itt	cc
 80003b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003b6:	bd30      	popcc	{r4, r5, pc}
 80003b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003c4:	f04f 0000 	mov.w	r0, #0
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf1a      	itte	ne
 80003d0:	4619      	movne	r1, r3
 80003d2:	4610      	movne	r0, r2
 80003d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003d8:	bf1c      	itt	ne
 80003da:	460b      	movne	r3, r1
 80003dc:	4602      	movne	r2, r0
 80003de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e2:	bf06      	itte	eq
 80003e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003e8:	ea91 0f03 	teqeq	r1, r3
 80003ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003f0:	bd30      	pop	{r4, r5, pc}
 80003f2:	bf00      	nop

080003f4 <__aeabi_ui2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f04f 0500 	mov.w	r5, #0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e750      	b.n	80002b4 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_i2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	f04f 0100 	mov.w	r1, #0
 8000434:	e73e      	b.n	80002b4 <__adddf3+0x138>
 8000436:	bf00      	nop

08000438 <__aeabi_f2d>:
 8000438:	0042      	lsls	r2, r0, #1
 800043a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800043e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000442:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000446:	bf1f      	itttt	ne
 8000448:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800044c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000450:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000454:	4770      	bxne	lr
 8000456:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800045a:	bf08      	it	eq
 800045c:	4770      	bxeq	lr
 800045e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000462:	bf04      	itt	eq
 8000464:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000468:	4770      	bxeq	lr
 800046a:	b530      	push	{r4, r5, lr}
 800046c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000470:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000474:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000478:	e71c      	b.n	80002b4 <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_ul2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f04f 0500 	mov.w	r5, #0
 800048a:	e00a      	b.n	80004a2 <__aeabi_l2d+0x16>

0800048c <__aeabi_l2d>:
 800048c:	ea50 0201 	orrs.w	r2, r0, r1
 8000490:	bf08      	it	eq
 8000492:	4770      	bxeq	lr
 8000494:	b530      	push	{r4, r5, lr}
 8000496:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800049a:	d502      	bpl.n	80004a2 <__aeabi_l2d+0x16>
 800049c:	4240      	negs	r0, r0
 800049e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ae:	f43f aed8 	beq.w	8000262 <__adddf3+0xe6>
 80004b2:	f04f 0203 	mov.w	r2, #3
 80004b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004ba:	bf18      	it	ne
 80004bc:	3203      	addne	r2, #3
 80004be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c2:	bf18      	it	ne
 80004c4:	3203      	addne	r2, #3
 80004c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d2:	fa20 f002 	lsr.w	r0, r0, r2
 80004d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004da:	ea40 000e 	orr.w	r0, r0, lr
 80004de:	fa21 f102 	lsr.w	r1, r1, r2
 80004e2:	4414      	add	r4, r2
 80004e4:	e6bd      	b.n	8000262 <__adddf3+0xe6>
 80004e6:	bf00      	nop

080004e8 <__aeabi_dmul>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004f6:	bf1d      	ittte	ne
 80004f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004fc:	ea94 0f0c 	teqne	r4, ip
 8000500:	ea95 0f0c 	teqne	r5, ip
 8000504:	f000 f8de 	bleq	80006c4 <__aeabi_dmul+0x1dc>
 8000508:	442c      	add	r4, r5
 800050a:	ea81 0603 	eor.w	r6, r1, r3
 800050e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000512:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000516:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051a:	bf18      	it	ne
 800051c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000520:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000524:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000528:	d038      	beq.n	800059c <__aeabi_dmul+0xb4>
 800052a:	fba0 ce02 	umull	ip, lr, r0, r2
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000536:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800053a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800053e:	f04f 0600 	mov.w	r6, #0
 8000542:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000546:	f09c 0f00 	teq	ip, #0
 800054a:	bf18      	it	ne
 800054c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000550:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000554:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000558:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800055c:	d204      	bcs.n	8000568 <__aeabi_dmul+0x80>
 800055e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000562:	416d      	adcs	r5, r5
 8000564:	eb46 0606 	adc.w	r6, r6, r6
 8000568:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800056c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000570:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000574:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000578:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800057c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000580:	bf88      	it	hi
 8000582:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000586:	d81e      	bhi.n	80005c6 <__aeabi_dmul+0xde>
 8000588:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800058c:	bf08      	it	eq
 800058e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000592:	f150 0000 	adcs.w	r0, r0, #0
 8000596:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059a:	bd70      	pop	{r4, r5, r6, pc}
 800059c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005a0:	ea46 0101 	orr.w	r1, r6, r1
 80005a4:	ea40 0002 	orr.w	r0, r0, r2
 80005a8:	ea81 0103 	eor.w	r1, r1, r3
 80005ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b0:	bfc2      	ittt	gt
 80005b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	popgt	{r4, r5, r6, pc}
 80005bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005c0:	f04f 0e00 	mov.w	lr, #0
 80005c4:	3c01      	subs	r4, #1
 80005c6:	f300 80ab 	bgt.w	8000720 <__aeabi_dmul+0x238>
 80005ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ce:	bfde      	ittt	le
 80005d0:	2000      	movle	r0, #0
 80005d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005d6:	bd70      	pople	{r4, r5, r6, pc}
 80005d8:	f1c4 0400 	rsb	r4, r4, #0
 80005dc:	3c20      	subs	r4, #32
 80005de:	da35      	bge.n	800064c <__aeabi_dmul+0x164>
 80005e0:	340c      	adds	r4, #12
 80005e2:	dc1b      	bgt.n	800061c <__aeabi_dmul+0x134>
 80005e4:	f104 0414 	add.w	r4, r4, #20
 80005e8:	f1c4 0520 	rsb	r5, r4, #32
 80005ec:	fa00 f305 	lsl.w	r3, r0, r5
 80005f0:	fa20 f004 	lsr.w	r0, r0, r4
 80005f4:	fa01 f205 	lsl.w	r2, r1, r5
 80005f8:	ea40 0002 	orr.w	r0, r0, r2
 80005fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000600:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000604:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000608:	fa21 f604 	lsr.w	r6, r1, r4
 800060c:	eb42 0106 	adc.w	r1, r2, r6
 8000610:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000614:	bf08      	it	eq
 8000616:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f1c4 040c 	rsb	r4, r4, #12
 8000620:	f1c4 0520 	rsb	r5, r4, #32
 8000624:	fa00 f304 	lsl.w	r3, r0, r4
 8000628:	fa20 f005 	lsr.w	r0, r0, r5
 800062c:	fa01 f204 	lsl.w	r2, r1, r4
 8000630:	ea40 0002 	orr.w	r0, r0, r2
 8000634:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000638:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800063c:	f141 0100 	adc.w	r1, r1, #0
 8000640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000644:	bf08      	it	eq
 8000646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f1c4 0520 	rsb	r5, r4, #32
 8000650:	fa00 f205 	lsl.w	r2, r0, r5
 8000654:	ea4e 0e02 	orr.w	lr, lr, r2
 8000658:	fa20 f304 	lsr.w	r3, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea43 0302 	orr.w	r3, r3, r2
 8000664:	fa21 f004 	lsr.w	r0, r1, r4
 8000668:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800066c:	fa21 f204 	lsr.w	r2, r1, r4
 8000670:	ea20 0002 	bic.w	r0, r0, r2
 8000674:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f094 0f00 	teq	r4, #0
 8000688:	d10f      	bne.n	80006aa <__aeabi_dmul+0x1c2>
 800068a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800068e:	0040      	lsls	r0, r0, #1
 8000690:	eb41 0101 	adc.w	r1, r1, r1
 8000694:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3c01      	subeq	r4, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1a6>
 800069e:	ea41 0106 	orr.w	r1, r1, r6
 80006a2:	f095 0f00 	teq	r5, #0
 80006a6:	bf18      	it	ne
 80006a8:	4770      	bxne	lr
 80006aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ae:	0052      	lsls	r2, r2, #1
 80006b0:	eb43 0303 	adc.w	r3, r3, r3
 80006b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3d01      	subeq	r5, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1c6>
 80006be:	ea43 0306 	orr.w	r3, r3, r6
 80006c2:	4770      	bx	lr
 80006c4:	ea94 0f0c 	teq	r4, ip
 80006c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006cc:	bf18      	it	ne
 80006ce:	ea95 0f0c 	teqne	r5, ip
 80006d2:	d00c      	beq.n	80006ee <__aeabi_dmul+0x206>
 80006d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d8:	bf18      	it	ne
 80006da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006de:	d1d1      	bne.n	8000684 <__aeabi_dmul+0x19c>
 80006e0:	ea81 0103 	eor.w	r1, r1, r3
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	f04f 0000 	mov.w	r0, #0
 80006ec:	bd70      	pop	{r4, r5, r6, pc}
 80006ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f2:	bf06      	itte	eq
 80006f4:	4610      	moveq	r0, r2
 80006f6:	4619      	moveq	r1, r3
 80006f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fc:	d019      	beq.n	8000732 <__aeabi_dmul+0x24a>
 80006fe:	ea94 0f0c 	teq	r4, ip
 8000702:	d102      	bne.n	800070a <__aeabi_dmul+0x222>
 8000704:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000708:	d113      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800070a:	ea95 0f0c 	teq	r5, ip
 800070e:	d105      	bne.n	800071c <__aeabi_dmul+0x234>
 8000710:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000714:	bf1c      	itt	ne
 8000716:	4610      	movne	r0, r2
 8000718:	4619      	movne	r1, r3
 800071a:	d10a      	bne.n	8000732 <__aeabi_dmul+0x24a>
 800071c:	ea81 0103 	eor.w	r1, r1, r3
 8000720:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000724:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000728:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800072c:	f04f 0000 	mov.w	r0, #0
 8000730:	bd70      	pop	{r4, r5, r6, pc}
 8000732:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000736:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800073a:	bd70      	pop	{r4, r5, r6, pc}

0800073c <__aeabi_ddiv>:
 800073c:	b570      	push	{r4, r5, r6, lr}
 800073e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000742:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000746:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074a:	bf1d      	ittte	ne
 800074c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000750:	ea94 0f0c 	teqne	r4, ip
 8000754:	ea95 0f0c 	teqne	r5, ip
 8000758:	f000 f8a7 	bleq	80008aa <__aeabi_ddiv+0x16e>
 800075c:	eba4 0405 	sub.w	r4, r4, r5
 8000760:	ea81 0e03 	eor.w	lr, r1, r3
 8000764:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000768:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800076c:	f000 8088 	beq.w	8000880 <__aeabi_ddiv+0x144>
 8000770:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000774:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000778:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800077c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000780:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000784:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000788:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800078c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000790:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000794:	429d      	cmp	r5, r3
 8000796:	bf08      	it	eq
 8000798:	4296      	cmpeq	r6, r2
 800079a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800079e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007a2:	d202      	bcs.n	80007aa <__aeabi_ddiv+0x6e>
 80007a4:	085b      	lsrs	r3, r3, #1
 80007a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007aa:	1ab6      	subs	r6, r6, r2
 80007ac:	eb65 0503 	sbc.w	r5, r5, r3
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007be:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007c6:	bf22      	ittt	cs
 80007c8:	1ab6      	subcs	r6, r6, r2
 80007ca:	4675      	movcs	r5, lr
 80007cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007de:	bf22      	ittt	cs
 80007e0:	1ab6      	subcs	r6, r6, r2
 80007e2:	4675      	movcs	r5, lr
 80007e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007e8:	085b      	lsrs	r3, r3, #1
 80007ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007f6:	bf22      	ittt	cs
 80007f8:	1ab6      	subcs	r6, r6, r2
 80007fa:	4675      	movcs	r5, lr
 80007fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	ebb6 0e02 	subs.w	lr, r6, r2
 800080a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800080e:	bf22      	ittt	cs
 8000810:	1ab6      	subcs	r6, r6, r2
 8000812:	4675      	movcs	r5, lr
 8000814:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000818:	ea55 0e06 	orrs.w	lr, r5, r6
 800081c:	d018      	beq.n	8000850 <__aeabi_ddiv+0x114>
 800081e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000822:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000826:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800082e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000832:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000836:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083a:	d1c0      	bne.n	80007be <__aeabi_ddiv+0x82>
 800083c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000840:	d10b      	bne.n	800085a <__aeabi_ddiv+0x11e>
 8000842:	ea41 0100 	orr.w	r1, r1, r0
 8000846:	f04f 0000 	mov.w	r0, #0
 800084a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800084e:	e7b6      	b.n	80007be <__aeabi_ddiv+0x82>
 8000850:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000854:	bf04      	itt	eq
 8000856:	4301      	orreq	r1, r0
 8000858:	2000      	moveq	r0, #0
 800085a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800085e:	bf88      	it	hi
 8000860:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000864:	f63f aeaf 	bhi.w	80005c6 <__aeabi_dmul+0xde>
 8000868:	ebb5 0c03 	subs.w	ip, r5, r3
 800086c:	bf04      	itt	eq
 800086e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000872:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000876:	f150 0000 	adcs.w	r0, r0, #0
 800087a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800087e:	bd70      	pop	{r4, r5, r6, pc}
 8000880:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000884:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000888:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800088c:	bfc2      	ittt	gt
 800088e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000892:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000896:	bd70      	popgt	{r4, r5, r6, pc}
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f04f 0e00 	mov.w	lr, #0
 80008a0:	3c01      	subs	r4, #1
 80008a2:	e690      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008a4:	ea45 0e06 	orr.w	lr, r5, r6
 80008a8:	e68d      	b.n	80005c6 <__aeabi_dmul+0xde>
 80008aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	bf08      	it	eq
 80008b4:	ea95 0f0c 	teqeq	r5, ip
 80008b8:	f43f af3b 	beq.w	8000732 <__aeabi_dmul+0x24a>
 80008bc:	ea94 0f0c 	teq	r4, ip
 80008c0:	d10a      	bne.n	80008d8 <__aeabi_ddiv+0x19c>
 80008c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008c6:	f47f af34 	bne.w	8000732 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	f47f af25 	bne.w	800071c <__aeabi_dmul+0x234>
 80008d2:	4610      	mov	r0, r2
 80008d4:	4619      	mov	r1, r3
 80008d6:	e72c      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008d8:	ea95 0f0c 	teq	r5, ip
 80008dc:	d106      	bne.n	80008ec <__aeabi_ddiv+0x1b0>
 80008de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e2:	f43f aefd 	beq.w	80006e0 <__aeabi_dmul+0x1f8>
 80008e6:	4610      	mov	r0, r2
 80008e8:	4619      	mov	r1, r3
 80008ea:	e722      	b.n	8000732 <__aeabi_dmul+0x24a>
 80008ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f0:	bf18      	it	ne
 80008f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008f6:	f47f aec5 	bne.w	8000684 <__aeabi_dmul+0x19c>
 80008fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008fe:	f47f af0d 	bne.w	800071c <__aeabi_dmul+0x234>
 8000902:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000906:	f47f aeeb 	bne.w	80006e0 <__aeabi_dmul+0x1f8>
 800090a:	e712      	b.n	8000732 <__aeabi_dmul+0x24a>

0800090c <__aeabi_d2f>:
 800090c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000910:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000914:	bf24      	itt	cs
 8000916:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800091a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800091e:	d90d      	bls.n	800093c <__aeabi_d2f+0x30>
 8000920:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000924:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000928:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800092c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000930:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000934:	bf08      	it	eq
 8000936:	f020 0001 	biceq.w	r0, r0, #1
 800093a:	4770      	bx	lr
 800093c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000940:	d121      	bne.n	8000986 <__aeabi_d2f+0x7a>
 8000942:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000946:	bfbc      	itt	lt
 8000948:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800094c:	4770      	bxlt	lr
 800094e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000952:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000956:	f1c2 0218 	rsb	r2, r2, #24
 800095a:	f1c2 0c20 	rsb	ip, r2, #32
 800095e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000962:	fa20 f002 	lsr.w	r0, r0, r2
 8000966:	bf18      	it	ne
 8000968:	f040 0001 	orrne.w	r0, r0, #1
 800096c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000970:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000974:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000978:	ea40 000c 	orr.w	r0, r0, ip
 800097c:	fa23 f302 	lsr.w	r3, r3, r2
 8000980:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000984:	e7cc      	b.n	8000920 <__aeabi_d2f+0x14>
 8000986:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800098a:	d107      	bne.n	800099c <__aeabi_d2f+0x90>
 800098c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000990:	bf1e      	ittt	ne
 8000992:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000996:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800099a:	4770      	bxne	lr
 800099c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009a0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop

080009ac <__aeabi_frsub>:
 80009ac:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009b0:	e002      	b.n	80009b8 <__addsf3>
 80009b2:	bf00      	nop

080009b4 <__aeabi_fsub>:
 80009b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b8 <__addsf3>:
 80009b8:	0042      	lsls	r2, r0, #1
 80009ba:	bf1f      	itttt	ne
 80009bc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009c0:	ea92 0f03 	teqne	r2, r3
 80009c4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009cc:	d06a      	beq.n	8000aa4 <__addsf3+0xec>
 80009ce:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009d2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009d6:	bfc1      	itttt	gt
 80009d8:	18d2      	addgt	r2, r2, r3
 80009da:	4041      	eorgt	r1, r0
 80009dc:	4048      	eorgt	r0, r1
 80009de:	4041      	eorgt	r1, r0
 80009e0:	bfb8      	it	lt
 80009e2:	425b      	neglt	r3, r3
 80009e4:	2b19      	cmp	r3, #25
 80009e6:	bf88      	it	hi
 80009e8:	4770      	bxhi	lr
 80009ea:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009ee:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009f2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009f6:	bf18      	it	ne
 80009f8:	4240      	negne	r0, r0
 80009fa:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009fe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000a02:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000a06:	bf18      	it	ne
 8000a08:	4249      	negne	r1, r1
 8000a0a:	ea92 0f03 	teq	r2, r3
 8000a0e:	d03f      	beq.n	8000a90 <__addsf3+0xd8>
 8000a10:	f1a2 0201 	sub.w	r2, r2, #1
 8000a14:	fa41 fc03 	asr.w	ip, r1, r3
 8000a18:	eb10 000c 	adds.w	r0, r0, ip
 8000a1c:	f1c3 0320 	rsb	r3, r3, #32
 8000a20:	fa01 f103 	lsl.w	r1, r1, r3
 8000a24:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a28:	d502      	bpl.n	8000a30 <__addsf3+0x78>
 8000a2a:	4249      	negs	r1, r1
 8000a2c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a30:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a34:	d313      	bcc.n	8000a5e <__addsf3+0xa6>
 8000a36:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a3a:	d306      	bcc.n	8000a4a <__addsf3+0x92>
 8000a3c:	0840      	lsrs	r0, r0, #1
 8000a3e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a42:	f102 0201 	add.w	r2, r2, #1
 8000a46:	2afe      	cmp	r2, #254	; 0xfe
 8000a48:	d251      	bcs.n	8000aee <__addsf3+0x136>
 8000a4a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a52:	bf08      	it	eq
 8000a54:	f020 0001 	biceq.w	r0, r0, #1
 8000a58:	ea40 0003 	orr.w	r0, r0, r3
 8000a5c:	4770      	bx	lr
 8000a5e:	0049      	lsls	r1, r1, #1
 8000a60:	eb40 0000 	adc.w	r0, r0, r0
 8000a64:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000a68:	f1a2 0201 	sub.w	r2, r2, #1
 8000a6c:	d1ed      	bne.n	8000a4a <__addsf3+0x92>
 8000a6e:	fab0 fc80 	clz	ip, r0
 8000a72:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a76:	ebb2 020c 	subs.w	r2, r2, ip
 8000a7a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a7e:	bfaa      	itet	ge
 8000a80:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a84:	4252      	neglt	r2, r2
 8000a86:	4318      	orrge	r0, r3
 8000a88:	bfbc      	itt	lt
 8000a8a:	40d0      	lsrlt	r0, r2
 8000a8c:	4318      	orrlt	r0, r3
 8000a8e:	4770      	bx	lr
 8000a90:	f092 0f00 	teq	r2, #0
 8000a94:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a98:	bf06      	itte	eq
 8000a9a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a9e:	3201      	addeq	r2, #1
 8000aa0:	3b01      	subne	r3, #1
 8000aa2:	e7b5      	b.n	8000a10 <__addsf3+0x58>
 8000aa4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aac:	bf18      	it	ne
 8000aae:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ab2:	d021      	beq.n	8000af8 <__addsf3+0x140>
 8000ab4:	ea92 0f03 	teq	r2, r3
 8000ab8:	d004      	beq.n	8000ac4 <__addsf3+0x10c>
 8000aba:	f092 0f00 	teq	r2, #0
 8000abe:	bf08      	it	eq
 8000ac0:	4608      	moveq	r0, r1
 8000ac2:	4770      	bx	lr
 8000ac4:	ea90 0f01 	teq	r0, r1
 8000ac8:	bf1c      	itt	ne
 8000aca:	2000      	movne	r0, #0
 8000acc:	4770      	bxne	lr
 8000ace:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000ad2:	d104      	bne.n	8000ade <__addsf3+0x126>
 8000ad4:	0040      	lsls	r0, r0, #1
 8000ad6:	bf28      	it	cs
 8000ad8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	4770      	bx	lr
 8000ade:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ae2:	bf3c      	itt	cc
 8000ae4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae8:	4770      	bxcc	lr
 8000aea:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aee:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000af2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000af6:	4770      	bx	lr
 8000af8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000afc:	bf16      	itet	ne
 8000afe:	4608      	movne	r0, r1
 8000b00:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000b04:	4601      	movne	r1, r0
 8000b06:	0242      	lsls	r2, r0, #9
 8000b08:	bf06      	itte	eq
 8000b0a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b0e:	ea90 0f01 	teqeq	r0, r1
 8000b12:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_ui2f>:
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	e004      	b.n	8000b28 <__aeabi_i2f+0x8>
 8000b1e:	bf00      	nop

08000b20 <__aeabi_i2f>:
 8000b20:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b24:	bf48      	it	mi
 8000b26:	4240      	negmi	r0, r0
 8000b28:	ea5f 0c00 	movs.w	ip, r0
 8000b2c:	bf08      	it	eq
 8000b2e:	4770      	bxeq	lr
 8000b30:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b34:	4601      	mov	r1, r0
 8000b36:	f04f 0000 	mov.w	r0, #0
 8000b3a:	e01c      	b.n	8000b76 <__aeabi_l2f+0x2a>

08000b3c <__aeabi_ul2f>:
 8000b3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b40:	bf08      	it	eq
 8000b42:	4770      	bxeq	lr
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e00a      	b.n	8000b60 <__aeabi_l2f+0x14>
 8000b4a:	bf00      	nop

08000b4c <__aeabi_l2f>:
 8000b4c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b50:	bf08      	it	eq
 8000b52:	4770      	bxeq	lr
 8000b54:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b58:	d502      	bpl.n	8000b60 <__aeabi_l2f+0x14>
 8000b5a:	4240      	negs	r0, r0
 8000b5c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b60:	ea5f 0c01 	movs.w	ip, r1
 8000b64:	bf02      	ittt	eq
 8000b66:	4684      	moveq	ip, r0
 8000b68:	4601      	moveq	r1, r0
 8000b6a:	2000      	moveq	r0, #0
 8000b6c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b70:	bf08      	it	eq
 8000b72:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b76:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b7a:	fabc f28c 	clz	r2, ip
 8000b7e:	3a08      	subs	r2, #8
 8000b80:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b84:	db10      	blt.n	8000ba8 <__aeabi_l2f+0x5c>
 8000b86:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b8a:	4463      	add	r3, ip
 8000b8c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b98:	fa20 f202 	lsr.w	r2, r0, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	f020 0001 	biceq.w	r0, r0, #1
 8000ba6:	4770      	bx	lr
 8000ba8:	f102 0220 	add.w	r2, r2, #32
 8000bac:	fa01 fc02 	lsl.w	ip, r1, r2
 8000bb0:	f1c2 0220 	rsb	r2, r2, #32
 8000bb4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb8:	fa21 f202 	lsr.w	r2, r1, r2
 8000bbc:	eb43 0002 	adc.w	r0, r3, r2
 8000bc0:	bf08      	it	eq
 8000bc2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_fmul>:
 8000bc8:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bcc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bd0:	bf1e      	ittt	ne
 8000bd2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bd6:	ea92 0f0c 	teqne	r2, ip
 8000bda:	ea93 0f0c 	teqne	r3, ip
 8000bde:	d06f      	beq.n	8000cc0 <__aeabi_fmul+0xf8>
 8000be0:	441a      	add	r2, r3
 8000be2:	ea80 0c01 	eor.w	ip, r0, r1
 8000be6:	0240      	lsls	r0, r0, #9
 8000be8:	bf18      	it	ne
 8000bea:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bee:	d01e      	beq.n	8000c2e <__aeabi_fmul+0x66>
 8000bf0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bf4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bf8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bfc:	fba0 3101 	umull	r3, r1, r0, r1
 8000c00:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000c04:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c08:	bf3e      	ittt	cc
 8000c0a:	0049      	lslcc	r1, r1, #1
 8000c0c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c10:	005b      	lslcc	r3, r3, #1
 8000c12:	ea40 0001 	orr.w	r0, r0, r1
 8000c16:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c1a:	2afd      	cmp	r2, #253	; 0xfd
 8000c1c:	d81d      	bhi.n	8000c5a <__aeabi_fmul+0x92>
 8000c1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c22:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c26:	bf08      	it	eq
 8000c28:	f020 0001 	biceq.w	r0, r0, #1
 8000c2c:	4770      	bx	lr
 8000c2e:	f090 0f00 	teq	r0, #0
 8000c32:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c36:	bf08      	it	eq
 8000c38:	0249      	lsleq	r1, r1, #9
 8000c3a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c3e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c42:	3a7f      	subs	r2, #127	; 0x7f
 8000c44:	bfc2      	ittt	gt
 8000c46:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c4a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c4e:	4770      	bxgt	lr
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c54:	f04f 0300 	mov.w	r3, #0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	dc5d      	bgt.n	8000d18 <__aeabi_fmul+0x150>
 8000c5c:	f112 0f19 	cmn.w	r2, #25
 8000c60:	bfdc      	itt	le
 8000c62:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c66:	4770      	bxle	lr
 8000c68:	f1c2 0200 	rsb	r2, r2, #0
 8000c6c:	0041      	lsls	r1, r0, #1
 8000c6e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c72:	f1c2 0220 	rsb	r2, r2, #32
 8000c76:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c7a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c7e:	f140 0000 	adc.w	r0, r0, #0
 8000c82:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c86:	bf08      	it	eq
 8000c88:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c8c:	4770      	bx	lr
 8000c8e:	f092 0f00 	teq	r2, #0
 8000c92:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c96:	bf02      	ittt	eq
 8000c98:	0040      	lsleq	r0, r0, #1
 8000c9a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c9e:	3a01      	subeq	r2, #1
 8000ca0:	d0f9      	beq.n	8000c96 <__aeabi_fmul+0xce>
 8000ca2:	ea40 000c 	orr.w	r0, r0, ip
 8000ca6:	f093 0f00 	teq	r3, #0
 8000caa:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000cae:	bf02      	ittt	eq
 8000cb0:	0049      	lsleq	r1, r1, #1
 8000cb2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cb6:	3b01      	subeq	r3, #1
 8000cb8:	d0f9      	beq.n	8000cae <__aeabi_fmul+0xe6>
 8000cba:	ea41 010c 	orr.w	r1, r1, ip
 8000cbe:	e78f      	b.n	8000be0 <__aeabi_fmul+0x18>
 8000cc0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cc4:	ea92 0f0c 	teq	r2, ip
 8000cc8:	bf18      	it	ne
 8000cca:	ea93 0f0c 	teqne	r3, ip
 8000cce:	d00a      	beq.n	8000ce6 <__aeabi_fmul+0x11e>
 8000cd0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000cd4:	bf18      	it	ne
 8000cd6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cda:	d1d8      	bne.n	8000c8e <__aeabi_fmul+0xc6>
 8000cdc:	ea80 0001 	eor.w	r0, r0, r1
 8000ce0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ce4:	4770      	bx	lr
 8000ce6:	f090 0f00 	teq	r0, #0
 8000cea:	bf17      	itett	ne
 8000cec:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cf0:	4608      	moveq	r0, r1
 8000cf2:	f091 0f00 	teqne	r1, #0
 8000cf6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cfa:	d014      	beq.n	8000d26 <__aeabi_fmul+0x15e>
 8000cfc:	ea92 0f0c 	teq	r2, ip
 8000d00:	d101      	bne.n	8000d06 <__aeabi_fmul+0x13e>
 8000d02:	0242      	lsls	r2, r0, #9
 8000d04:	d10f      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d06:	ea93 0f0c 	teq	r3, ip
 8000d0a:	d103      	bne.n	8000d14 <__aeabi_fmul+0x14c>
 8000d0c:	024b      	lsls	r3, r1, #9
 8000d0e:	bf18      	it	ne
 8000d10:	4608      	movne	r0, r1
 8000d12:	d108      	bne.n	8000d26 <__aeabi_fmul+0x15e>
 8000d14:	ea80 0001 	eor.w	r0, r0, r1
 8000d18:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d24:	4770      	bx	lr
 8000d26:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d2a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d2e:	4770      	bx	lr

08000d30 <__aeabi_fdiv>:
 8000d30:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d34:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d38:	bf1e      	ittt	ne
 8000d3a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d3e:	ea92 0f0c 	teqne	r2, ip
 8000d42:	ea93 0f0c 	teqne	r3, ip
 8000d46:	d069      	beq.n	8000e1c <__aeabi_fdiv+0xec>
 8000d48:	eba2 0203 	sub.w	r2, r2, r3
 8000d4c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d50:	0249      	lsls	r1, r1, #9
 8000d52:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d56:	d037      	beq.n	8000dc8 <__aeabi_fdiv+0x98>
 8000d58:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d5c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d60:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d64:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d68:	428b      	cmp	r3, r1
 8000d6a:	bf38      	it	cc
 8000d6c:	005b      	lslcc	r3, r3, #1
 8000d6e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d72:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d76:	428b      	cmp	r3, r1
 8000d78:	bf24      	itt	cs
 8000d7a:	1a5b      	subcs	r3, r3, r1
 8000d7c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d80:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d84:	bf24      	itt	cs
 8000d86:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d8a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d8e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d92:	bf24      	itt	cs
 8000d94:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d98:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d9c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000da0:	bf24      	itt	cs
 8000da2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000da6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000daa:	011b      	lsls	r3, r3, #4
 8000dac:	bf18      	it	ne
 8000dae:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000db2:	d1e0      	bne.n	8000d76 <__aeabi_fdiv+0x46>
 8000db4:	2afd      	cmp	r2, #253	; 0xfd
 8000db6:	f63f af50 	bhi.w	8000c5a <__aeabi_fmul+0x92>
 8000dba:	428b      	cmp	r3, r1
 8000dbc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000dc0:	bf08      	it	eq
 8000dc2:	f020 0001 	biceq.w	r0, r0, #1
 8000dc6:	4770      	bx	lr
 8000dc8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dcc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dd0:	327f      	adds	r2, #127	; 0x7f
 8000dd2:	bfc2      	ittt	gt
 8000dd4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ddc:	4770      	bxgt	lr
 8000dde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000de2:	f04f 0300 	mov.w	r3, #0
 8000de6:	3a01      	subs	r2, #1
 8000de8:	e737      	b.n	8000c5a <__aeabi_fmul+0x92>
 8000dea:	f092 0f00 	teq	r2, #0
 8000dee:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000df2:	bf02      	ittt	eq
 8000df4:	0040      	lsleq	r0, r0, #1
 8000df6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dfa:	3a01      	subeq	r2, #1
 8000dfc:	d0f9      	beq.n	8000df2 <__aeabi_fdiv+0xc2>
 8000dfe:	ea40 000c 	orr.w	r0, r0, ip
 8000e02:	f093 0f00 	teq	r3, #0
 8000e06:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e0a:	bf02      	ittt	eq
 8000e0c:	0049      	lsleq	r1, r1, #1
 8000e0e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e12:	3b01      	subeq	r3, #1
 8000e14:	d0f9      	beq.n	8000e0a <__aeabi_fdiv+0xda>
 8000e16:	ea41 010c 	orr.w	r1, r1, ip
 8000e1a:	e795      	b.n	8000d48 <__aeabi_fdiv+0x18>
 8000e1c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e20:	ea92 0f0c 	teq	r2, ip
 8000e24:	d108      	bne.n	8000e38 <__aeabi_fdiv+0x108>
 8000e26:	0242      	lsls	r2, r0, #9
 8000e28:	f47f af7d 	bne.w	8000d26 <__aeabi_fmul+0x15e>
 8000e2c:	ea93 0f0c 	teq	r3, ip
 8000e30:	f47f af70 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e34:	4608      	mov	r0, r1
 8000e36:	e776      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e38:	ea93 0f0c 	teq	r3, ip
 8000e3c:	d104      	bne.n	8000e48 <__aeabi_fdiv+0x118>
 8000e3e:	024b      	lsls	r3, r1, #9
 8000e40:	f43f af4c 	beq.w	8000cdc <__aeabi_fmul+0x114>
 8000e44:	4608      	mov	r0, r1
 8000e46:	e76e      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e48:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e4c:	bf18      	it	ne
 8000e4e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e52:	d1ca      	bne.n	8000dea <__aeabi_fdiv+0xba>
 8000e54:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e58:	f47f af5c 	bne.w	8000d14 <__aeabi_fmul+0x14c>
 8000e5c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e60:	f47f af3c 	bne.w	8000cdc <__aeabi_fmul+0x114>
 8000e64:	e75f      	b.n	8000d26 <__aeabi_fmul+0x15e>
 8000e66:	bf00      	nop

08000e68 <__gesf2>:
 8000e68:	f04f 3cff 	mov.w	ip, #4294967295
 8000e6c:	e006      	b.n	8000e7c <__cmpsf2+0x4>
 8000e6e:	bf00      	nop

08000e70 <__lesf2>:
 8000e70:	f04f 0c01 	mov.w	ip, #1
 8000e74:	e002      	b.n	8000e7c <__cmpsf2+0x4>
 8000e76:	bf00      	nop

08000e78 <__cmpsf2>:
 8000e78:	f04f 0c01 	mov.w	ip, #1
 8000e7c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e80:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e8c:	bf18      	it	ne
 8000e8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e92:	d011      	beq.n	8000eb8 <__cmpsf2+0x40>
 8000e94:	b001      	add	sp, #4
 8000e96:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e9a:	bf18      	it	ne
 8000e9c:	ea90 0f01 	teqne	r0, r1
 8000ea0:	bf58      	it	pl
 8000ea2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000ea6:	bf88      	it	hi
 8000ea8:	17c8      	asrhi	r0, r1, #31
 8000eaa:	bf38      	it	cc
 8000eac:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000eb0:	bf18      	it	ne
 8000eb2:	f040 0001 	orrne.w	r0, r0, #1
 8000eb6:	4770      	bx	lr
 8000eb8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ebc:	d102      	bne.n	8000ec4 <__cmpsf2+0x4c>
 8000ebe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000ec2:	d105      	bne.n	8000ed0 <__cmpsf2+0x58>
 8000ec4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ec8:	d1e4      	bne.n	8000e94 <__cmpsf2+0x1c>
 8000eca:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ece:	d0e1      	beq.n	8000e94 <__cmpsf2+0x1c>
 8000ed0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ed4:	4770      	bx	lr
 8000ed6:	bf00      	nop

08000ed8 <__aeabi_cfrcmple>:
 8000ed8:	4684      	mov	ip, r0
 8000eda:	4608      	mov	r0, r1
 8000edc:	4661      	mov	r1, ip
 8000ede:	e7ff      	b.n	8000ee0 <__aeabi_cfcmpeq>

08000ee0 <__aeabi_cfcmpeq>:
 8000ee0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000ee2:	f7ff ffc9 	bl	8000e78 <__cmpsf2>
 8000ee6:	2800      	cmp	r0, #0
 8000ee8:	bf48      	it	mi
 8000eea:	f110 0f00 	cmnmi.w	r0, #0
 8000eee:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ef0 <__aeabi_fcmpeq>:
 8000ef0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ef4:	f7ff fff4 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000ef8:	bf0c      	ite	eq
 8000efa:	2001      	moveq	r0, #1
 8000efc:	2000      	movne	r0, #0
 8000efe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f02:	bf00      	nop

08000f04 <__aeabi_fcmplt>:
 8000f04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f08:	f7ff ffea 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000f0c:	bf34      	ite	cc
 8000f0e:	2001      	movcc	r0, #1
 8000f10:	2000      	movcs	r0, #0
 8000f12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f16:	bf00      	nop

08000f18 <__aeabi_fcmple>:
 8000f18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f1c:	f7ff ffe0 	bl	8000ee0 <__aeabi_cfcmpeq>
 8000f20:	bf94      	ite	ls
 8000f22:	2001      	movls	r0, #1
 8000f24:	2000      	movhi	r0, #0
 8000f26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f2a:	bf00      	nop

08000f2c <__aeabi_fcmpge>:
 8000f2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f30:	f7ff ffd2 	bl	8000ed8 <__aeabi_cfrcmple>
 8000f34:	bf94      	ite	ls
 8000f36:	2001      	movls	r0, #1
 8000f38:	2000      	movhi	r0, #0
 8000f3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f3e:	bf00      	nop

08000f40 <__aeabi_fcmpgt>:
 8000f40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f44:	f7ff ffc8 	bl	8000ed8 <__aeabi_cfrcmple>
 8000f48:	bf34      	ite	cc
 8000f4a:	2001      	movcc	r0, #1
 8000f4c:	2000      	movcs	r0, #0
 8000f4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f52:	bf00      	nop

08000f54 <__aeabi_f2iz>:
 8000f54:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f58:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f5c:	d30f      	bcc.n	8000f7e <__aeabi_f2iz+0x2a>
 8000f5e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f62:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f66:	d90d      	bls.n	8000f84 <__aeabi_f2iz+0x30>
 8000f68:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f70:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f74:	fa23 f002 	lsr.w	r0, r3, r2
 8000f78:	bf18      	it	ne
 8000f7a:	4240      	negne	r0, r0
 8000f7c:	4770      	bx	lr
 8000f7e:	f04f 0000 	mov.w	r0, #0
 8000f82:	4770      	bx	lr
 8000f84:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f88:	d101      	bne.n	8000f8e <__aeabi_f2iz+0x3a>
 8000f8a:	0242      	lsls	r2, r0, #9
 8000f8c:	d105      	bne.n	8000f9a <__aeabi_f2iz+0x46>
 8000f8e:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f92:	bf08      	it	eq
 8000f94:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f98:	4770      	bx	lr
 8000f9a:	f04f 0000 	mov.w	r0, #0
 8000f9e:	4770      	bx	lr

08000fa0 <__aeabi_f2uiz>:
 8000fa0:	0042      	lsls	r2, r0, #1
 8000fa2:	d20e      	bcs.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000fa4:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa8:	d30b      	bcc.n	8000fc2 <__aeabi_f2uiz+0x22>
 8000faa:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fae:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fb2:	d409      	bmi.n	8000fc8 <__aeabi_f2uiz+0x28>
 8000fb4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fbc:	fa23 f002 	lsr.w	r0, r3, r2
 8000fc0:	4770      	bx	lr
 8000fc2:	f04f 0000 	mov.w	r0, #0
 8000fc6:	4770      	bx	lr
 8000fc8:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fcc:	d101      	bne.n	8000fd2 <__aeabi_f2uiz+0x32>
 8000fce:	0242      	lsls	r2, r0, #9
 8000fd0:	d102      	bne.n	8000fd8 <__aeabi_f2uiz+0x38>
 8000fd2:	f04f 30ff 	mov.w	r0, #4294967295
 8000fd6:	4770      	bx	lr
 8000fd8:	f04f 0000 	mov.w	r0, #0
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop

08000fe0 <APP_IC_Calculate_Freq_Duty>:
static f32 oldDuty = 0;
static f32 oldPeriod =0;

/* Private functions --------------------------------------------------------*/
static void APP_IC_Calculate_Freq_Duty(void)
{
 8000fe0:	b590      	push	{r4, r7, lr}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
	u32 TIMx_CCRx = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]

	switch (APP_TIM_IC1_CHx)
	{
	case TIM_CH1:
		TIMx_CCRx = APP_TIM_IC1_TIMx->CCR1;
 8000fea:	4b3a      	ldr	r3, [pc, #232]	; (80010d4 <APP_IC_Calculate_Freq_Duty+0xf4>)
 8000fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fee:	607b      	str	r3, [r7, #4]
		break;
 8000ff0:	bf00      	nop
	case TIM_CH4:
		TIMx_CCRx = APP_TIM_IC1_TIMx->CCR4;
		break;
	}

	if (IsFirstCapture == 0)
 8000ff2:	4b39      	ldr	r3, [pc, #228]	; (80010d8 <APP_IC_Calculate_Freq_Duty+0xf8>)
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d106      	bne.n	8001008 <APP_IC_Calculate_Freq_Duty+0x28>
	{
		firstRisingEdgeCount = TIMx_CCRx;
 8000ffa:	4a38      	ldr	r2, [pc, #224]	; (80010dc <APP_IC_Calculate_Freq_Duty+0xfc>)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	6013      	str	r3, [r2, #0]
		IsFirstCapture = 1;
 8001000:	4b35      	ldr	r3, [pc, #212]	; (80010d8 <APP_IC_Calculate_Freq_Duty+0xf8>)
 8001002:	2201      	movs	r2, #1
 8001004:	701a      	strb	r2, [r3, #0]
			frequency = (float)TIM_CLK / (float)risingEdgeDifference;
			duty = (dutydiff * 100 ) / (float)risingEdgeDifference;
			IsFirstCapture = 0;
		}
	}
}
 8001006:	e061      	b.n	80010cc <APP_IC_Calculate_Freq_Duty+0xec>
		secondRisingEdgeCount = TIMx_CCRx;
 8001008:	4a35      	ldr	r2, [pc, #212]	; (80010e0 <APP_IC_Calculate_Freq_Duty+0x100>)
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6013      	str	r3, [r2, #0]
		if (secondRisingEdgeCount > firstRisingEdgeCount)
 800100e:	4b34      	ldr	r3, [pc, #208]	; (80010e0 <APP_IC_Calculate_Freq_Duty+0x100>)
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	4b32      	ldr	r3, [pc, #200]	; (80010dc <APP_IC_Calculate_Freq_Duty+0xfc>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	429a      	cmp	r2, r3
 8001018:	d907      	bls.n	800102a <APP_IC_Calculate_Freq_Duty+0x4a>
			risingEdgeDifference = secondRisingEdgeCount - firstRisingEdgeCount;
 800101a:	4b31      	ldr	r3, [pc, #196]	; (80010e0 <APP_IC_Calculate_Freq_Duty+0x100>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4b2f      	ldr	r3, [pc, #188]	; (80010dc <APP_IC_Calculate_Freq_Duty+0xfc>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	4a2f      	ldr	r2, [pc, #188]	; (80010e4 <APP_IC_Calculate_Freq_Duty+0x104>)
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	e009      	b.n	800103e <APP_IC_Calculate_Freq_Duty+0x5e>
			risingEdgeDifference = (TIM_MAX_PERIOD - firstRisingEdgeCount) + secondRisingEdgeCount;
 800102a:	4b2d      	ldr	r3, [pc, #180]	; (80010e0 <APP_IC_Calculate_Freq_Duty+0x100>)
 800102c:	681a      	ldr	r2, [r3, #0]
 800102e:	4b2b      	ldr	r3, [pc, #172]	; (80010dc <APP_IC_Calculate_Freq_Duty+0xfc>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	1ad3      	subs	r3, r2, r3
 8001034:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001038:	33ff      	adds	r3, #255	; 0xff
 800103a:	4a2a      	ldr	r2, [pc, #168]	; (80010e4 <APP_IC_Calculate_Freq_Duty+0x104>)
 800103c:	6013      	str	r3, [r2, #0]
		if (APP_TIM_IC2_TIMx->CCR2 > firstRisingEdgeCount)
 800103e:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <APP_IC_Calculate_Freq_Duty+0x108>)
 8001040:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001042:	4b26      	ldr	r3, [pc, #152]	; (80010dc <APP_IC_Calculate_Freq_Duty+0xfc>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	429a      	cmp	r2, r3
 8001048:	d907      	bls.n	800105a <APP_IC_Calculate_Freq_Duty+0x7a>
			dutydiff = APP_TIM_IC2_TIMx->CCR2 - firstRisingEdgeCount;
 800104a:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <APP_IC_Calculate_Freq_Duty+0x108>)
 800104c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800104e:	4b23      	ldr	r3, [pc, #140]	; (80010dc <APP_IC_Calculate_Freq_Duty+0xfc>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	1ad3      	subs	r3, r2, r3
 8001054:	4a25      	ldr	r2, [pc, #148]	; (80010ec <APP_IC_Calculate_Freq_Duty+0x10c>)
 8001056:	6013      	str	r3, [r2, #0]
 8001058:	e009      	b.n	800106e <APP_IC_Calculate_Freq_Duty+0x8e>
			dutydiff = (TIM_MAX_PERIOD - firstRisingEdgeCount) + APP_TIM_IC2_TIMx->CCR2;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <APP_IC_Calculate_Freq_Duty+0x108>)
 800105c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800105e:	4b1f      	ldr	r3, [pc, #124]	; (80010dc <APP_IC_Calculate_Freq_Duty+0xfc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001068:	33ff      	adds	r3, #255	; 0xff
 800106a:	4a20      	ldr	r2, [pc, #128]	; (80010ec <APP_IC_Calculate_Freq_Duty+0x10c>)
 800106c:	6013      	str	r3, [r2, #0]
		if (risingEdgeDifference > 1)
 800106e:	4b1d      	ldr	r3, [pc, #116]	; (80010e4 <APP_IC_Calculate_Freq_Duty+0x104>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d92a      	bls.n	80010cc <APP_IC_Calculate_Freq_Duty+0xec>
			frequency = (float)TIM_CLK / (float)risingEdgeDifference;
 8001076:	4b1b      	ldr	r3, [pc, #108]	; (80010e4 <APP_IC_Calculate_Freq_Duty+0x104>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fd4c 	bl	8000b18 <__aeabi_ui2f>
 8001080:	4603      	mov	r3, r0
 8001082:	4619      	mov	r1, r3
 8001084:	481a      	ldr	r0, [pc, #104]	; (80010f0 <APP_IC_Calculate_Freq_Duty+0x110>)
 8001086:	f7ff fe53 	bl	8000d30 <__aeabi_fdiv>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b19      	ldr	r3, [pc, #100]	; (80010f4 <APP_IC_Calculate_Freq_Duty+0x114>)
 8001090:	601a      	str	r2, [r3, #0]
			duty = (dutydiff * 100 ) / (float)risingEdgeDifference;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <APP_IC_Calculate_Freq_Duty+0x10c>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2264      	movs	r2, #100	; 0x64
 8001098:	fb02 f303 	mul.w	r3, r2, r3
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff fd3b 	bl	8000b18 <__aeabi_ui2f>
 80010a2:	4604      	mov	r4, r0
 80010a4:	4b0f      	ldr	r3, [pc, #60]	; (80010e4 <APP_IC_Calculate_Freq_Duty+0x104>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fd35 	bl	8000b18 <__aeabi_ui2f>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4619      	mov	r1, r3
 80010b2:	4620      	mov	r0, r4
 80010b4:	f7ff fe3c 	bl	8000d30 <__aeabi_fdiv>
 80010b8:	4603      	mov	r3, r0
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff ff70 	bl	8000fa0 <__aeabi_f2uiz>
 80010c0:	4602      	mov	r2, r0
 80010c2:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <APP_IC_Calculate_Freq_Duty+0x118>)
 80010c4:	601a      	str	r2, [r3, #0]
			IsFirstCapture = 0;
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <APP_IC_Calculate_Freq_Duty+0xf8>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd90      	pop	{r4, r7, pc}
 80010d4:	40000400 	.word	0x40000400
 80010d8:	20000814 	.word	0x20000814
 80010dc:	20000818 	.word	0x20000818
 80010e0:	2000081c 	.word	0x2000081c
 80010e4:	20000820 	.word	0x20000820
 80010e8:	40012c00 	.word	0x40012c00
 80010ec:	20000824 	.word	0x20000824
 80010f0:	4af42400 	.word	0x4af42400
 80010f4:	20000828 	.word	0x20000828
 80010f8:	2000082c 	.word	0x2000082c

080010fc <APP_GLCD_DrawPWM>:


static void APP_GLCD_DrawPWM(u32 duty)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
	for (int i=APP_GLCD_HIGH_LINE ; i<=APP_GLCD_LOW_LINE ; ++i)
 8001104:	2305      	movs	r3, #5
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	e007      	b.n	800111a <APP_GLCD_DrawPWM+0x1e>
	{
		GLCD_ClearLine(i);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 fd6a 	bl	8001be8 <GLCD_ClearLine>
	for (int i=APP_GLCD_HIGH_LINE ; i<=APP_GLCD_LOW_LINE ; ++i)
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	3301      	adds	r3, #1
 8001118:	60fb      	str	r3, [r7, #12]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	2b07      	cmp	r3, #7
 800111e:	ddf4      	ble.n	800110a <APP_GLCD_DrawPWM+0xe>
	}
	int dutyXrange = (duty * 60) / 100;
 8001120:	687a      	ldr	r2, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	011b      	lsls	r3, r3, #4
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	461a      	mov	r2, r3
 800112c:	4b26      	ldr	r3, [pc, #152]	; (80011c8 <APP_GLCD_DrawPWM+0xcc>)
 800112e:	fba3 2302 	umull	r2, r3, r3, r2
 8001132:	095b      	lsrs	r3, r3, #5
 8001134:	60bb      	str	r3, [r7, #8]

	GLCD_DrawHLine(0, APP_GLCD_CYCLE_1_START_X, APP_GLCD_LOW_LINE);
 8001136:	2207      	movs	r2, #7
 8001138:	2107      	movs	r1, #7
 800113a:	2000      	movs	r0, #0
 800113c:	f000 fd9c 	bl	8001c78 <GLCD_DrawHLine>

	// Drawing the first cycle
	GLCD_DrawVLine(APP_GLCD_HIGH_LINE, APP_GLCD_LOW_LINE, APP_GLCD_CYCLE_1_START_X);
 8001140:	2207      	movs	r2, #7
 8001142:	2107      	movs	r1, #7
 8001144:	2005      	movs	r0, #5
 8001146:	f000 fdb9 	bl	8001cbc <GLCD_DrawVLine>
	GLCD_DrawHLine(APP_GLCD_CYCLE_1_START_X + 1, (APP_GLCD_CYCLE_1_START_X + dutyXrange), APP_GLCD_HIGH_LINE);
 800114a:	68bb      	ldr	r3, [r7, #8]
 800114c:	b2db      	uxtb	r3, r3
 800114e:	3307      	adds	r3, #7
 8001150:	b2db      	uxtb	r3, r3
 8001152:	2205      	movs	r2, #5
 8001154:	4619      	mov	r1, r3
 8001156:	2008      	movs	r0, #8
 8001158:	f000 fd8e 	bl	8001c78 <GLCD_DrawHLine>
	GLCD_DrawVLine(APP_GLCD_HIGH_LINE, APP_GLCD_LOW_LINE, APP_GLCD_CYCLE_1_START_X + dutyXrange);
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3307      	adds	r3, #7
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	2107      	movs	r1, #7
 8001168:	2005      	movs	r0, #5
 800116a:	f000 fda7 	bl	8001cbc <GLCD_DrawVLine>
	GLCD_DrawHLine(APP_GLCD_CYCLE_1_START_X + dutyXrange, APP_GLCD_CYCLE_2_START_X, APP_GLCD_LOW_LINE);
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	b2db      	uxtb	r3, r3
 8001172:	3307      	adds	r3, #7
 8001174:	b2db      	uxtb	r3, r3
 8001176:	2207      	movs	r2, #7
 8001178:	2143      	movs	r1, #67	; 0x43
 800117a:	4618      	mov	r0, r3
 800117c:	f000 fd7c 	bl	8001c78 <GLCD_DrawHLine>

	// Drawing the second cycle
	GLCD_DrawVLine(APP_GLCD_HIGH_LINE, APP_GLCD_LOW_LINE, APP_GLCD_CYCLE_2_START_X);
 8001180:	2243      	movs	r2, #67	; 0x43
 8001182:	2107      	movs	r1, #7
 8001184:	2005      	movs	r0, #5
 8001186:	f000 fd99 	bl	8001cbc <GLCD_DrawVLine>
	GLCD_DrawHLine(APP_GLCD_CYCLE_2_START_X + 1, (APP_GLCD_CYCLE_2_START_X + dutyXrange), APP_GLCD_HIGH_LINE);
 800118a:	68bb      	ldr	r3, [r7, #8]
 800118c:	b2db      	uxtb	r3, r3
 800118e:	3343      	adds	r3, #67	; 0x43
 8001190:	b2db      	uxtb	r3, r3
 8001192:	2205      	movs	r2, #5
 8001194:	4619      	mov	r1, r3
 8001196:	2044      	movs	r0, #68	; 0x44
 8001198:	f000 fd6e 	bl	8001c78 <GLCD_DrawHLine>
	GLCD_DrawVLine(APP_GLCD_HIGH_LINE, APP_GLCD_LOW_LINE, APP_GLCD_CYCLE_2_START_X + dutyXrange);
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	b2db      	uxtb	r3, r3
 80011a0:	3343      	adds	r3, #67	; 0x43
 80011a2:	b2db      	uxtb	r3, r3
 80011a4:	461a      	mov	r2, r3
 80011a6:	2107      	movs	r1, #7
 80011a8:	2005      	movs	r0, #5
 80011aa:	f000 fd87 	bl	8001cbc <GLCD_DrawVLine>
	GLCD_DrawHLine(APP_GLCD_CYCLE_2_START_X + dutyXrange, APP_GLCD_CYCLE_2_END_X, APP_GLCD_LOW_LINE);
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	3343      	adds	r3, #67	; 0x43
 80011b4:	b2db      	uxtb	r3, r3
 80011b6:	2207      	movs	r2, #7
 80011b8:	217f      	movs	r1, #127	; 0x7f
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fd5c 	bl	8001c78 <GLCD_DrawHLine>
}
 80011c0:	bf00      	nop
 80011c2:	3710      	adds	r7, #16
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bd80      	pop	{r7, pc}
 80011c8:	51eb851f 	.word	0x51eb851f

080011cc <APP_GLCD_PrintFreq>:

static void APP_GLCD_PrintFreq()
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
	GLCD_ClearLine(APP_GLCD_FREQ_LINE);
 80011d2:	2000      	movs	r0, #0
 80011d4:	f000 fd08 	bl	8001be8 <GLCD_ClearLine>
	f32 glcdFreq = APP_IC_GetFreq_KHZ();
 80011d8:	f000 f8a4 	bl	8001324 <APP_IC_GetFreq_KHZ>
 80011dc:	6078      	str	r0, [r7, #4]
	GLCD_PrintString("FREQ:", 0, APP_GLCD_FREQ_LINE);
 80011de:	2200      	movs	r2, #0
 80011e0:	2100      	movs	r1, #0
 80011e2:	4808      	ldr	r0, [pc, #32]	; (8001204 <APP_GLCD_PrintFreq+0x38>)
 80011e4:	f000 fbd4 	bl	8001990 <GLCD_PrintString>
	GLCD_PrintFloat(glcdFreq, 35, APP_GLCD_FREQ_LINE);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2123      	movs	r1, #35	; 0x23
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f000 fc5f 	bl	8001ab0 <GLCD_PrintFloat>
	GLCD_PrintString("KHZ", 90, APP_GLCD_FREQ_LINE);
 80011f2:	2200      	movs	r2, #0
 80011f4:	215a      	movs	r1, #90	; 0x5a
 80011f6:	4804      	ldr	r0, [pc, #16]	; (8001208 <APP_GLCD_PrintFreq+0x3c>)
 80011f8:	f000 fbca 	bl	8001990 <GLCD_PrintString>
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	0800233c 	.word	0x0800233c
 8001208:	08002344 	.word	0x08002344

0800120c <APP_GLCD_PrintDuty>:

static void APP_GLCD_PrintDuty()
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
	GLCD_ClearLine(APP_GLCD_DUTY_LINE);
 8001212:	2001      	movs	r0, #1
 8001214:	f000 fce8 	bl	8001be8 <GLCD_ClearLine>
	u32 glcdDuty = APP_IC_GetDuty();
 8001218:	f000 f8d0 	bl	80013bc <APP_IC_GetDuty>
 800121c:	6078      	str	r0, [r7, #4]
	GLCD_PrintString("DUTY:", 0, APP_GLCD_DUTY_LINE);
 800121e:	2201      	movs	r2, #1
 8001220:	2100      	movs	r1, #0
 8001222:	4808      	ldr	r0, [pc, #32]	; (8001244 <APP_GLCD_PrintDuty+0x38>)
 8001224:	f000 fbb4 	bl	8001990 <GLCD_PrintString>
	GLCD_PrintNum(glcdDuty, 35, APP_GLCD_DUTY_LINE);
 8001228:	2201      	movs	r2, #1
 800122a:	2123      	movs	r1, #35	; 0x23
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f000 fbd7 	bl	80019e0 <GLCD_PrintNum>
	GLCD_PrintString("%", 55, APP_GLCD_DUTY_LINE);
 8001232:	2201      	movs	r2, #1
 8001234:	2137      	movs	r1, #55	; 0x37
 8001236:	4804      	ldr	r0, [pc, #16]	; (8001248 <APP_GLCD_PrintDuty+0x3c>)
 8001238:	f000 fbaa 	bl	8001990 <GLCD_PrintString>
}
 800123c:	bf00      	nop
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	08002348 	.word	0x08002348
 8001248:	08002350 	.word	0x08002350

0800124c <APP_GLCD_PrintPeriod>:

static void APP_GLCD_PrintPeriod()
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	GLCD_ClearLine(APP_GLCD_PERIOD_LINE);
 8001252:	2002      	movs	r0, #2
 8001254:	f000 fcc8 	bl	8001be8 <GLCD_ClearLine>
	f32 glcdPeriod = APP_IC_GetPeriod_ms();
 8001258:	f000 f874 	bl	8001344 <APP_IC_GetPeriod_ms>
 800125c:	6078      	str	r0, [r7, #4]
	GLCD_PrintString("PERIOD:", 0, APP_GLCD_PERIOD_LINE);
 800125e:	2202      	movs	r2, #2
 8001260:	2100      	movs	r1, #0
 8001262:	4808      	ldr	r0, [pc, #32]	; (8001284 <APP_GLCD_PrintPeriod+0x38>)
 8001264:	f000 fb94 	bl	8001990 <GLCD_PrintString>
	GLCD_PrintFloat(glcdPeriod, 50, APP_GLCD_PERIOD_LINE);
 8001268:	2202      	movs	r2, #2
 800126a:	2132      	movs	r1, #50	; 0x32
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f000 fc1f 	bl	8001ab0 <GLCD_PrintFloat>
	GLCD_PrintString("ms", 100, APP_GLCD_PERIOD_LINE);
 8001272:	2202      	movs	r2, #2
 8001274:	2164      	movs	r1, #100	; 0x64
 8001276:	4804      	ldr	r0, [pc, #16]	; (8001288 <APP_GLCD_PrintPeriod+0x3c>)
 8001278:	f000 fb8a 	bl	8001990 <GLCD_PrintString>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	08002354 	.word	0x08002354
 8001288:	0800235c 	.word	0x0800235c

0800128c <APP_Init>:
/* Public functions --------------------------------------------------------*/
void APP_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	GLCD_Init();
 8001290:	f000 fad8 	bl	8001844 <GLCD_Init>
	TIM_Init(APP_TIM_IC1_TIMx);
 8001294:	4805      	ldr	r0, [pc, #20]	; (80012ac <APP_Init+0x20>)
 8001296:	f000 fdbd 	bl	8001e14 <TIM_Init>

	TIM_Init(APP_TIM_IC2_TIMx);
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <APP_Init+0x24>)
 800129c:	f000 fdba 	bl	8001e14 <TIM_Init>

	TIM_Init(APP_TIM_PWM_TIMx);
 80012a0:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012a4:	f000 fdb6 	bl	8001e14 <TIM_Init>
}
 80012a8:	bf00      	nop
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40000400 	.word	0x40000400
 80012b0:	40012c00 	.word	0x40012c00

080012b4 <APP_IC_Start>:

void APP_IC_Start()
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN9, GPIO_INPUT_FLOATING);
 80012b8:	2204      	movs	r2, #4
 80012ba:	2109      	movs	r1, #9
 80012bc:	480d      	ldr	r0, [pc, #52]	; (80012f4 <APP_IC_Start+0x40>)
 80012be:	f000 fd1f 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GPIOA, GPIO_PIN6, GPIO_INPUT_FLOATING);
 80012c2:	2204      	movs	r2, #4
 80012c4:	2106      	movs	r1, #6
 80012c6:	480b      	ldr	r0, [pc, #44]	; (80012f4 <APP_IC_Start+0x40>)
 80012c8:	f000 fd1a 	bl	8001d00 <GPIO_SetPinDirSpeed>

	TIM_IC_Start(APP_TIM_IC1_TIMx, APP_TIM_IC1_CHx, CCS_IP_DIRECT, TIM_IC_RISING_EDGE);
 80012cc:	2300      	movs	r3, #0
 80012ce:	2201      	movs	r2, #1
 80012d0:	2100      	movs	r1, #0
 80012d2:	4809      	ldr	r0, [pc, #36]	; (80012f8 <APP_IC_Start+0x44>)
 80012d4:	f000 fe8e 	bl	8001ff4 <TIM_IC_Start>


	TIM_IC_INT_Enable(APP_TIM_IC1_TIMx);
 80012d8:	4807      	ldr	r0, [pc, #28]	; (80012f8 <APP_IC_Start+0x44>)
 80012da:	f000 ff4b 	bl	8002174 <TIM_IC_INT_Enable>
	{
		TIM2_SetCallback(APP_IC_Calculate_Freq_Duty);
	}
	else if (APP_TIM_IC1_TIMx == TIM3)
	{
		TIM3_SetCallback(APP_IC_Calculate_Freq_Duty);
 80012de:	4807      	ldr	r0, [pc, #28]	; (80012fc <APP_IC_Start+0x48>)
 80012e0:	f000 ff6c 	bl	80021bc <TIM3_SetCallback>
	}

	TIM_IC_Start(APP_TIM_IC2_TIMx, APP_TIM_IC2_CHx, CCS_IP_DIRECT, TIM_IC_FALLING_EDGE);
 80012e4:	2301      	movs	r3, #1
 80012e6:	2201      	movs	r2, #1
 80012e8:	2101      	movs	r1, #1
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <APP_IC_Start+0x4c>)
 80012ec:	f000 fe82 	bl	8001ff4 <TIM_IC_Start>

}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40000400 	.word	0x40000400
 80012fc:	08000fe1 	.word	0x08000fe1
 8001300:	40012c00 	.word	0x40012c00

08001304 <APP_PWM_Start>:

void APP_PWM_Start(u32 dutyCycle, u32 frequency)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	6039      	str	r1, [r7, #0]

	TIM_PWM_Start(APP_TIM_PWM_TIMx, APP_TIM_PWM_CHx, dutyCycle, frequency);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	2102      	movs	r1, #2
 8001314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001318:	f000 fdca 	bl	8001eb0 <TIM_PWM_Start>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <APP_IC_GetFreq_KHZ>:

static f32 APP_IC_GetFreq_KHZ()
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	// return frequency in KHZ
	return frequency / 1000;
 8001328:	4b04      	ldr	r3, [pc, #16]	; (800133c <APP_IC_GetFreq_KHZ+0x18>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4904      	ldr	r1, [pc, #16]	; (8001340 <APP_IC_GetFreq_KHZ+0x1c>)
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff fcfe 	bl	8000d30 <__aeabi_fdiv>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000828 	.word	0x20000828
 8001340:	447a0000 	.word	0x447a0000

08001344 <APP_IC_GetPeriod_ms>:

f32 APP_IC_GetPeriod_ms()
{
 8001344:	b590      	push	{r4, r7, lr}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
	 //return period in ms
	int temp = frequency;
 800134a:	4b19      	ldr	r3, [pc, #100]	; (80013b0 <APP_IC_GetPeriod_ms+0x6c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fe00 	bl	8000f54 <__aeabi_f2iz>
 8001354:	4603      	mov	r3, r0
 8001356:	607b      	str	r3, [r7, #4]
	if (frequency == 0)
 8001358:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <APP_IC_GetPeriod_ms+0x6c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f04f 0100 	mov.w	r1, #0
 8001360:	4618      	mov	r0, r3
 8001362:	f7ff fdc5 	bl	8000ef0 <__aeabi_fcmpeq>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d001      	beq.n	8001370 <APP_IC_GetPeriod_ms+0x2c>
		temp =1;
 800136c:	2301      	movs	r3, #1
 800136e:	607b      	str	r3, [r7, #4]

	return ((1.0 / (temp)) * 1000);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f7ff f84f 	bl	8000414 <__aeabi_i2d>
 8001376:	4603      	mov	r3, r0
 8001378:	460c      	mov	r4, r1
 800137a:	461a      	mov	r2, r3
 800137c:	4623      	mov	r3, r4
 800137e:	f04f 0000 	mov.w	r0, #0
 8001382:	490c      	ldr	r1, [pc, #48]	; (80013b4 <APP_IC_GetPeriod_ms+0x70>)
 8001384:	f7ff f9da 	bl	800073c <__aeabi_ddiv>
 8001388:	4603      	mov	r3, r0
 800138a:	460c      	mov	r4, r1
 800138c:	4618      	mov	r0, r3
 800138e:	4621      	mov	r1, r4
 8001390:	f04f 0200 	mov.w	r2, #0
 8001394:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <APP_IC_GetPeriod_ms+0x74>)
 8001396:	f7ff f8a7 	bl	80004e8 <__aeabi_dmul>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	4618      	mov	r0, r3
 80013a0:	4621      	mov	r1, r4
 80013a2:	f7ff fab3 	bl	800090c <__aeabi_d2f>
 80013a6:	4603      	mov	r3, r0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd90      	pop	{r4, r7, pc}
 80013b0:	20000828 	.word	0x20000828
 80013b4:	3ff00000 	.word	0x3ff00000
 80013b8:	408f4000 	.word	0x408f4000

080013bc <APP_IC_GetDuty>:

u32 APP_IC_GetDuty()
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
	return duty;
 80013c0:	4b02      	ldr	r3, [pc, #8]	; (80013cc <APP_IC_GetDuty+0x10>)
 80013c2:	681b      	ldr	r3, [r3, #0]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bc80      	pop	{r7}
 80013ca:	4770      	bx	lr
 80013cc:	2000082c 	.word	0x2000082c

080013d0 <APP_GLCD_Print_Init>:

void APP_GLCD_Print_Init()
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
	oldFreq = APP_IC_GetFreq_KHZ();
 80013d4:	f7ff ffa6 	bl	8001324 <APP_IC_GetFreq_KHZ>
 80013d8:	4602      	mov	r2, r0
 80013da:	4b0e      	ldr	r3, [pc, #56]	; (8001414 <APP_GLCD_Print_Init+0x44>)
 80013dc:	601a      	str	r2, [r3, #0]
	oldDuty = APP_IC_GetDuty();
 80013de:	f7ff ffed 	bl	80013bc <APP_IC_GetDuty>
 80013e2:	4603      	mov	r3, r0
 80013e4:	4618      	mov	r0, r3
 80013e6:	f7ff fb97 	bl	8000b18 <__aeabi_ui2f>
 80013ea:	4602      	mov	r2, r0
 80013ec:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <APP_GLCD_Print_Init+0x48>)
 80013ee:	601a      	str	r2, [r3, #0]
	oldPeriod = APP_IC_GetPeriod_ms();
 80013f0:	f7ff ffa8 	bl	8001344 <APP_IC_GetPeriod_ms>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b09      	ldr	r3, [pc, #36]	; (800141c <APP_GLCD_Print_Init+0x4c>)
 80013f8:	601a      	str	r2, [r3, #0]

	APP_GLCD_PrintFreq();
 80013fa:	f7ff fee7 	bl	80011cc <APP_GLCD_PrintFreq>
	APP_GLCD_PrintDuty();
 80013fe:	f7ff ff05 	bl	800120c <APP_GLCD_PrintDuty>
	APP_GLCD_PrintPeriod();
 8001402:	f7ff ff23 	bl	800124c <APP_GLCD_PrintPeriod>
	APP_GLCD_DrawPWM(duty);
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <APP_GLCD_Print_Init+0x50>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff fe76 	bl	80010fc <APP_GLCD_DrawPWM>

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000830 	.word	0x20000830
 8001418:	20000834 	.word	0x20000834
 800141c:	20000838 	.word	0x20000838
 8001420:	2000082c 	.word	0x2000082c

08001424 <APP_GLCD_Update>:
void APP_GLCD_Update()
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	if (APP_IC_GetFreq_KHZ() != oldFreq)
 8001428:	f7ff ff7c 	bl	8001324 <APP_IC_GetFreq_KHZ>
 800142c:	4602      	mov	r2, r0
 800142e:	4b20      	ldr	r3, [pc, #128]	; (80014b0 <APP_GLCD_Update+0x8c>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	4619      	mov	r1, r3
 8001434:	4610      	mov	r0, r2
 8001436:	f7ff fd5b 	bl	8000ef0 <__aeabi_fcmpeq>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d106      	bne.n	800144e <APP_GLCD_Update+0x2a>
	{
		oldFreq = APP_IC_GetFreq_KHZ();
 8001440:	f7ff ff70 	bl	8001324 <APP_IC_GetFreq_KHZ>
 8001444:	4602      	mov	r2, r0
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <APP_GLCD_Update+0x8c>)
 8001448:	601a      	str	r2, [r3, #0]
		APP_GLCD_PrintFreq();
 800144a:	f7ff febf 	bl	80011cc <APP_GLCD_PrintFreq>
	}

	if (APP_IC_GetDuty() != oldDuty)
 800144e:	f7ff ffb5 	bl	80013bc <APP_IC_GetDuty>
 8001452:	4603      	mov	r3, r0
 8001454:	4618      	mov	r0, r3
 8001456:	f7ff fb5f 	bl	8000b18 <__aeabi_ui2f>
 800145a:	4602      	mov	r2, r0
 800145c:	4b15      	ldr	r3, [pc, #84]	; (80014b4 <APP_GLCD_Update+0x90>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4619      	mov	r1, r3
 8001462:	4610      	mov	r0, r2
 8001464:	f7ff fd44 	bl	8000ef0 <__aeabi_fcmpeq>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10a      	bne.n	8001484 <APP_GLCD_Update+0x60>
	{
		oldDuty = APP_IC_GetDuty();
 800146e:	f7ff ffa5 	bl	80013bc <APP_IC_GetDuty>
 8001472:	4603      	mov	r3, r0
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff fb4f 	bl	8000b18 <__aeabi_ui2f>
 800147a:	4602      	mov	r2, r0
 800147c:	4b0d      	ldr	r3, [pc, #52]	; (80014b4 <APP_GLCD_Update+0x90>)
 800147e:	601a      	str	r2, [r3, #0]
		APP_GLCD_PrintDuty();
 8001480:	f7ff fec4 	bl	800120c <APP_GLCD_PrintDuty>

	}
	if (APP_IC_GetPeriod_ms() != oldPeriod)
 8001484:	f7ff ff5e 	bl	8001344 <APP_IC_GetPeriod_ms>
 8001488:	4602      	mov	r2, r0
 800148a:	4b0b      	ldr	r3, [pc, #44]	; (80014b8 <APP_GLCD_Update+0x94>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4619      	mov	r1, r3
 8001490:	4610      	mov	r0, r2
 8001492:	f7ff fd2d 	bl	8000ef0 <__aeabi_fcmpeq>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d000      	beq.n	800149e <APP_GLCD_Update+0x7a>
	{
		oldPeriod = APP_IC_GetPeriod_ms();
		APP_GLCD_PrintPeriod();
	}

}
 800149c:	e006      	b.n	80014ac <APP_GLCD_Update+0x88>
		oldPeriod = APP_IC_GetPeriod_ms();
 800149e:	f7ff ff51 	bl	8001344 <APP_IC_GetPeriod_ms>
 80014a2:	4602      	mov	r2, r0
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <APP_GLCD_Update+0x94>)
 80014a6:	601a      	str	r2, [r3, #0]
		APP_GLCD_PrintPeriod();
 80014a8:	f7ff fed0 	bl	800124c <APP_GLCD_PrintPeriod>
}
 80014ac:	bf00      	nop
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20000830 	.word	0x20000830
 80014b4:	20000834 	.word	0x20000834
 80014b8:	20000838 	.word	0x20000838

080014bc <Delay>:
static void GLCD_reverseString(char* str, int length) ;


/* Private Functions ---------------------------------------------------------*/
static void Delay(u8 t)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	4603      	mov	r3, r0
 80014c4:	71fb      	strb	r3, [r7, #7]
	t *= 10;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	461a      	mov	r2, r3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	71fb      	strb	r3, [r7, #7]
	while (t)
 80014d2:	e002      	b.n	80014da <Delay+0x1e>
	{
		t--;
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	3b01      	subs	r3, #1
 80014d8:	71fb      	strb	r3, [r7, #7]
	while (t)
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d1f9      	bne.n	80014d4 <Delay+0x18>
	}
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bc80      	pop	{r7}
 80014e8:	4770      	bx	lr
	...

080014ec <GLCD_Send>:
static void GLCD_Send(u8 data)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	Delay(T);
 80014f6:	2001      	movs	r0, #1
 80014f8:	f7ff ffe0 	bl	80014bc <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_EN_PIN, GPIO_PIN_LOW);
 80014fc:	2200      	movs	r2, #0
 80014fe:	2108      	movs	r1, #8
 8001500:	483d      	ldr	r0, [pc, #244]	; (80015f8 <GLCD_Send+0x10c>)
 8001502:	f000 fc3a 	bl	8001d7a <GPIO_SetPinValue>
	Delay(T);
 8001506:	2001      	movs	r0, #1
 8001508:	f7ff ffd8 	bl	80014bc <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_RW_PIN, GPIO_PIN_LOW);
 800150c:	2200      	movs	r2, #0
 800150e:	2105      	movs	r1, #5
 8001510:	4839      	ldr	r0, [pc, #228]	; (80015f8 <GLCD_Send+0x10c>)
 8001512:	f000 fc32 	bl	8001d7a <GPIO_SetPinValue>
	Delay(T);
 8001516:	2001      	movs	r0, #1
 8001518:	f7ff ffd0 	bl	80014bc <Delay>
	GPIO_SetPortValue(GLCD_DATA_PORT, GPIO_PORT_LOW);
 800151c:	2100      	movs	r1, #0
 800151e:	4837      	ldr	r0, [pc, #220]	; (80015fc <GLCD_Send+0x110>)
 8001520:	f000 fc52 	bl	8001dc8 <GPIO_SetPortValue>
	Delay(T);
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff ffc9 	bl	80014bc <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_EN_PIN, GPIO_PIN_HIGH);
 800152a:	2201      	movs	r2, #1
 800152c:	2108      	movs	r1, #8
 800152e:	4832      	ldr	r0, [pc, #200]	; (80015f8 <GLCD_Send+0x10c>)
 8001530:	f000 fc23 	bl	8001d7a <GPIO_SetPinValue>
	Delay(T);
 8001534:	2001      	movs	r0, #1
 8001536:	f7ff ffc1 	bl	80014bc <Delay>

	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D0_PIN,GET_BIT(data,0));
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	b2db      	uxtb	r3, r3
 8001542:	461a      	mov	r2, r3
 8001544:	2105      	movs	r1, #5
 8001546:	482d      	ldr	r0, [pc, #180]	; (80015fc <GLCD_Send+0x110>)
 8001548:	f000 fc17 	bl	8001d7a <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D1_PIN,GET_BIT(data,1));
 800154c:	79fb      	ldrb	r3, [r7, #7]
 800154e:	085b      	lsrs	r3, r3, #1
 8001550:	b2db      	uxtb	r3, r3
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	b2db      	uxtb	r3, r3
 8001558:	461a      	mov	r2, r3
 800155a:	2104      	movs	r1, #4
 800155c:	4827      	ldr	r0, [pc, #156]	; (80015fc <GLCD_Send+0x110>)
 800155e:	f000 fc0c 	bl	8001d7a <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D2_PIN,GET_BIT(data,2));
 8001562:	79fb      	ldrb	r3, [r7, #7]
 8001564:	089b      	lsrs	r3, r3, #2
 8001566:	b2db      	uxtb	r3, r3
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	b2db      	uxtb	r3, r3
 800156e:	461a      	mov	r2, r3
 8001570:	210a      	movs	r1, #10
 8001572:	4822      	ldr	r0, [pc, #136]	; (80015fc <GLCD_Send+0x110>)
 8001574:	f000 fc01 	bl	8001d7a <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D3_PIN,GET_BIT(data,3));
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	08db      	lsrs	r3, r3, #3
 800157c:	b2db      	uxtb	r3, r3
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	b2db      	uxtb	r3, r3
 8001584:	461a      	mov	r2, r3
 8001586:	210b      	movs	r1, #11
 8001588:	481c      	ldr	r0, [pc, #112]	; (80015fc <GLCD_Send+0x110>)
 800158a:	f000 fbf6 	bl	8001d7a <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D4_PIN,GET_BIT(data,4));
 800158e:	79fb      	ldrb	r3, [r7, #7]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	b2db      	uxtb	r3, r3
 8001594:	f003 0301 	and.w	r3, r3, #1
 8001598:	b2db      	uxtb	r3, r3
 800159a:	461a      	mov	r2, r3
 800159c:	210c      	movs	r1, #12
 800159e:	4817      	ldr	r0, [pc, #92]	; (80015fc <GLCD_Send+0x110>)
 80015a0:	f000 fbeb 	bl	8001d7a <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D5_PIN,GET_BIT(data,5));
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	461a      	mov	r2, r3
 80015b2:	210d      	movs	r1, #13
 80015b4:	4811      	ldr	r0, [pc, #68]	; (80015fc <GLCD_Send+0x110>)
 80015b6:	f000 fbe0 	bl	8001d7a <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D6_PIN,GET_BIT(data,6));
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	099b      	lsrs	r3, r3, #6
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	f003 0301 	and.w	r3, r3, #1
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	210e      	movs	r1, #14
 80015ca:	480c      	ldr	r0, [pc, #48]	; (80015fc <GLCD_Send+0x110>)
 80015cc:	f000 fbd5 	bl	8001d7a <GPIO_SetPinValue>
	GPIO_SetPinValue(GLCD_DATA_PORT, GLCD_D7_PIN,GET_BIT(data,7));
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	09db      	lsrs	r3, r3, #7
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	461a      	mov	r2, r3
 80015d8:	210f      	movs	r1, #15
 80015da:	4808      	ldr	r0, [pc, #32]	; (80015fc <GLCD_Send+0x110>)
 80015dc:	f000 fbcd 	bl	8001d7a <GPIO_SetPinValue>

	Delay(T);
 80015e0:	2001      	movs	r0, #1
 80015e2:	f7ff ff6b 	bl	80014bc <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_EN_PIN, GPIO_PIN_LOW);
 80015e6:	2200      	movs	r2, #0
 80015e8:	2108      	movs	r1, #8
 80015ea:	4803      	ldr	r0, [pc, #12]	; (80015f8 <GLCD_Send+0x10c>)
 80015ec:	f000 fbc5 	bl	8001d7a <GPIO_SetPinValue>
}
 80015f0:	bf00      	nop
 80015f2:	3708      	adds	r7, #8
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40010c00 	.word	0x40010c00
 80015fc:	40010800 	.word	0x40010800

08001600 <GLCD_SendCommand>:

static void GLCD_SendCommand(u8 command)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	71fb      	strb	r3, [r7, #7]
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_PIN_LOW);
 800160a:	2200      	movs	r2, #0
 800160c:	2109      	movs	r1, #9
 800160e:	480f      	ldr	r0, [pc, #60]	; (800164c <GLCD_SendCommand+0x4c>)
 8001610:	f000 fbb3 	bl	8001d7a <GPIO_SetPinValue>
	Delay(T);
 8001614:	2001      	movs	r0, #1
 8001616:	f7ff ff51 	bl	80014bc <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_HIGH);
 800161a:	2201      	movs	r2, #1
 800161c:	2107      	movs	r1, #7
 800161e:	480b      	ldr	r0, [pc, #44]	; (800164c <GLCD_SendCommand+0x4c>)
 8001620:	f000 fbab 	bl	8001d7a <GPIO_SetPinValue>
	Delay(T);
 8001624:	2001      	movs	r0, #1
 8001626:	f7ff ff49 	bl	80014bc <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_HIGH);
 800162a:	2201      	movs	r2, #1
 800162c:	2106      	movs	r1, #6
 800162e:	4807      	ldr	r0, [pc, #28]	; (800164c <GLCD_SendCommand+0x4c>)
 8001630:	f000 fba3 	bl	8001d7a <GPIO_SetPinValue>
	Delay(T);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff ff41 	bl	80014bc <Delay>
	GLCD_Send(command);
 800163a:	79fb      	ldrb	r3, [r7, #7]
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff55 	bl	80014ec <GLCD_Send>
}
 8001642:	bf00      	nop
 8001644:	3708      	adds	r7, #8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40010c00 	.word	0x40010c00

08001650 <GLCD_SendData>:

void GLCD_SendData(u8 data, u8 x)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b082      	sub	sp, #8
 8001654:	af00      	add	r7, sp, #0
 8001656:	4603      	mov	r3, r0
 8001658:	460a      	mov	r2, r1
 800165a:	71fb      	strb	r3, [r7, #7]
 800165c:	4613      	mov	r3, r2
 800165e:	71bb      	strb	r3, [r7, #6]

	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_PIN_HIGH);
 8001660:	2201      	movs	r2, #1
 8001662:	2109      	movs	r1, #9
 8001664:	481a      	ldr	r0, [pc, #104]	; (80016d0 <GLCD_SendData+0x80>)
 8001666:	f000 fb88 	bl	8001d7a <GPIO_SetPinValue>
	Delay(T);
 800166a:	2001      	movs	r0, #1
 800166c:	f7ff ff26 	bl	80014bc <Delay>

	if (x < GLCD_SCREEN_HALF_WIDTH)
 8001670:	79bb      	ldrb	r3, [r7, #6]
 8001672:	2b3f      	cmp	r3, #63	; 0x3f
 8001674:	d814      	bhi.n	80016a0 <GLCD_SendData+0x50>
	{
		// Left section
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_HIGH);
 8001676:	2201      	movs	r2, #1
 8001678:	2107      	movs	r1, #7
 800167a:	4815      	ldr	r0, [pc, #84]	; (80016d0 <GLCD_SendData+0x80>)
 800167c:	f000 fb7d 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 8001680:	2001      	movs	r0, #1
 8001682:	f7ff ff1b 	bl	80014bc <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_LOW);
 8001686:	2200      	movs	r2, #0
 8001688:	2106      	movs	r1, #6
 800168a:	4811      	ldr	r0, [pc, #68]	; (80016d0 <GLCD_SendData+0x80>)
 800168c:	f000 fb75 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 8001690:	2001      	movs	r0, #1
 8001692:	f7ff ff13 	bl	80014bc <Delay>
		GLCD_Send(data);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff ff27 	bl	80014ec <GLCD_Send>
		Delay(T);
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_HIGH);
		Delay(T);
		GLCD_Send(data);
	}
}
 800169e:	e013      	b.n	80016c8 <GLCD_SendData+0x78>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_LOW);
 80016a0:	2200      	movs	r2, #0
 80016a2:	2107      	movs	r1, #7
 80016a4:	480a      	ldr	r0, [pc, #40]	; (80016d0 <GLCD_SendData+0x80>)
 80016a6:	f000 fb68 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff ff06 	bl	80014bc <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_HIGH);
 80016b0:	2201      	movs	r2, #1
 80016b2:	2106      	movs	r1, #6
 80016b4:	4806      	ldr	r0, [pc, #24]	; (80016d0 <GLCD_SendData+0x80>)
 80016b6:	f000 fb60 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 80016ba:	2001      	movs	r0, #1
 80016bc:	f7ff fefe 	bl	80014bc <Delay>
		GLCD_Send(data);
 80016c0:	79fb      	ldrb	r3, [r7, #7]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7ff ff12 	bl	80014ec <GLCD_Send>
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	40010c00 	.word	0x40010c00

080016d4 <GLCD_GoToLine>:

static void GLCD_GoToLine(GLCD_LineNum_t y)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
	Delay(T);
 80016de:	2001      	movs	r0, #1
 80016e0:	f7ff feec 	bl	80014bc <Delay>
	y = (y | 0xB8) & 0xBF;
 80016e4:	79fb      	ldrb	r3, [r7, #7]
 80016e6:	f063 0347 	orn	r3, r3, #71	; 0x47
 80016ea:	b2db      	uxtb	r3, r3
 80016ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80016f0:	71fb      	strb	r3, [r7, #7]
	GLCD_SendCommand(y);
 80016f2:	79fb      	ldrb	r3, [r7, #7]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f7ff ff83 	bl	8001600 <GLCD_SendCommand>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
	...

08001704 <GLCD_GoToColumn>:

static void GLCD_GoToColumn(u8 x)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	4603      	mov	r3, r0
 800170c:	71fb      	strb	r3, [r7, #7]
	Delay(T);
 800170e:	2001      	movs	r0, #1
 8001710:	f7ff fed4 	bl	80014bc <Delay>
	if (x < GLCD_SCREEN_HALF_WIDTH) // Left section
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2b3f      	cmp	r3, #63	; 0x3f
 8001718:	d823      	bhi.n	8001762 <GLCD_GoToColumn+0x5e>
	{
		x = (x | 0x40) & 0x7F;
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001720:	b2db      	uxtb	r3, r3
 8001722:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001726:	71fb      	strb	r3, [r7, #7]

		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_PIN_LOW);
 8001728:	2200      	movs	r2, #0
 800172a:	2109      	movs	r1, #9
 800172c:	4822      	ldr	r0, [pc, #136]	; (80017b8 <GLCD_GoToColumn+0xb4>)
 800172e:	f000 fb24 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff fec2 	bl	80014bc <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_HIGH);
 8001738:	2201      	movs	r2, #1
 800173a:	2107      	movs	r1, #7
 800173c:	481e      	ldr	r0, [pc, #120]	; (80017b8 <GLCD_GoToColumn+0xb4>)
 800173e:	f000 fb1c 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 8001742:	2001      	movs	r0, #1
 8001744:	f7ff feba 	bl	80014bc <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_LOW);
 8001748:	2200      	movs	r2, #0
 800174a:	2106      	movs	r1, #6
 800174c:	481a      	ldr	r0, [pc, #104]	; (80017b8 <GLCD_GoToColumn+0xb4>)
 800174e:	f000 fb14 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 8001752:	2001      	movs	r0, #1
 8001754:	f7ff feb2 	bl	80014bc <Delay>
		GLCD_Send(x);
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fec6 	bl	80014ec <GLCD_Send>
		Delay(T);
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_HIGH);
		Delay(T);
		GLCD_Send(x);
	}
}
 8001760:	e025      	b.n	80017ae <GLCD_GoToColumn+0xaa>
		x -= GLCD_SCREEN_HALF_WIDTH;
 8001762:	79fb      	ldrb	r3, [r7, #7]
 8001764:	3b40      	subs	r3, #64	; 0x40
 8001766:	71fb      	strb	r3, [r7, #7]
		x = (x | 0x40) & 0x7F;
 8001768:	79fb      	ldrb	r3, [r7, #7]
 800176a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800176e:	b2db      	uxtb	r3, r3
 8001770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001774:	71fb      	strb	r3, [r7, #7]
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_PIN_LOW);
 8001776:	2200      	movs	r2, #0
 8001778:	2109      	movs	r1, #9
 800177a:	480f      	ldr	r0, [pc, #60]	; (80017b8 <GLCD_GoToColumn+0xb4>)
 800177c:	f000 fafd 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 8001780:	2001      	movs	r0, #1
 8001782:	f7ff fe9b 	bl	80014bc <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_LOW);
 8001786:	2200      	movs	r2, #0
 8001788:	2107      	movs	r1, #7
 800178a:	480b      	ldr	r0, [pc, #44]	; (80017b8 <GLCD_GoToColumn+0xb4>)
 800178c:	f000 faf5 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 8001790:	2001      	movs	r0, #1
 8001792:	f7ff fe93 	bl	80014bc <Delay>
		GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_PIN_HIGH);
 8001796:	2201      	movs	r2, #1
 8001798:	2106      	movs	r1, #6
 800179a:	4807      	ldr	r0, [pc, #28]	; (80017b8 <GLCD_GoToColumn+0xb4>)
 800179c:	f000 faed 	bl	8001d7a <GPIO_SetPinValue>
		Delay(T);
 80017a0:	2001      	movs	r0, #1
 80017a2:	f7ff fe8b 	bl	80014bc <Delay>
		GLCD_Send(x);
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	4618      	mov	r0, r3
 80017aa:	f7ff fe9f 	bl	80014ec <GLCD_Send>
}
 80017ae:	bf00      	nop
 80017b0:	3708      	adds	r7, #8
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40010c00 	.word	0x40010c00

080017bc <GLCD_GoTo_Col_Line>:

static void GLCD_GoTo_Col_Line(u8 col, GLCD_LineNum_t line)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	460a      	mov	r2, r1
 80017c6:	71fb      	strb	r3, [r7, #7]
 80017c8:	4613      	mov	r3, r2
 80017ca:	71bb      	strb	r3, [r7, #6]
	Delay(T);
 80017cc:	2001      	movs	r0, #1
 80017ce:	f7ff fe75 	bl	80014bc <Delay>
	GLCD_GoToLine(line);	// Row Y = 0 to 7
 80017d2:	79bb      	ldrb	r3, [r7, #6]
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff7d 	bl	80016d4 <GLCD_GoToLine>
	GLCD_GoToColumn(col); // Column x = 0 to 127
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	4618      	mov	r0, r3
 80017de:	f7ff ff91 	bl	8001704 <GLCD_GoToColumn>

}
 80017e2:	bf00      	nop
 80017e4:	3708      	adds	r7, #8
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <GLCD_reverseString>:

static void GLCD_reverseString(char* str, int length)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b087      	sub	sp, #28
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
 80017f2:	6039      	str	r1, [r7, #0]
	    int start = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
	    int end = length - 1;
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	3b01      	subs	r3, #1
 80017fc:	613b      	str	r3, [r7, #16]
	    while (start < end)
 80017fe:	e017      	b.n	8001830 <GLCD_reverseString+0x46>
	    {
	        char temp = str[start];
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	687a      	ldr	r2, [r7, #4]
 8001804:	4413      	add	r3, r2
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	73fb      	strb	r3, [r7, #15]
	        str[start] = str[end];
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	687a      	ldr	r2, [r7, #4]
 800180e:	441a      	add	r2, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	6879      	ldr	r1, [r7, #4]
 8001814:	440b      	add	r3, r1
 8001816:	7812      	ldrb	r2, [r2, #0]
 8001818:	701a      	strb	r2, [r3, #0]
	        str[end] = temp;
 800181a:	693b      	ldr	r3, [r7, #16]
 800181c:	687a      	ldr	r2, [r7, #4]
 800181e:	4413      	add	r3, r2
 8001820:	7bfa      	ldrb	r2, [r7, #15]
 8001822:	701a      	strb	r2, [r3, #0]
	        start++;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
	        end--;
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	3b01      	subs	r3, #1
 800182e:	613b      	str	r3, [r7, #16]
	    while (start < end)
 8001830:	697a      	ldr	r2, [r7, #20]
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	429a      	cmp	r2, r3
 8001836:	dbe3      	blt.n	8001800 <GLCD_reverseString+0x16>
	    }
}
 8001838:	bf00      	nop
 800183a:	371c      	adds	r7, #28
 800183c:	46bd      	mov	sp, r7
 800183e:	bc80      	pop	{r7}
 8001840:	4770      	bx	lr
	...

08001844 <GLCD_Init>:

/*Public Functions -------------------------------------------------*/
void GLCD_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
	/* Enable GPIO Clock*/
	RCC_GPIOA_CLK_EN();
 8001848:	4b30      	ldr	r3, [pc, #192]	; (800190c <GLCD_Init+0xc8>)
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	4a2f      	ldr	r2, [pc, #188]	; (800190c <GLCD_Init+0xc8>)
 800184e:	f043 0304 	orr.w	r3, r3, #4
 8001852:	6193      	str	r3, [r2, #24]
	RCC_GPIOB_CLK_EN();
 8001854:	4b2d      	ldr	r3, [pc, #180]	; (800190c <GLCD_Init+0xc8>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a2c      	ldr	r2, [pc, #176]	; (800190c <GLCD_Init+0xc8>)
 800185a:	f043 0308 	orr.w	r3, r3, #8
 800185e:	6193      	str	r3, [r2, #24]

	/* Set GLCD ports direction */
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001860:	2202      	movs	r2, #2
 8001862:	2107      	movs	r1, #7
 8001864:	482a      	ldr	r0, [pc, #168]	; (8001910 <GLCD_Init+0xcc>)
 8001866:	f000 fa4b 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_CS2_PIN, GPIO_OUTPUT_PP_2MHZ);
 800186a:	2202      	movs	r2, #2
 800186c:	2106      	movs	r1, #6
 800186e:	4828      	ldr	r0, [pc, #160]	; (8001910 <GLCD_Init+0xcc>)
 8001870:	f000 fa46 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_EN_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001874:	2202      	movs	r2, #2
 8001876:	2108      	movs	r1, #8
 8001878:	4825      	ldr	r0, [pc, #148]	; (8001910 <GLCD_Init+0xcc>)
 800187a:	f000 fa41 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_DI_PIN, GPIO_OUTPUT_PP_2MHZ);
 800187e:	2202      	movs	r2, #2
 8001880:	2109      	movs	r1, #9
 8001882:	4823      	ldr	r0, [pc, #140]	; (8001910 <GLCD_Init+0xcc>)
 8001884:	f000 fa3c 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_CTRL_PORT, GLCD_RW_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001888:	2202      	movs	r2, #2
 800188a:	2105      	movs	r1, #5
 800188c:	4820      	ldr	r0, [pc, #128]	; (8001910 <GLCD_Init+0xcc>)
 800188e:	f000 fa37 	bl	8001d00 <GPIO_SetPinDirSpeed>

	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D0_PIN, GPIO_OUTPUT_PP_2MHZ);
 8001892:	2202      	movs	r2, #2
 8001894:	2105      	movs	r1, #5
 8001896:	481f      	ldr	r0, [pc, #124]	; (8001914 <GLCD_Init+0xd0>)
 8001898:	f000 fa32 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D1_PIN, GPIO_OUTPUT_PP_2MHZ);
 800189c:	2202      	movs	r2, #2
 800189e:	2104      	movs	r1, #4
 80018a0:	481c      	ldr	r0, [pc, #112]	; (8001914 <GLCD_Init+0xd0>)
 80018a2:	f000 fa2d 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D2_PIN, GPIO_OUTPUT_PP_2MHZ);
 80018a6:	2202      	movs	r2, #2
 80018a8:	210a      	movs	r1, #10
 80018aa:	481a      	ldr	r0, [pc, #104]	; (8001914 <GLCD_Init+0xd0>)
 80018ac:	f000 fa28 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D3_PIN, GPIO_OUTPUT_PP_2MHZ);
 80018b0:	2202      	movs	r2, #2
 80018b2:	210b      	movs	r1, #11
 80018b4:	4817      	ldr	r0, [pc, #92]	; (8001914 <GLCD_Init+0xd0>)
 80018b6:	f000 fa23 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D4_PIN, GPIO_OUTPUT_PP_2MHZ);
 80018ba:	2202      	movs	r2, #2
 80018bc:	210c      	movs	r1, #12
 80018be:	4815      	ldr	r0, [pc, #84]	; (8001914 <GLCD_Init+0xd0>)
 80018c0:	f000 fa1e 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D5_PIN, GPIO_OUTPUT_PP_2MHZ);
 80018c4:	2202      	movs	r2, #2
 80018c6:	210d      	movs	r1, #13
 80018c8:	4812      	ldr	r0, [pc, #72]	; (8001914 <GLCD_Init+0xd0>)
 80018ca:	f000 fa19 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D6_PIN, GPIO_OUTPUT_PP_2MHZ);
 80018ce:	2202      	movs	r2, #2
 80018d0:	210e      	movs	r1, #14
 80018d2:	4810      	ldr	r0, [pc, #64]	; (8001914 <GLCD_Init+0xd0>)
 80018d4:	f000 fa14 	bl	8001d00 <GPIO_SetPinDirSpeed>
	GPIO_SetPinDirSpeed(GLCD_DATA_PORT, GLCD_D7_PIN, GPIO_OUTPUT_PP_2MHZ);
 80018d8:	2202      	movs	r2, #2
 80018da:	210f      	movs	r1, #15
 80018dc:	480d      	ldr	r0, [pc, #52]	; (8001914 <GLCD_Init+0xd0>)
 80018de:	f000 fa0f 	bl	8001d00 <GPIO_SetPinDirSpeed>

	/* Send commands to initialize GLCD */
	Delay(T);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f7ff fdea 	bl	80014bc <Delay>
		GLCD_SendCommand(GLCD_CMD_OFF);
 80018e8:	203e      	movs	r0, #62	; 0x3e
 80018ea:	f7ff fe89 	bl	8001600 <GLCD_SendCommand>
		GLCD_SendCommand(GLCD_CMD_RESET_Y);
 80018ee:	2040      	movs	r0, #64	; 0x40
 80018f0:	f7ff fe86 	bl	8001600 <GLCD_SendCommand>
		GLCD_SendCommand(GLCD_CMD_RESET_X);
 80018f4:	20b8      	movs	r0, #184	; 0xb8
 80018f6:	f7ff fe83 	bl	8001600 <GLCD_SendCommand>
		GLCD_SendCommand(GLCD_CMD_RESET_LINES);
 80018fa:	20c0      	movs	r0, #192	; 0xc0
 80018fc:	f7ff fe80 	bl	8001600 <GLCD_SendCommand>
		GLCD_SendCommand(GLCD_CMD_ON);
 8001900:	203f      	movs	r0, #63	; 0x3f
 8001902:	f7ff fe7d 	bl	8001600 <GLCD_SendCommand>

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	40021000 	.word	0x40021000
 8001910:	40010c00 	.word	0x40010c00
 8001914:	40010800 	.word	0x40010800

08001918 <GLCD_PrintChar>:


void GLCD_PrintChar(u8 data, u8 x, u8 y)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b084      	sub	sp, #16
 800191c:	af00      	add	r7, sp, #0
 800191e:	4603      	mov	r3, r0
 8001920:	71fb      	strb	r3, [r7, #7]
 8001922:	460b      	mov	r3, r1
 8001924:	71bb      	strb	r3, [r7, #6]
 8001926:	4613      	mov	r3, r2
 8001928:	717b      	strb	r3, [r7, #5]
	int i,j;
	i=0;
 800192a:	2300      	movs	r3, #0
 800192c:	60fb      	str	r3, [r7, #12]
	j = i + GLCD_FONT_CHAR_WIDTH;
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	3307      	adds	r3, #7
 8001932:	60bb      	str	r3, [r7, #8]
	if (x >= (GLCD_SCREEN_WIDTH - GLCD_FONT_CHAR_WIDTH))
 8001934:	79bb      	ldrb	r3, [r7, #6]
 8001936:	2b78      	cmp	r3, #120	; 0x78
 8001938:	d904      	bls.n	8001944 <GLCD_PrintChar+0x2c>
					{
							++y;   // Next line
 800193a:	797b      	ldrb	r3, [r7, #5]
 800193c:	3301      	adds	r3, #1
 800193e:	717b      	strb	r3, [r7, #5]
							x=0; // Beginning line
 8001940:	2300      	movs	r3, #0
 8001942:	71bb      	strb	r3, [r7, #6]
					}
	for (i=0; i <= j; i++)
 8001944:	2300      	movs	r3, #0
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e017      	b.n	800197a <GLCD_PrintChar+0x62>
			{
				GLCD_GoTo_Col_Line(x, y);
 800194a:	797a      	ldrb	r2, [r7, #5]
 800194c:	79bb      	ldrb	r3, [r7, #6]
 800194e:	4611      	mov	r1, r2
 8001950:	4618      	mov	r0, r3
 8001952:	f7ff ff33 	bl	80017bc <GLCD_GoTo_Col_Line>
				GLCD_SendData(Font[data][i], x); //
 8001956:	79fb      	ldrb	r3, [r7, #7]
 8001958:	4a0c      	ldr	r2, [pc, #48]	; (800198c <GLCD_PrintChar+0x74>)
 800195a:	00db      	lsls	r3, r3, #3
 800195c:	441a      	add	r2, r3
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	4413      	add	r3, r2
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	79ba      	ldrb	r2, [r7, #6]
 8001966:	4611      	mov	r1, r2
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fe71 	bl	8001650 <GLCD_SendData>
				++x;					  // Next position
 800196e:	79bb      	ldrb	r3, [r7, #6]
 8001970:	3301      	adds	r3, #1
 8001972:	71bb      	strb	r3, [r7, #6]
	for (i=0; i <= j; i++)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	3301      	adds	r3, #1
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	68fa      	ldr	r2, [r7, #12]
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	429a      	cmp	r2, r3
 8001980:	dde3      	ble.n	800194a <GLCD_PrintChar+0x32>
			}

}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000

08001990 <GLCD_PrintString>:

void GLCD_PrintString(string str, u8 x, GLCD_LineNum_t y)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
 8001998:	460b      	mov	r3, r1
 800199a:	70fb      	strb	r3, [r7, #3]
 800199c:	4613      	mov	r3, r2
 800199e:	70bb      	strb	r3, [r7, #2]
	while (*str != 0)
 80019a0:	e015      	b.n	80019ce <GLCD_PrintString+0x3e>
	{
		if (x + GLCD_FONT_CHAR_WIDTH >=GLCD_SCREEN_WIDTH)
 80019a2:	78fb      	ldrb	r3, [r7, #3]
 80019a4:	3307      	adds	r3, #7
 80019a6:	2b7f      	cmp	r3, #127	; 0x7f
 80019a8:	d904      	bls.n	80019b4 <GLCD_PrintString+0x24>
		{
			++y;
 80019aa:	78bb      	ldrb	r3, [r7, #2]
 80019ac:	3301      	adds	r3, #1
 80019ae:	70bb      	strb	r3, [r7, #2]
			x=0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	70fb      	strb	r3, [r7, #3]
		}
		GLCD_PrintChar(*str, x, y);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	78ba      	ldrb	r2, [r7, #2]
 80019ba:	78f9      	ldrb	r1, [r7, #3]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ffab 	bl	8001918 <GLCD_PrintChar>
		x+=GLCD_FONT_CHAR_WIDTH;
 80019c2:	78fb      	ldrb	r3, [r7, #3]
 80019c4:	3307      	adds	r3, #7
 80019c6:	70fb      	strb	r3, [r7, #3]
		str++;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3301      	adds	r3, #1
 80019cc:	607b      	str	r3, [r7, #4]
	while (*str != 0)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d1e5      	bne.n	80019a2 <GLCD_PrintString+0x12>
	}
}
 80019d6:	bf00      	nop
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <GLCD_PrintNum>:

void GLCD_PrintNum(u32 num , u8 x , u8 y)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b08a      	sub	sp, #40	; 0x28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	460b      	mov	r3, r1
 80019ea:	70fb      	strb	r3, [r7, #3]
 80019ec:	4613      	mov	r3, r2
 80019ee:	70bb      	strb	r3, [r7, #2]
		u8 str [10];

		if (num == 0)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d10b      	bne.n	8001a0e <GLCD_PrintNum+0x2e>
		{
			str[0]= '0';
 80019f6:	2330      	movs	r3, #48	; 0x30
 80019f8:	733b      	strb	r3, [r7, #12]
			str[1]= '\0';
 80019fa:	2300      	movs	r3, #0
 80019fc:	737b      	strb	r3, [r7, #13]
			GLCD_PrintString(str, x, y);
 80019fe:	78ba      	ldrb	r2, [r7, #2]
 8001a00:	78f9      	ldrb	r1, [r7, #3]
 8001a02:	f107 030c 	add.w	r3, r7, #12
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ffc2 	bl	8001990 <GLCD_PrintString>
			return;
 8001a0c:	e048      	b.n	8001aa0 <GLCD_PrintNum+0xc0>
		}

	    int i, rem, len, n;

	    n = num;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	61fb      	str	r3, [r7, #28]
	    len=0;
 8001a12:	2300      	movs	r3, #0
 8001a14:	623b      	str	r3, [r7, #32]

	    while (n != 0)
 8001a16:	e00a      	b.n	8001a2e <GLCD_PrintNum+0x4e>
	    {
	        len++;
 8001a18:	6a3b      	ldr	r3, [r7, #32]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	623b      	str	r3, [r7, #32]
	        n /= 10;
 8001a1e:	69fb      	ldr	r3, [r7, #28]
 8001a20:	4a21      	ldr	r2, [pc, #132]	; (8001aa8 <GLCD_PrintNum+0xc8>)
 8001a22:	fb82 1203 	smull	r1, r2, r2, r3
 8001a26:	1092      	asrs	r2, r2, #2
 8001a28:	17db      	asrs	r3, r3, #31
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	61fb      	str	r3, [r7, #28]
	    while (n != 0)
 8001a2e:	69fb      	ldr	r3, [r7, #28]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d1f1      	bne.n	8001a18 <GLCD_PrintNum+0x38>
	    }

	    for (i = 0; i < len; i++)
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	e020      	b.n	8001a7c <GLCD_PrintNum+0x9c>
	    {
	        rem = num % 10;
 8001a3a:	6879      	ldr	r1, [r7, #4]
 8001a3c:	4b1b      	ldr	r3, [pc, #108]	; (8001aac <GLCD_PrintNum+0xcc>)
 8001a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8001a42:	08da      	lsrs	r2, r3, #3
 8001a44:	4613      	mov	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	4413      	add	r3, r2
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	1aca      	subs	r2, r1, r3
 8001a4e:	61ba      	str	r2, [r7, #24]
	        num /= 10;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4a16      	ldr	r2, [pc, #88]	; (8001aac <GLCD_PrintNum+0xcc>)
 8001a54:	fba2 2303 	umull	r2, r3, r2, r3
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	607b      	str	r3, [r7, #4]
	        str[len - (i + 1)] = rem + '0';
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	b2da      	uxtb	r2, r3
 8001a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a62:	3301      	adds	r3, #1
 8001a64:	6a39      	ldr	r1, [r7, #32]
 8001a66:	1acb      	subs	r3, r1, r3
 8001a68:	3230      	adds	r2, #48	; 0x30
 8001a6a:	b2d2      	uxtb	r2, r2
 8001a6c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8001a70:	440b      	add	r3, r1
 8001a72:	f803 2c1c 	strb.w	r2, [r3, #-28]
	    for (i = 0; i < len; i++)
 8001a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a78:	3301      	adds	r3, #1
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
 8001a7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a7e:	6a3b      	ldr	r3, [r7, #32]
 8001a80:	429a      	cmp	r2, r3
 8001a82:	dbda      	blt.n	8001a3a <GLCD_PrintNum+0x5a>
	    }
	    str[len] = '\0';
 8001a84:	f107 020c 	add.w	r2, r7, #12
 8001a88:	6a3b      	ldr	r3, [r7, #32]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	701a      	strb	r2, [r3, #0]

	    GLCD_PrintString(str, x, y);
 8001a90:	78ba      	ldrb	r2, [r7, #2]
 8001a92:	78f9      	ldrb	r1, [r7, #3]
 8001a94:	f107 030c 	add.w	r3, r7, #12
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff79 	bl	8001990 <GLCD_PrintString>
	    return;
 8001a9e:	bf00      	nop

}
 8001aa0:	3728      	adds	r7, #40	; 0x28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	bf00      	nop
 8001aa8:	66666667 	.word	0x66666667
 8001aac:	cccccccd 	.word	0xcccccccd

08001ab0 <GLCD_PrintFloat>:

void GLCD_PrintFloat(f32 num , u8 x , u8 y)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b094      	sub	sp, #80	; 0x50
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
 8001abc:	4613      	mov	r3, r2
 8001abe:	70bb      	strb	r3, [r7, #2]
		char str[50];

	    int integerPart = (int)num;
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f7ff fa47 	bl	8000f54 <__aeabi_f2iz>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	64fb      	str	r3, [r7, #76]	; 0x4c
	    float fractionalPart = num - integerPart;
 8001aca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001acc:	f7ff f828 	bl	8000b20 <__aeabi_i2f>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6878      	ldr	r0, [r7, #4]
 8001ad6:	f7fe ff6d 	bl	80009b4 <__aeabi_fsub>
 8001ada:	4603      	mov	r3, r0
 8001adc:	64bb      	str	r3, [r7, #72]	; 0x48

	    int i = 0;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	647b      	str	r3, [r7, #68]	; 0x44

	    // Handle negative numbers
	    if (integerPart < 0) {
 8001ae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	da0f      	bge.n	8001b08 <GLCD_PrintFloat+0x58>
	        str[i++] = '-';
 8001ae8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aea:	1c5a      	adds	r2, r3, #1
 8001aec:	647a      	str	r2, [r7, #68]	; 0x44
 8001aee:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001af2:	4413      	add	r3, r2
 8001af4:	222d      	movs	r2, #45	; 0x2d
 8001af6:	f803 2c48 	strb.w	r2, [r3, #-72]
	        integerPart = -integerPart;
 8001afa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001afc:	425b      	negs	r3, r3
 8001afe:	64fb      	str	r3, [r7, #76]	; 0x4c
	        fractionalPart = -fractionalPart;
 8001b00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001b02:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8001b06:	64bb      	str	r3, [r7, #72]	; 0x48
	    }

	    // Convert integer part to string
	    do {
	        str[i++] = '0' + integerPart % 10;
 8001b08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001b0a:	4b35      	ldr	r3, [pc, #212]	; (8001be0 <GLCD_PrintFloat+0x130>)
 8001b0c:	fb83 1302 	smull	r1, r3, r3, r2
 8001b10:	1099      	asrs	r1, r3, #2
 8001b12:	17d3      	asrs	r3, r2, #31
 8001b14:	1ac9      	subs	r1, r1, r3
 8001b16:	460b      	mov	r3, r1
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	440b      	add	r3, r1
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	1ad1      	subs	r1, r2, r3
 8001b20:	b2ca      	uxtb	r2, r1
 8001b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b24:	1c59      	adds	r1, r3, #1
 8001b26:	6479      	str	r1, [r7, #68]	; 0x44
 8001b28:	3230      	adds	r2, #48	; 0x30
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b30:	440b      	add	r3, r1
 8001b32:	f803 2c48 	strb.w	r2, [r3, #-72]
	        integerPart /= 10;
 8001b36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b38:	4a29      	ldr	r2, [pc, #164]	; (8001be0 <GLCD_PrintFloat+0x130>)
 8001b3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001b3e:	1092      	asrs	r2, r2, #2
 8001b40:	17db      	asrs	r3, r3, #31
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	64fb      	str	r3, [r7, #76]	; 0x4c
	    } while (integerPart);
 8001b46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1dd      	bne.n	8001b08 <GLCD_PrintFloat+0x58>

	    GLCD_reverseString(str, i);
 8001b4c:	f107 0308 	add.w	r3, r7, #8
 8001b50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7ff fe49 	bl	80017ea <GLCD_reverseString>

	    // Add decimal point
	    str[i++] = '.';
 8001b58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b5a:	1c5a      	adds	r2, r3, #1
 8001b5c:	647a      	str	r2, [r7, #68]	; 0x44
 8001b5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8001b62:	4413      	add	r3, r2
 8001b64:	222e      	movs	r2, #46	; 0x2e
 8001b66:	f803 2c48 	strb.w	r2, [r3, #-72]

	    // Convert fractional part to string
	    for (int j = 0; j < 4; j++) {
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8001b6e:	e023      	b.n	8001bb8 <GLCD_PrintFloat+0x108>
	        fractionalPart *= 10;
 8001b70:	491c      	ldr	r1, [pc, #112]	; (8001be4 <GLCD_PrintFloat+0x134>)
 8001b72:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b74:	f7ff f828 	bl	8000bc8 <__aeabi_fmul>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	64bb      	str	r3, [r7, #72]	; 0x48
	        int digit = (int)fractionalPart;
 8001b7c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001b7e:	f7ff f9e9 	bl	8000f54 <__aeabi_f2iz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	63fb      	str	r3, [r7, #60]	; 0x3c
	        str[i++] = '0' + digit;
 8001b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b8c:	1c59      	adds	r1, r3, #1
 8001b8e:	6479      	str	r1, [r7, #68]	; 0x44
 8001b90:	3230      	adds	r2, #48	; 0x30
 8001b92:	b2d2      	uxtb	r2, r2
 8001b94:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8001b98:	440b      	add	r3, r1
 8001b9a:	f803 2c48 	strb.w	r2, [r3, #-72]
	        fractionalPart -= digit;
 8001b9e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001ba0:	f7fe ffbe 	bl	8000b20 <__aeabi_i2f>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8001baa:	f7fe ff03 	bl	80009b4 <__aeabi_fsub>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	64bb      	str	r3, [r7, #72]	; 0x48
	    for (int j = 0; j < 4; j++) {
 8001bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	643b      	str	r3, [r7, #64]	; 0x40
 8001bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	ddd8      	ble.n	8001b70 <GLCD_PrintFloat+0xc0>
	    }

	    // Null-terminate the string
	    str[i] = '\0';
 8001bbe:	f107 0208 	add.w	r2, r7, #8
 8001bc2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001bc4:	4413      	add	r3, r2
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]

	    GLCD_PrintString(str, x, y);
 8001bca:	78ba      	ldrb	r2, [r7, #2]
 8001bcc:	78f9      	ldrb	r1, [r7, #3]
 8001bce:	f107 0308 	add.w	r3, r7, #8
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	f7ff fedc 	bl	8001990 <GLCD_PrintString>
}
 8001bd8:	bf00      	nop
 8001bda:	3750      	adds	r7, #80	; 0x50
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	66666667 	.word	0x66666667
 8001be4:	41200000 	.word	0x41200000

08001be8 <GLCD_ClearLine>:




void GLCD_ClearLine(GLCD_LineNum_t line)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71fb      	strb	r3, [r7, #7]
	Delay(T);
 8001bf2:	2001      	movs	r0, #1
 8001bf4:	f7ff fc62 	bl	80014bc <Delay>
	int i;
	GLCD_GoTo_Col_Line(0, line);
 8001bf8:	79fb      	ldrb	r3, [r7, #7]
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	2000      	movs	r0, #0
 8001bfe:	f7ff fddd 	bl	80017bc <GLCD_GoTo_Col_Line>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_HIGH);
 8001c02:	2201      	movs	r2, #1
 8001c04:	2107      	movs	r1, #7
 8001c06:	481b      	ldr	r0, [pc, #108]	; (8001c74 <GLCD_ClearLine+0x8c>)
 8001c08:	f000 f8b7 	bl	8001d7a <GPIO_SetPinValue>
	Delay(T);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f7ff fc55 	bl	80014bc <Delay>
	GPIO_SetPinValue(GLCD_CTRL_PORT, GLCD_CS1_PIN, GPIO_PIN_LOW);
 8001c12:	2200      	movs	r2, #0
 8001c14:	2107      	movs	r1, #7
 8001c16:	4817      	ldr	r0, [pc, #92]	; (8001c74 <GLCD_ClearLine+0x8c>)
 8001c18:	f000 f8af 	bl	8001d7a <GPIO_SetPinValue>

	for (i = 0; i < 64; i++)
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	e00a      	b.n	8001c38 <GLCD_ClearLine+0x50>
	{
		GLCD_SendData(0, 0);	 // Print 0 for Delete Left section
 8001c22:	2100      	movs	r1, #0
 8001c24:	2000      	movs	r0, #0
 8001c26:	f7ff fd13 	bl	8001650 <GLCD_SendData>
		GLCD_SendData(0, 64); // Print 0 for Delete Right section
 8001c2a:	2140      	movs	r1, #64	; 0x40
 8001c2c:	2000      	movs	r0, #0
 8001c2e:	f7ff fd0f 	bl	8001650 <GLCD_SendData>
	for (i = 0; i < 64; i++)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	3301      	adds	r3, #1
 8001c36:	60fb      	str	r3, [r7, #12]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	2b3f      	cmp	r3, #63	; 0x3f
 8001c3c:	ddf1      	ble.n	8001c22 <GLCD_ClearLine+0x3a>
	}
	GLCD_GoTo_Col_Line(64, line); // At start of line of right side
 8001c3e:	79fb      	ldrb	r3, [r7, #7]
 8001c40:	4619      	mov	r1, r3
 8001c42:	2040      	movs	r0, #64	; 0x40
 8001c44:	f7ff fdba 	bl	80017bc <GLCD_GoTo_Col_Line>
	for (i = 0; i < 64; i++)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	60fb      	str	r3, [r7, #12]
 8001c4c:	e00a      	b.n	8001c64 <GLCD_ClearLine+0x7c>
	{
		GLCD_SendData(0, 0);	 // Print 0 for Delete Left section
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2000      	movs	r0, #0
 8001c52:	f7ff fcfd 	bl	8001650 <GLCD_SendData>
		GLCD_SendData(0, 64); // Print 0 for Delete Right section
 8001c56:	2140      	movs	r1, #64	; 0x40
 8001c58:	2000      	movs	r0, #0
 8001c5a:	f7ff fcf9 	bl	8001650 <GLCD_SendData>
	for (i = 0; i < 64; i++)
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	3301      	adds	r3, #1
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b3f      	cmp	r3, #63	; 0x3f
 8001c68:	ddf1      	ble.n	8001c4e <GLCD_ClearLine+0x66>
	}
}
 8001c6a:	bf00      	nop
 8001c6c:	3710      	adds	r7, #16
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	40010c00 	.word	0x40010c00

08001c78 <GLCD_DrawHLine>:



void GLCD_DrawHLine(u8 x1, u8 x2, GLCD_LineNum_t y)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
 8001c82:	460b      	mov	r3, r1
 8001c84:	71bb      	strb	r3, [r7, #6]
 8001c86:	4613      	mov	r3, r2
 8001c88:	717b      	strb	r3, [r7, #5]
	for (char x=x1;x<=x2;x++)
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	73fb      	strb	r3, [r7, #15]
 8001c8e:	e00d      	b.n	8001cac <GLCD_DrawHLine+0x34>
	{
		GLCD_GoTo_Col_Line (x,y);
 8001c90:	797a      	ldrb	r2, [r7, #5]
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	4611      	mov	r1, r2
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff fd90 	bl	80017bc <GLCD_GoTo_Col_Line>
		GLCD_SendData(0x01, x);
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f7ff fcd5 	bl	8001650 <GLCD_SendData>
	for (char x=x1;x<=x2;x++)
 8001ca6:	7bfb      	ldrb	r3, [r7, #15]
 8001ca8:	3301      	adds	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
 8001cac:	7bfa      	ldrb	r2, [r7, #15]
 8001cae:	79bb      	ldrb	r3, [r7, #6]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d9ed      	bls.n	8001c90 <GLCD_DrawHLine+0x18>
	}

}
 8001cb4:	bf00      	nop
 8001cb6:	3710      	adds	r7, #16
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <GLCD_DrawVLine>:

void GLCD_DrawVLine(GLCD_LineNum_t y1, GLCD_LineNum_t y2, u8 x)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	71fb      	strb	r3, [r7, #7]
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	71bb      	strb	r3, [r7, #6]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	717b      	strb	r3, [r7, #5]
	for (char y=y1;y<y2;y++)
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	73fb      	strb	r3, [r7, #15]
 8001cd2:	e00d      	b.n	8001cf0 <GLCD_DrawVLine+0x34>
	{
		GLCD_GoTo_Col_Line (x,y);
 8001cd4:	7bfa      	ldrb	r2, [r7, #15]
 8001cd6:	797b      	ldrb	r3, [r7, #5]
 8001cd8:	4611      	mov	r1, r2
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff fd6e 	bl	80017bc <GLCD_GoTo_Col_Line>
		GLCD_SendData(0xFF, x);
 8001ce0:	797b      	ldrb	r3, [r7, #5]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	20ff      	movs	r0, #255	; 0xff
 8001ce6:	f7ff fcb3 	bl	8001650 <GLCD_SendData>
	for (char y=y1;y<y2;y++)
 8001cea:	7bfb      	ldrb	r3, [r7, #15]
 8001cec:	3301      	adds	r3, #1
 8001cee:	73fb      	strb	r3, [r7, #15]
 8001cf0:	7bfa      	ldrb	r2, [r7, #15]
 8001cf2:	79bb      	ldrb	r3, [r7, #6]
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d3ed      	bcc.n	8001cd4 <GLCD_DrawVLine+0x18>
	}
}
 8001cf8:	bf00      	nop
 8001cfa:	3710      	adds	r7, #16
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <GPIO_SetPinDirSpeed>:

#include "../GPIO/GPIO_interface.h"

/* Public Functions --------------------------------------------------------*/
void GPIO_SetPinDirSpeed(volatile GPIO_TypeDef *GPIOx, GPIO_PinNum_t GPIO_PINx, GPIO_Mode_t GPIO_Mode)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	460b      	mov	r3, r1
 8001d0a:	70fb      	strb	r3, [r7, #3]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	70bb      	strb	r3, [r7, #2]
	/* Check if the current bit belongs to first half or last half of the pin count number
	   in order to address CRH or CRL register*/
	if ((GPIO_PINx < GPIO_PIN8))
 8001d10:	78fb      	ldrb	r3, [r7, #3]
 8001d12:	2b07      	cmp	r3, #7
 8001d14:	d815      	bhi.n	8001d42 <GPIO_SetPinDirSpeed+0x42>
	{
		GPIOx->CRL &= ~((0b1111) << (GPIO_PINx * GPIO_PIN_MODE_OFFSET));
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	0092      	lsls	r2, r2, #2
 8001d1e:	210f      	movs	r1, #15
 8001d20:	fa01 f202 	lsl.w	r2, r1, r2
 8001d24:	43d2      	mvns	r2, r2
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	601a      	str	r2, [r3, #0]
		GPIOx->CRL |= (GPIO_Mode << (GPIO_PINx * GPIO_PIN_MODE_OFFSET));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	78b9      	ldrb	r1, [r7, #2]
 8001d32:	78fa      	ldrb	r2, [r7, #3]
 8001d34:	0092      	lsls	r2, r2, #2
 8001d36:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3a:	431a      	orrs	r2, r3
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	601a      	str	r2, [r3, #0]
	{
		GPIOx->CRH &= ~((0b1111) << ((GPIO_PINx - 8) * GPIO_PIN_MODE_OFFSET));
		GPIOx->CRH |= (GPIO_Mode << ((GPIO_PINx - 8) * GPIO_PIN_MODE_OFFSET));
	}

}
 8001d40:	e016      	b.n	8001d70 <GPIO_SetPinDirSpeed+0x70>
		GPIOx->CRH &= ~((0b1111) << ((GPIO_PINx - 8) * GPIO_PIN_MODE_OFFSET));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	78fa      	ldrb	r2, [r7, #3]
 8001d48:	3a08      	subs	r2, #8
 8001d4a:	0092      	lsls	r2, r2, #2
 8001d4c:	210f      	movs	r1, #15
 8001d4e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d52:	43d2      	mvns	r2, r2
 8001d54:	401a      	ands	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	605a      	str	r2, [r3, #4]
		GPIOx->CRH |= (GPIO_Mode << ((GPIO_PINx - 8) * GPIO_PIN_MODE_OFFSET));
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	78b9      	ldrb	r1, [r7, #2]
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	3a08      	subs	r2, #8
 8001d64:	0092      	lsls	r2, r2, #2
 8001d66:	fa01 f202 	lsl.w	r2, r1, r2
 8001d6a:	431a      	orrs	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	605a      	str	r2, [r3, #4]
}
 8001d70:	bf00      	nop
 8001d72:	370c      	adds	r7, #12
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bc80      	pop	{r7}
 8001d78:	4770      	bx	lr

08001d7a <GPIO_SetPinValue>:
void GPIO_SetPinValue(volatile  GPIO_TypeDef *GPIOx, GPIO_PinNum_t GPIO_PINx, GPIO_PinVal_t GPIO_PIN_Val)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	460b      	mov	r3, r1
 8001d84:	70fb      	strb	r3, [r7, #3]
 8001d86:	4613      	mov	r3, r2
 8001d88:	70bb      	strb	r3, [r7, #2]
	if (GPIO_PIN_Val == GPIO_PIN_HIGH)
 8001d8a:	78bb      	ldrb	r3, [r7, #2]
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d109      	bne.n	8001da4 <GPIO_SetPinValue+0x2a>
	{
		SET_BIT(GPIOx->ODR, GPIO_PINx);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	68da      	ldr	r2, [r3, #12]
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	2101      	movs	r1, #1
 8001d98:	fa01 f303 	lsl.w	r3, r1, r3
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	60da      	str	r2, [r3, #12]
	else if (GPIO_PIN_Val == GPIO_PIN_LOW)
	{
		CLR_BIT(GPIOx->ODR, GPIO_PINx);
	}

}
 8001da2:	e00c      	b.n	8001dbe <GPIO_SetPinValue+0x44>
	else if (GPIO_PIN_Val == GPIO_PIN_LOW)
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d109      	bne.n	8001dbe <GPIO_SetPinValue+0x44>
		CLR_BIT(GPIOx->ODR, GPIO_PINx);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	68da      	ldr	r2, [r3, #12]
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	2101      	movs	r1, #1
 8001db2:	fa01 f303 	lsl.w	r3, r1, r3
 8001db6:	43db      	mvns	r3, r3
 8001db8:	401a      	ands	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	60da      	str	r2, [r3, #12]
}
 8001dbe:	bf00      	nop
 8001dc0:	370c      	adds	r7, #12
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bc80      	pop	{r7}
 8001dc6:	4770      	bx	lr

08001dc8 <GPIO_SetPortValue>:
	GPIOx->CRL = temp;
	GPIOx->CRH = temp;
}

void GPIO_SetPortValue( volatile  GPIO_TypeDef *GPIOx , u32 val)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
 8001dd0:	6039      	str	r1, [r7, #0]
	GPIOx->ODR = (u32)val;
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	683a      	ldr	r2, [r7, #0]
 8001dd6:	60da      	str	r2, [r3, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bc80      	pop	{r7}
 8001de0:	4770      	bx	lr
	...

08001de4 <NVIC_EnableIRQ>:

#include "NVIC_interface.h"

/* Public functions -------------------------------------------------------------*/
void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	71fb      	strb	r3, [r7, #7]
  if ((u32)(IRQn) >= 0)
  {
    NVIC->ISER[(((u32)IRQn) >> 5UL)] = (u32)(1UL << (((u32)IRQn) & 0x1FUL));
 8001dee:	79fb      	ldrb	r3, [r7, #7]
 8001df0:	f003 021f 	and.w	r2, r3, #31
 8001df4:	4906      	ldr	r1, [pc, #24]	; (8001e10 <NVIC_EnableIRQ+0x2c>)
 8001df6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dfa:	095b      	lsrs	r3, r3, #5
 8001dfc:	2001      	movs	r0, #1
 8001dfe:	fa00 f202 	lsl.w	r2, r0, r2
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bc80      	pop	{r7}
 8001e0e:	4770      	bx	lr
 8001e10:	e000e100 	.word	0xe000e100

08001e14 <TIM_Init>:


/* Public Functions -------------------------------------------------------------------*/

void TIM_Init(volatile TIM_TypeDef *TIMx)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
	RCC_AFIO_CLK_EN();
 8001e1c:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <TIM_Init+0x90>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4a20      	ldr	r2, [pc, #128]	; (8001ea4 <TIM_Init+0x90>)
 8001e22:	f043 0301 	orr.w	r3, r3, #1
 8001e26:	6193      	str	r3, [r2, #24]
	if (TIMx == TIM1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a1f      	ldr	r2, [pc, #124]	; (8001ea8 <TIM_Init+0x94>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d10c      	bne.n	8001e4a <TIM_Init+0x36>
	{
		RCC_TIM1_CLK_EN();
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <TIM_Init+0x90>)
 8001e32:	699b      	ldr	r3, [r3, #24]
 8001e34:	4a1b      	ldr	r2, [pc, #108]	; (8001ea4 <TIM_Init+0x90>)
 8001e36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001e3a:	6193      	str	r3, [r2, #24]
		RCC_GPIOA_CLK_EN();
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <TIM_Init+0x90>)
 8001e3e:	699b      	ldr	r3, [r3, #24]
 8001e40:	4a18      	ldr	r2, [pc, #96]	; (8001ea4 <TIM_Init+0x90>)
 8001e42:	f043 0304 	orr.w	r3, r3, #4
 8001e46:	6193      	str	r3, [r2, #24]
	{
		RCC_TIM3_CLK_EN();
		RCC_GPIOA_CLK_EN();
		RCC_GPIOB_CLK_EN();
	}
}
 8001e48:	e026      	b.n	8001e98 <TIM_Init+0x84>
	else if (TIMx == TIM2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e50:	d10c      	bne.n	8001e6c <TIM_Init+0x58>
		RCC_TIM2_CLK_EN();
 8001e52:	4b14      	ldr	r3, [pc, #80]	; (8001ea4 <TIM_Init+0x90>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4a13      	ldr	r2, [pc, #76]	; (8001ea4 <TIM_Init+0x90>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001e5e:	4b11      	ldr	r3, [pc, #68]	; (8001ea4 <TIM_Init+0x90>)
 8001e60:	699b      	ldr	r3, [r3, #24]
 8001e62:	4a10      	ldr	r2, [pc, #64]	; (8001ea4 <TIM_Init+0x90>)
 8001e64:	f043 0304 	orr.w	r3, r3, #4
 8001e68:	6193      	str	r3, [r2, #24]
}
 8001e6a:	e015      	b.n	8001e98 <TIM_Init+0x84>
	else if (TIMx == TIM3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	4a0f      	ldr	r2, [pc, #60]	; (8001eac <TIM_Init+0x98>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d111      	bne.n	8001e98 <TIM_Init+0x84>
		RCC_TIM3_CLK_EN();
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <TIM_Init+0x90>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	4a0a      	ldr	r2, [pc, #40]	; (8001ea4 <TIM_Init+0x90>)
 8001e7a:	f043 0302 	orr.w	r3, r3, #2
 8001e7e:	61d3      	str	r3, [r2, #28]
		RCC_GPIOA_CLK_EN();
 8001e80:	4b08      	ldr	r3, [pc, #32]	; (8001ea4 <TIM_Init+0x90>)
 8001e82:	699b      	ldr	r3, [r3, #24]
 8001e84:	4a07      	ldr	r2, [pc, #28]	; (8001ea4 <TIM_Init+0x90>)
 8001e86:	f043 0304 	orr.w	r3, r3, #4
 8001e8a:	6193      	str	r3, [r2, #24]
		RCC_GPIOB_CLK_EN();
 8001e8c:	4b05      	ldr	r3, [pc, #20]	; (8001ea4 <TIM_Init+0x90>)
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	4a04      	ldr	r2, [pc, #16]	; (8001ea4 <TIM_Init+0x90>)
 8001e92:	f043 0308 	orr.w	r3, r3, #8
 8001e96:	6193      	str	r3, [r2, #24]
}
 8001e98:	bf00      	nop
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bc80      	pop	{r7}
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40012c00 	.word	0x40012c00
 8001eac:	40000400 	.word	0x40000400

08001eb0 <TIM_PWM_Start>:

// Frequency must be 123<freq<80000
void TIM_PWM_Start(volatile TIM_TypeDef *TIMx, TIM_CH_t TIM_CHx, u32 dutyCycle, u32 frequency)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	607a      	str	r2, [r7, #4]
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	72fb      	strb	r3, [r7, #11]
	/* Individual channel initialization*/
	switch (TIM_CHx)
 8001ec0:	7afb      	ldrb	r3, [r7, #11]
 8001ec2:	2b03      	cmp	r3, #3
 8001ec4:	d862      	bhi.n	8001f8c <TIM_PWM_Start+0xdc>
 8001ec6:	a201      	add	r2, pc, #4	; (adr r2, 8001ecc <TIM_PWM_Start+0x1c>)
 8001ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ecc:	08001edd 	.word	0x08001edd
 8001ed0:	08001f09 	.word	0x08001f09
 8001ed4:	08001f35 	.word	0x08001f35
 8001ed8:	08001f61 	.word	0x08001f61
	{
	case TIM_CH1:
		TIMx->CCR1 = dutyCycle;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34
		TIMx->CCMR1 |= OCM_PWM2 << CCMR1_OC1M; // Select PWM Mode
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	699b      	ldr	r3, [r3, #24]
 8001ee6:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx->CCMR1, CCMR1_OC1PE);	   // Enable the corresponding preload register
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	f043 0208 	orr.w	r2, r3, #8
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx->CCER, CCER_CC1E);
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f043 0201 	orr.w	r2, r3, #1
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	621a      	str	r2, [r3, #32]
		break;
 8001f06:	e041      	b.n	8001f8c <TIM_PWM_Start+0xdc>

	case TIM_CH2:
		TIMx->CCR2 = dutyCycle;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	687a      	ldr	r2, [r7, #4]
 8001f0c:	639a      	str	r2, [r3, #56]	; 0x38
		TIMx->CCMR1 |= OCM_PWM2 << CCMR1_OC2M; // Select PWM Mode
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx->CCMR1, CCMR1_OC2PE);	   // Enable the corresponding preload register
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	619a      	str	r2, [r3, #24]
		SET_BIT(TIMx->CCER, CCER_CC2E);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f043 0210 	orr.w	r2, r3, #16
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	621a      	str	r2, [r3, #32]
		break;
 8001f32:	e02b      	b.n	8001f8c <TIM_PWM_Start+0xdc>

	case TIM_CH3:
		TIMx->CCR3 = dutyCycle;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	687a      	ldr	r2, [r7, #4]
 8001f38:	63da      	str	r2, [r3, #60]	; 0x3c
		TIMx->CCMR2 |= OCM_PWM2 << CCMR2_OC3M; // Select PWM Mode
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	69db      	ldr	r3, [r3, #28]
 8001f3e:	f043 0270 	orr.w	r2, r3, #112	; 0x70
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx->CCMR2, CCMR2_OC3PE);	   // Enable the corresponding preload register
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	69db      	ldr	r3, [r3, #28]
 8001f4a:	f043 0208 	orr.w	r2, r3, #8
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx->CCER, CCER_CC3E);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	6a1b      	ldr	r3, [r3, #32]
 8001f56:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	621a      	str	r2, [r3, #32]
		break;
 8001f5e:	e015      	b.n	8001f8c <TIM_PWM_Start+0xdc>

	case TIM_CH4:
		TIMx->CCR4 = dutyCycle;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	641a      	str	r2, [r3, #64]	; 0x40
		TIMx->CCMR2 |= OCM_PWM2 << CCMR2_OC4M; // Select PWM Mode
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f443 42e0 	orr.w	r2, r3, #28672	; 0x7000
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx->CCMR2, CCMR2_OC4PE);	   // Enable the corresponding preload register
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	69db      	ldr	r3, [r3, #28]
 8001f76:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	61da      	str	r2, [r3, #28]
		SET_BIT(TIMx->CCER, CCER_CC4E);
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6a1b      	ldr	r3, [r3, #32]
 8001f82:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	621a      	str	r2, [r3, #32]
		break;
 8001f8a:	bf00      	nop
	}

	/* Common initialization for all timer n channels */
	TIMx->ARR = TIM_PERIOD;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	2264      	movs	r2, #100	; 0x64
 8001f90:	62da      	str	r2, [r3, #44]	; 0x2c
	TIMx->PSC = (TIM_CLK / (TIMx->ARR * frequency)) - 1;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f96:	683a      	ldr	r2, [r7, #0]
 8001f98:	fb02 f303 	mul.w	r3, r2, r3
 8001f9c:	4a13      	ldr	r2, [pc, #76]	; (8001fec <TIM_PWM_Start+0x13c>)
 8001f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fa2:	1e5a      	subs	r2, r3, #1
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	629a      	str	r2, [r3, #40]	; 0x28

	if (TIMx == TIM1)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	4a11      	ldr	r2, [pc, #68]	; (8001ff0 <TIM_PWM_Start+0x140>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d105      	bne.n	8001fbc <TIM_PWM_Start+0x10c>
	{
		SET_BIT(TIMx->BDTR, BDTR_MOE);
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb4:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	645a      	str	r2, [r3, #68]	; 0x44

	/*As the preload registers are transferred to the shadow registers only when an update event
	occurs, before starting the counter, the user must initialize all the registers by setting the UG
	bit in the TIMx_EGR register
	*/
	SET_BIT(TIMx->EGR, EGR_UG);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f043 0201 	orr.w	r2, r3, #1
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	615a      	str	r2, [r3, #20]
	SET_BIT(TIMx->CR1, CR1_ARPE); //  Enable the auto-reload preload register
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	601a      	str	r2, [r3, #0]
	SET_BIT(TIMx->CR1, CR1_CEN);
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f043 0201 	orr.w	r2, r3, #1
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	601a      	str	r2, [r3, #0]
}
 8001fe0:	bf00      	nop
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr
 8001fea:	bf00      	nop
 8001fec:	007a1200 	.word	0x007a1200
 8001ff0:	40012c00 	.word	0x40012c00

08001ff4 <TIM_IC_Start>:

void TIM_IC_Start(volatile TIM_TypeDef *TIMx, TIM_CH_t TIM_CHx, u8 CCS_Direction, TIM_IC_Edge_t TIM_IC_Edge)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	4608      	mov	r0, r1
 8001ffe:	4611      	mov	r1, r2
 8002000:	461a      	mov	r2, r3
 8002002:	4603      	mov	r3, r0
 8002004:	70fb      	strb	r3, [r7, #3]
 8002006:	460b      	mov	r3, r1
 8002008:	70bb      	strb	r3, [r7, #2]
 800200a:	4613      	mov	r3, r2
 800200c:	707b      	strb	r3, [r7, #1]

	switch (TIM_CHx)
 800200e:	78fb      	ldrb	r3, [r7, #3]
 8002010:	2b03      	cmp	r3, #3
 8002012:	f200 809f 	bhi.w	8002154 <TIM_IC_Start+0x160>
 8002016:	a201      	add	r2, pc, #4	; (adr r2, 800201c <TIM_IC_Start+0x28>)
 8002018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201c:	0800202d 	.word	0x0800202d
 8002020:	08002079 	.word	0x08002079
 8002024:	080020bb 	.word	0x080020bb
 8002028:	08002107 	.word	0x08002107
	{
	case TIM_CH1:
		TIMx->CCMR1 |= (CCS_Direction << CCMR1_CC1S);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	699a      	ldr	r2, [r3, #24]
 8002030:	78bb      	ldrb	r3, [r7, #2]
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	619a      	str	r2, [r3, #24]
		if (TIM_IC_Edge == TIM_IC_RISING_EDGE)
 8002038:	787b      	ldrb	r3, [r7, #1]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d106      	bne.n	800204c <TIM_IC_Start+0x58>
		{
			CLR_BIT(TIMx->CCER, CCER_CC1P);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a1b      	ldr	r3, [r3, #32]
 8002042:	f023 0202 	bic.w	r2, r3, #2
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	621a      	str	r2, [r3, #32]
 800204a:	e008      	b.n	800205e <TIM_IC_Start+0x6a>
		}
		else if (TIM_IC_Edge == TIM_IC_FALLING_EDGE)
 800204c:	787b      	ldrb	r3, [r7, #1]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d105      	bne.n	800205e <TIM_IC_Start+0x6a>
		{
			SET_BIT(TIMx->CCER, CCER_CC1P);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	f043 0202 	orr.w	r2, r3, #2
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	621a      	str	r2, [r3, #32]
		}
		SET_BIT(TIMx->DIER, DIER_CC1IE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	68db      	ldr	r3, [r3, #12]
 8002062:	f043 0202 	orr.w	r2, r3, #2
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMx->CCER, CCER_CC1E);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6a1b      	ldr	r3, [r3, #32]
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	621a      	str	r2, [r3, #32]
		break;
 8002076:	e06d      	b.n	8002154 <TIM_IC_Start+0x160>

	case TIM_CH2:
		TIMx->CCMR1 |= (CCS_Direction << CCMR1_CC2S);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	699b      	ldr	r3, [r3, #24]
 800207c:	78ba      	ldrb	r2, [r7, #2]
 800207e:	0212      	lsls	r2, r2, #8
 8002080:	431a      	orrs	r2, r3
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	619a      	str	r2, [r3, #24]
		if (TIM_IC_Edge == TIM_IC_RISING_EDGE)
 8002086:	787b      	ldrb	r3, [r7, #1]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d106      	bne.n	800209a <TIM_IC_Start+0xa6>
		{
			CLR_BIT(TIMx->CCER, CCER_CC2P);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	f023 0220 	bic.w	r2, r3, #32
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	621a      	str	r2, [r3, #32]
 8002098:	e008      	b.n	80020ac <TIM_IC_Start+0xb8>
		}
		else if (TIM_IC_Edge == TIM_IC_FALLING_EDGE)
 800209a:	787b      	ldrb	r3, [r7, #1]
 800209c:	2b01      	cmp	r3, #1
 800209e:	d105      	bne.n	80020ac <TIM_IC_Start+0xb8>
		{
			SET_BIT(TIMx->CCER, CCER_CC2P);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6a1b      	ldr	r3, [r3, #32]
 80020a4:	f043 0220 	orr.w	r2, r3, #32
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	621a      	str	r2, [r3, #32]
		}
		//SET_BIT(TIMx->DIER, DIER_CC2IE);
		SET_BIT(TIMx->CCER, CCER_CC2E);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6a1b      	ldr	r3, [r3, #32]
 80020b0:	f043 0210 	orr.w	r2, r3, #16
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	621a      	str	r2, [r3, #32]
		break;
 80020b8:	e04c      	b.n	8002154 <TIM_IC_Start+0x160>

	case TIM_CH3:
		TIMx->CCMR2 |= CCS_Direction << CCMR2_CC3S;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	78bb      	ldrb	r3, [r7, #2]
 80020c0:	431a      	orrs	r2, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	61da      	str	r2, [r3, #28]
		if (TIM_IC_Edge == TIM_IC_RISING_EDGE)
 80020c6:	787b      	ldrb	r3, [r7, #1]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d106      	bne.n	80020da <TIM_IC_Start+0xe6>
		{
			CLR_BIT(TIMx->CCER, CCER_CC3P);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a1b      	ldr	r3, [r3, #32]
 80020d0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	621a      	str	r2, [r3, #32]
 80020d8:	e008      	b.n	80020ec <TIM_IC_Start+0xf8>
		}
		else if (TIM_IC_Edge == TIM_IC_FALLING_EDGE)
 80020da:	787b      	ldrb	r3, [r7, #1]
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d105      	bne.n	80020ec <TIM_IC_Start+0xf8>
		{
			SET_BIT(TIMx->CCER, CCER_CC3P);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	621a      	str	r2, [r3, #32]
		}
		SET_BIT(TIMx->DIER, DIER_CC3IE);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	f043 0208 	orr.w	r2, r3, #8
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMx->CCER, CCER_CC3E);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	621a      	str	r2, [r3, #32]
		break;
 8002104:	e026      	b.n	8002154 <TIM_IC_Start+0x160>

	case TIM_CH4:
		TIMx->CCMR2 |= CCS_Direction << CCMR2_CC4S;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	69db      	ldr	r3, [r3, #28]
 800210a:	78ba      	ldrb	r2, [r7, #2]
 800210c:	0212      	lsls	r2, r2, #8
 800210e:	431a      	orrs	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	61da      	str	r2, [r3, #28]
		if (TIM_IC_Edge == TIM_IC_RISING_EDGE)
 8002114:	787b      	ldrb	r3, [r7, #1]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d106      	bne.n	8002128 <TIM_IC_Start+0x134>
		{
			CLR_BIT(TIMx->CCER, CCER_CC4P);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	621a      	str	r2, [r3, #32]
 8002126:	e008      	b.n	800213a <TIM_IC_Start+0x146>
		}
		else if (TIM_IC_Edge == TIM_IC_FALLING_EDGE)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <TIM_IC_Start+0x146>
		{
			SET_BIT(TIMx->CCER, CCER_CC4P);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	621a      	str	r2, [r3, #32]
		}
		SET_BIT(TIMx->DIER, DIER_CC4IE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	68db      	ldr	r3, [r3, #12]
 800213e:	f043 0210 	orr.w	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	60da      	str	r2, [r3, #12]
		SET_BIT(TIMx->CCER, CCER_CC4E);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	621a      	str	r2, [r3, #32]
		break;
 8002152:	bf00      	nop
	}
	TIMx->ARR = TIM_MAX_PERIOD;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800215a:	62da      	str	r2, [r3, #44]	; 0x2c
	SET_BIT(TIMx->CR1, CR1_CEN);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	601a      	str	r2, [r3, #0]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	bc80      	pop	{r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop

08002174 <TIM_IC_INT_Enable>:

void TIM_IC_INT_Enable(volatile TIM_TypeDef *TIMx)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
	if (TIMx == TIM1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a0d      	ldr	r2, [pc, #52]	; (80021b4 <TIM_IC_INT_Enable+0x40>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d103      	bne.n	800218c <TIM_IC_INT_Enable+0x18>
	{
		NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002184:	201b      	movs	r0, #27
 8002186:	f7ff fe2d 	bl	8001de4 <NVIC_EnableIRQ>
	}
	else if (TIMx == TIM3)
	{
		NVIC_EnableIRQ(TIM3_IRQn);
	}
}
 800218a:	e00e      	b.n	80021aa <TIM_IC_INT_Enable+0x36>
	else if (TIMx == TIM2)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002192:	d103      	bne.n	800219c <TIM_IC_INT_Enable+0x28>
		NVIC_EnableIRQ(TIM2_IRQn);
 8002194:	201c      	movs	r0, #28
 8002196:	f7ff fe25 	bl	8001de4 <NVIC_EnableIRQ>
}
 800219a:	e006      	b.n	80021aa <TIM_IC_INT_Enable+0x36>
	else if (TIMx == TIM3)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	4a06      	ldr	r2, [pc, #24]	; (80021b8 <TIM_IC_INT_Enable+0x44>)
 80021a0:	4293      	cmp	r3, r2
 80021a2:	d102      	bne.n	80021aa <TIM_IC_INT_Enable+0x36>
		NVIC_EnableIRQ(TIM3_IRQn);
 80021a4:	201d      	movs	r0, #29
 80021a6:	f7ff fe1d 	bl	8001de4 <NVIC_EnableIRQ>
}
 80021aa:	bf00      	nop
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	40012c00 	.word	0x40012c00
 80021b8:	40000400 	.word	0x40000400

080021bc <TIM3_SetCallback>:
void TIM2_SetCallback(void (*functionPtr)(void))
{
	TIM2_Callback_Ptr = functionPtr;
}
void TIM3_SetCallback(void (*functionPtr)(void))
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
	TIM3_Callback_Ptr = functionPtr;
 80021c4:	4a03      	ldr	r2, [pc, #12]	; (80021d4 <TIM3_SetCallback+0x18>)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6013      	str	r3, [r2, #0]
}
 80021ca:	bf00      	nop
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr
 80021d4:	2000084c 	.word	0x2000084c

080021d8 <TIM1_UP_IRQHandler>:

void TIM1_UP_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
	if (TIM1_UP_Callback_Ptr != 0)
 80021dc:	4b04      	ldr	r3, [pc, #16]	; (80021f0 <TIM1_UP_IRQHandler+0x18>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d002      	beq.n	80021ea <TIM1_UP_IRQHandler+0x12>
	{
		TIM1_UP_Callback_Ptr();
 80021e4:	4b02      	ldr	r3, [pc, #8]	; (80021f0 <TIM1_UP_IRQHandler+0x18>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4798      	blx	r3
	}
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	2000083c 	.word	0x2000083c

080021f4 <TIM1_TRG_COM_IRQHandler>:
void TIM1_TRG_COM_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
	if (TIM1_TRG_COM_Callback_Ptr != 0)
 80021f8:	4b04      	ldr	r3, [pc, #16]	; (800220c <TIM1_TRG_COM_IRQHandler+0x18>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d002      	beq.n	8002206 <TIM1_TRG_COM_IRQHandler+0x12>
	{
		TIM1_TRG_COM_Callback_Ptr();
 8002200:	4b02      	ldr	r3, [pc, #8]	; (800220c <TIM1_TRG_COM_IRQHandler+0x18>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4798      	blx	r3
	}
}
 8002206:	bf00      	nop
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000840 	.word	0x20000840

08002210 <TIM1_CC_IRQHandler>:
void TIM1_CC_IRQHandler(void)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	if (TIM1_CC_Callback_Ptr != 0)
 8002214:	4b04      	ldr	r3, [pc, #16]	; (8002228 <TIM1_CC_IRQHandler+0x18>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d002      	beq.n	8002222 <TIM1_CC_IRQHandler+0x12>
	{
		TIM1_CC_Callback_Ptr();
 800221c:	4b02      	ldr	r3, [pc, #8]	; (8002228 <TIM1_CC_IRQHandler+0x18>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4798      	blx	r3
	}
}
 8002222:	bf00      	nop
 8002224:	bd80      	pop	{r7, pc}
 8002226:	bf00      	nop
 8002228:	20000844 	.word	0x20000844

0800222c <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	if (TIM3_Callback_Ptr != 0)
 8002230:	4b04      	ldr	r3, [pc, #16]	; (8002244 <TIM2_IRQHandler+0x18>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	d002      	beq.n	800223e <TIM2_IRQHandler+0x12>
	{
		TIM2_Callback_Ptr();
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <TIM2_IRQHandler+0x1c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4798      	blx	r3
	}
}
 800223e:	bf00      	nop
 8002240:	bd80      	pop	{r7, pc}
 8002242:	bf00      	nop
 8002244:	2000084c 	.word	0x2000084c
 8002248:	20000848 	.word	0x20000848

0800224c <TIM3_IRQHandler>:

void TIM3_IRQHandler(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0

	if (TIM3_Callback_Ptr != 0)
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <TIM3_IRQHandler+0x18>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d002      	beq.n	800225e <TIM3_IRQHandler+0x12>
	{
		TIM3_Callback_Ptr();
 8002258:	4b02      	ldr	r3, [pc, #8]	; (8002264 <TIM3_IRQHandler+0x18>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4798      	blx	r3
	}

}
 800225e:	bf00      	nop
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000084c 	.word	0x2000084c

08002268 <main>:
 */

#include "../APP/APP_interface.h"

int main()
{
 8002268:	b580      	push	{r7, lr}
 800226a:	af00      	add	r7, sp, #0
	APP_Init();
 800226c:	f7ff f80e 	bl	800128c <APP_Init>
	APP_IC_Start();
 8002270:	f7ff f820 	bl	80012b4 <APP_IC_Start>
	APP_PWM_Start(80, 500);
 8002274:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002278:	2050      	movs	r0, #80	; 0x50
 800227a:	f7ff f843 	bl	8001304 <APP_PWM_Start>
	APP_GLCD_Print_Init();
 800227e:	f7ff f8a7 	bl	80013d0 <APP_GLCD_Print_Init>

	while (1)
	{
		APP_GLCD_Update();
 8002282:	f7ff f8cf 	bl	8001424 <APP_GLCD_Update>
 8002286:	e7fc      	b.n	8002282 <main+0x1a>

08002288 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002288:	480d      	ldr	r0, [pc, #52]	; (80022c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800228a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800228c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002290:	480c      	ldr	r0, [pc, #48]	; (80022c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8002292:	490d      	ldr	r1, [pc, #52]	; (80022c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002294:	4a0d      	ldr	r2, [pc, #52]	; (80022cc <LoopForever+0xe>)
  movs r3, #0
 8002296:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002298:	e002      	b.n	80022a0 <LoopCopyDataInit>

0800229a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800229a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800229c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800229e:	3304      	adds	r3, #4

080022a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022a4:	d3f9      	bcc.n	800229a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022a6:	4a0a      	ldr	r2, [pc, #40]	; (80022d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80022a8:	4c0a      	ldr	r4, [pc, #40]	; (80022d4 <LoopForever+0x16>)
  movs r3, #0
 80022aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022ac:	e001      	b.n	80022b2 <LoopFillZerobss>

080022ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022b0:	3204      	adds	r2, #4

080022b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022b4:	d3fb      	bcc.n	80022ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80022b6:	f000 f811 	bl	80022dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ba:	f7ff ffd5 	bl	8002268 <main>

080022be <LoopForever>:

LoopForever:
    b LoopForever
 80022be:	e7fe      	b.n	80022be <LoopForever>
  ldr   r0, =_estack
 80022c0:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80022c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022c8:	200007f8 	.word	0x200007f8
  ldr r2, =_sidata
 80022cc:	08002368 	.word	0x08002368
  ldr r2, =_sbss
 80022d0:	200007f8 	.word	0x200007f8
  ldr r4, =_ebss
 80022d4:	20000850 	.word	0x20000850

080022d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022d8:	e7fe      	b.n	80022d8 <ADC1_2_IRQHandler>
	...

080022dc <__libc_init_array>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	2500      	movs	r5, #0
 80022e0:	4e0c      	ldr	r6, [pc, #48]	; (8002314 <__libc_init_array+0x38>)
 80022e2:	4c0d      	ldr	r4, [pc, #52]	; (8002318 <__libc_init_array+0x3c>)
 80022e4:	1ba4      	subs	r4, r4, r6
 80022e6:	10a4      	asrs	r4, r4, #2
 80022e8:	42a5      	cmp	r5, r4
 80022ea:	d109      	bne.n	8002300 <__libc_init_array+0x24>
 80022ec:	f000 f81a 	bl	8002324 <_init>
 80022f0:	2500      	movs	r5, #0
 80022f2:	4e0a      	ldr	r6, [pc, #40]	; (800231c <__libc_init_array+0x40>)
 80022f4:	4c0a      	ldr	r4, [pc, #40]	; (8002320 <__libc_init_array+0x44>)
 80022f6:	1ba4      	subs	r4, r4, r6
 80022f8:	10a4      	asrs	r4, r4, #2
 80022fa:	42a5      	cmp	r5, r4
 80022fc:	d105      	bne.n	800230a <__libc_init_array+0x2e>
 80022fe:	bd70      	pop	{r4, r5, r6, pc}
 8002300:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002304:	4798      	blx	r3
 8002306:	3501      	adds	r5, #1
 8002308:	e7ee      	b.n	80022e8 <__libc_init_array+0xc>
 800230a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800230e:	4798      	blx	r3
 8002310:	3501      	adds	r5, #1
 8002312:	e7f2      	b.n	80022fa <__libc_init_array+0x1e>
 8002314:	08002360 	.word	0x08002360
 8002318:	08002360 	.word	0x08002360
 800231c:	08002360 	.word	0x08002360
 8002320:	08002364 	.word	0x08002364

08002324 <_init>:
 8002324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002326:	bf00      	nop
 8002328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800232a:	bc08      	pop	{r3}
 800232c:	469e      	mov	lr, r3
 800232e:	4770      	bx	lr

08002330 <_fini>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	bf00      	nop
 8002334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002336:	bc08      	pop	{r3}
 8002338:	469e      	mov	lr, r3
 800233a:	4770      	bx	lr
